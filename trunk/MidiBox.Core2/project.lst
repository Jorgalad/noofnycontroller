gplink-0.13.5 alpha
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-21-2009  19:30:07
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ; $Id: mios_wrapper.asm 63 2008-01-31 20:44:17Z tk $
                                           ;
                                           ; This is the MIOS wrapper for SDCC (qualified for v2.5.0 and v2.6.0)
                                           ;
                                           ; the upper boundary of the stacks are defined here 
                                           ; customize the values for your needs
                                           #ifndef STACK_HEAD
                                           #define STACK_HEAD 0x37f
                                           #endif
                                           
                                           #ifndef STACK_IRQ_HEAD
                                           #define STACK_IRQ_HEAD 0x33f
                                           #endif
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           ;; ---[ MIOS header file ]---
                                           #include <mios.h>
                                           ; $Id: mios.h 387 2008-07-14 20:59:15Z tk $
                                           ;
                                           ; MIOS Definitions file
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2008 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  Include basic defines which characterize the derivative to
                                           ;;  simplify dependencies within MIOS source code
                                           ;; ==========================================================================
                                           #include <hw_flags.h>
                                           
                                           #ifndef _HW_FLAGS_H
                                           #define _HW_FLAGS_H
                                           
                                           #ifdef __18F452
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		0
                                           #define PIC_DERIVATIVE_CMCON_INIT	0
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4620
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x10000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xf80
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	1
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4682
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x14000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #ifdef __18F4685
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x18000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #endif
                                            
                                           ;; ==========================================================================
                                           ;;  Assembler directives & device specific include file
                                           ;;
                                           ;;  Natively supported devices are listed here.
                                           ;; ==========================================================================
                                           
                                           #ifdef __18F452
                                           	LIST R=DEC
                                           #include <p18f452.inc>
                                                   LIST
                                           ; P18F452.INC  Standard Header File, Version 1.4   Microchip Technology, Inc.
                                                   NOLIST
                                           #endif
                                           
                                           #ifdef __18F4620
                                           	LIST R=DEC
                                           #include <p18f4620.inc>
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           	LIST R=DEC
                                           #include <p18f4520.inc>
                                           #endif
                                           
                                           #ifdef __18F4682
                                           	LIST R=DEC
                                           #include <p18f4682.inc>
                                           #endif
                                           
                                           #ifdef __18F4685
                                           	LIST R=DEC
                                           #include <p18f4685.inc>
                                           #endif
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  General constants
                                           ;; ==========================================================================
                                           
                                           ;; used by MIOS_MIDI_Interface*
                                           MIOS_MIDI_INTERFACE_COMMON	EQU	0x00
                                           MIOS_MIDI_INTERFACE_TO_HOST	EQU	0x01
                                           
                                           ;; used by MIOS_MIDI_Merger*
                                           MIOS_MIDI_MERGER_DISABLED	EQU	0x00
                                           MIOS_MIDI_MERGER_ENABLED	EQU	0x01
                                           MIOS_MIDI_MERGER_MBLINK_EP	EQU	0x02
                                           MIOS_MIDI_MERGER_MBLINK_FP	EQU	0x03
                                           
                                           ;; used by MIOS_ENC_PIN_TABLE
                                           MIOS_ENC_MODE_NON_DETENTED	EQU	0x00
                                           MIOS_ENC_MODE_DETENTED		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED1		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED2		EQU	0x81
                                           MIOS_ENC_MODE_DETENTED3		EQU	0x82
                                           
                                           ;; used by MIOS_ENC_Speed*
                                           MIOS_ENC_SPEED_SLOW		EQU	0
                                           MIOS_ENC_SPEED_NORMAL		EQU	1
                                           MIOS_ENC_SPEED_FAST		EQU	2
                                           
                                           ;; used by MIOS_LCD_Type*
                                           MIOS_LCD_TYPE_CLCD		EQU	0x00
                                           MIOS_LCD_TYPE_GLCD0		EQU	0x01
                                           MIOS_LCD_TYPE_GLCD1		EQU	0x02
                                           MIOS_LCD_TYPE_GLCD2		EQU	0x03
                                           MIOS_LCD_TYPE_GLCD3		EQU	0x04
                                           MIOS_LCD_TYPE_GLCD4		EQU	0x05
                                           MIOS_LCD_TYPE_MLCD		EQU	0x06
                                           MIOS_LCD_TYPE_GLCD_CUSTOM	EQU	0x07
                                           
                                           ;; location of default 5x8 font for graphical displays
                                           MIOS_GLCD_FONT			EQU	0x7cfc
                                           
                                           ;; general config flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_CFG0_LCD_TYPE0		EQU 0	; selects LCD type, bit 0
                                           MIOS_BOX_CFG0_LCD_TYPE1		EQU 1	; selects LCD type, bit 1
                                           MIOS_BOX_CFG0_LCD_TYPE2		EQU 2	; selects LCD type, bit 2
                                           MIOS_BOX_CFG0_USE_GLCD		EQU 3	; if 1, graphical LCD is connected
                                           MIOS_BOX_CFG0_MERGER		EQU 4	; if 1, MIDI merger is enabled
                                           MIOS_BOX_CFG0_MBLINK		EQU 5	; if 1, MIDIbox Link is enabled
                                           MIOS_BOX_CFG0_TO_HOST		EQU 6	; if 1, MIDI interface will run with 38400 baud instead of 31250
                                           MIOS_BOX_CFG0_20MHz		EQU 7	; if 1, it is assumed that box is running with 20 MHz, else with 40 MHz
                                           
                                           MIOS_BOX_CFG1_BS_A0		EQU 0	; A0 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A1		EQU 1	; A1 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A2		EQU 2	; A2 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_DIS_VERIFY	EQU 3	; if 1, writes to the BankStick will not be verified
                                           MIOS_BOX_CFG1_IIC_STRETCH_CLK	EQU 4	; if 1, IIC clock stretching enabled
                                           
                                           ;; general status flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_STAT_BS_AVAILABLE	EQU 0	; if 1, BankStick is available
                                           MIOS_BOX_STAT_MBLINK_TUNNEL_PASS EQU 1  ; if 1, a MBLinked event will be tunnled
                                           MIOS_BOX_STAT_SUSPEND_ALL       EQU 2   ; if 1, all system and user tasks are suspended
                                           MIOS_BOX_STAT_SUSPEND_USER      EQU 3   ; if 1, all user tasks are suspended
                                           MIOS_BOX_STAT_AUTOREPEAT	EQU 4	; if 1, start the auto-repeat handler
                                           MIOS_BOX_STAT_MLCD_TRANSFER	EQU 5	; if 1, a transfer to the MLCD has been started
                                           MIOS_BOX_STAT_FERR		EQU 6	; if 1, a frame error happened during MIDI receive
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS Special Function Registers
                                           ;; ==========================================================================
                                           
                                           MIOS_BOX_CFG0	EQU	0x000
                                           MIOS_BOX_CFG1	EQU	0x001
                                           MIOS_BOX_STAT	EQU	0x002
                                           MIOS_PARAMETER1	EQU	0x003
                                           MIOS_PARAMETER2	EQU	0x004
                                           MIOS_PARAMETER3	EQU	0x005
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for main programs
                                           ;; ==========================================================================
                                           TMP1		EQU	0x006
                                           TMP2		EQU	0x007
                                           TMP3		EQU	0x008
                                           TMP4		EQU	0x009
                                           TMP5		EQU	0x00a
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for IRQs
                                           ;; ==========================================================================
                                           IRQ_TMP1	EQU	0x00b
                                           IRQ_TMP2	EQU	0x00c
                                           IRQ_TMP3	EQU	0x00d
                                           IRQ_TMP4	EQU	0x00e
                                           IRQ_TMP5	EQU	0x00f
                                           
                                           ;; ==========================================================================
                                           ;;  free memory space for user application:
                                           ;; ==========================================================================
                                           	;; 0x010-0x37f
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers -- not defined here -- 
                                           ;;  never use these memory locations!
                                           ;; ==========================================================================
                                           	;; 0x380-0x6ff
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers for custom LCD driver
                                           ;; ==========================================================================
                                           MIOS_GLCD_BUFFER	EQU	0x570	; note: the buffer must be located at ...0-...7
                                           MIOS_LCD_OPTION1	EQU	0x578	; contains the first LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_OPTION2	EQU	0x579	; contains the second LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_CURSOR_POS	EQU	0x57a	; the current cursor pos of characters (GLCD: multiplied by width)
                                           MIOS_GLCD_GCURSOR_X	EQU	0x57b	; for GLCDs: the current X position of graphical cursor
                                           MIOS_GLCD_GCURSOR_Y	EQU	0x57c	; for GLCDs: the current Y position of graphical cursor
                                           MIOS_GLCD_FONT_WIDTH	EQU	0x57d	; for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_HEIGHT	EQU	0x57e	; for GLCDs: the fontheight given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_X0	EQU	0x57f	; for GLCDs: the first byte within a char entry
                                           MIOS_GLCD_FONT_OFFSET	EQU	0x580	; for GLCDs: the byte offset between the characters
                                           MIOS_GLCD_FONT_PTRL	EQU	0x581	; for GLCDs: pointer to the character table, low-byte
                                           MIOS_GLCD_FONT_PTRH	EQU	0x582	; for GLCDs: pointer to the character table, high-byte
                                           MIOS_LCD_TIMEOUT0	EQU	0x583   ; can be used for timeout loops
                                           MIOS_LCD_TIMEOUT1	EQU	0x584   ; can be used for timeout loops
                                           MIOS_GLCD_TMP1		EQU	0x585   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP2		EQU	0x586   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP3		EQU	0x587   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP4		EQU	0x588   ; can be used as temporary buffer
                                           MIOS_LCD_Y0_OFFSET	EQU	0x589   ; Y0 offset of LCD
                                           MIOS_LCD_Y1_OFFSET	EQU	0x58a   ; Y1 offset of LCD
                                           MIOS_LCD_Y2_OFFSET	EQU	0x58b   ; Y2 offset of LCD
                                           MIOS_LCD_Y3_OFFSET	EQU	0x58c   ; Y3 offset of LCD
                                           MIOS_LCD_CURSOR_POS_REAL EQU	0x58d	; unmapped cursor position which has been set with MIOS_LCD_CursorSet
                                           MIOS_GLCD_FONT_PTRU	EQU	0x58e	; for GLCDs: pointer to the character table, upper-byte (>64k flash derivatives only)
                                           
                                           ;; ---[ vectors to MIOS functions (never change!) ]---
                                           #include <mios_vectors.inc>
                                           ; $Id: mios_vectors.inc 49 2008-01-30 21:47:31Z tk $
                                           
                                           MIOS_MIDI_BeginStream                   EQU	0x2c00
                                           MIOS_MIDI_DeviceIDAutoSet               EQU	0x2c04
                                           MIOS_MIDI_DeviceIDGet                   EQU	0x2c08
                                           MIOS_MIDI_DeviceIDSet                   EQU	0x2c0c
                                           MIOS_MIDI_EndStream                     EQU	0x2c10
                                           MIOS_MIDI_Init                          EQU	0x2c14
                                           MIOS_MIDI_InterfaceAutoSet              EQU	0x2c18
                                           MIOS_MIDI_InterfaceGet                  EQU	0x2c1c
                                           MIOS_MIDI_InterfaceSet                  EQU	0x2c20
                                           MIOS_MIDI_MergerGet                     EQU	0x2c24
                                           MIOS_MIDI_MergerSet                     EQU	0x2c28
                                           MIOS_MIDI_RxBufferFree                  EQU	0x2c2c
                                           MIOS_MIDI_RxBufferGet                   EQU	0x2c30
                                           MIOS_MIDI_RxBufferPut                   EQU	0x2c34
                                           MIOS_MIDI_RxBufferUsed                  EQU	0x2c38
                                           MIOS_MIDI_TxBufferFlush                 EQU	0x2c3c
                                           MIOS_MIDI_TxBufferFree                  EQU	0x2c40
                                           MIOS_MIDI_TxBufferGet                   EQU	0x2c44
                                           MIOS_MIDI_TxBufferPut                   EQU	0x2c48
                                           MIOS_MIDI_TxBufferUsed                  EQU	0x2c4c
                                           MIOS_MPROC_MergerDisable                EQU	0x2c50
                                           MIOS_MPROC_MergerEnable                 EQU	0x2c54
                                           MIOS_MPROC_MergerGet                    EQU	0x2c58
                                           MIOS_AIN_DeadbandGet                    EQU	0x2c5c
                                           MIOS_AIN_DeadbandSet                    EQU	0x2c60
                                           MIOS_AIN_Muxed                          EQU	0x2c64
                                           MIOS_AIN_NumberGet                      EQU	0x2c68
                                           MIOS_AIN_NumberSet                      EQU	0x2c6c
                                           MIOS_AIN_Pin7bitGet                     EQU	0x2c70
                                           MIOS_AIN_PinGet                         EQU	0x2c74
                                           MIOS_AIN_PinLSBGet                      EQU	0x2c78
                                           MIOS_AIN_PinMSBGet                      EQU	0x2c7c
                                           MIOS_AIN_UnMuxed                        EQU	0x2c80
                                           MIOS_MF_PWM_DutyCycleDownGet            EQU	0x2c84
                                           MIOS_MF_PWM_DutyCycleDownSet            EQU	0x2c88
                                           MIOS_MF_PWM_DutyCycleUpGet              EQU	0x2c8c
                                           MIOS_MF_PWM_DutyCycleUpSet              EQU	0x2c90
                                           MIOS_MF_DeadbandGet                     EQU	0x2c94
                                           MIOS_MF_DeadbandSet                     EQU	0x2c98
                                           MIOS_MF_Disable                         EQU	0x2c9c
                                           MIOS_MF_Enable                          EQU	0x2ca0
                                           MIOS_MF_FaderMove                       EQU	0x2ca4
                                           MIOS_MF_SuspendDisable                  EQU	0x2ca8
                                           MIOS_MF_SuspendEnable                   EQU	0x2cac
                                           MIOS_MF_SuspendGet                      EQU	0x2cb0
                                           MIOS_DIN_PinGet                         EQU	0x2cb4
                                           MIOS_DIN_SRGet                          EQU	0x2cb8
                                           MIOS_DOUT_PinGet                        EQU	0x2cbc
                                           MIOS_DOUT_PinSet                        EQU	0x2cc0
                                           MIOS_DOUT_PinSet0                       EQU	0x2cc4
                                           MIOS_DOUT_PinSet1                       EQU	0x2cc8
                                           MIOS_DOUT_SRGet                         EQU	0x2ccc
                                           MIOS_DOUT_SRSet                         EQU	0x2cd0
                                           MIOS_ENC_Abs7bitAdd                     EQU	0x2cd4
                                           MIOS_ENC_Abs7bitGet                     EQU	0x2cd8
                                           MIOS_ENC_Abs7bitSet                     EQU	0x2cdc
                                           MIOS_ENC_NumberGet                      EQU	0x2ce0
                                           MIOS_ENC_SpeedGet                       EQU	0x2ce4
                                           MIOS_ENC_SpeedSet                       EQU	0x2ce8
                                           MIOS_SRIO_NumberGet                     EQU	0x2cec
                                           MIOS_SRIO_NumberSet                     EQU	0x2cf0
                                           MIOS_SRIO_TS_SensitivityGet             EQU	0x2cf4
                                           MIOS_SRIO_TS_SensitivitySet             EQU	0x2cf8
                                           MIOS_SRIO_UpdateFrqGet                  EQU	0x2cfc
                                           MIOS_SRIO_UpdateFrqSet                  EQU	0x2d00
                                           MIOS_LCD_Clear                          EQU	0x2d04
                                           MIOS_LCD_Cmd                            EQU	0x2d08
                                           MIOS_LCD_CursorGet                      EQU	0x2d0c
                                           MIOS_LCD_CursorSet                      EQU	0x2d10
                                           MIOS_LCD_Data                           EQU	0x2d14
                                           MIOS_LCD_Init                           EQU	0x2d18
                                           MIOS_LCD_PrintBCD1	                EQU	0x2d1c
                                           MIOS_LCD_PrintBCD2                      EQU	0x2d20
                                           MIOS_LCD_PrintBCD3                      EQU	0x2d24
                                           MIOS_LCD_PrintChar	                EQU	0x2d28
                                           MIOS_LCD_PrintHex1	                EQU	0x2d2c
                                           MIOS_LCD_PrintHex2                      EQU	0x2d30
                                           MIOS_LCD_PrintMessage                   EQU	0x2d34
                                           MIOS_LCD_PrintPreconfString             EQU	0x2d38
                                           MIOS_LCD_PrintString                    EQU	0x2d3c
                                           MIOS_LCD_TypeAutoSet                    EQU	0x2d40
                                           MIOS_LCD_TypeGet                        EQU	0x2d44
                                           MIOS_LCD_TypeSet                        EQU	0x2d48
                                           MIOS_LCD_YAddressGet                    EQU	0x2d4c
                                           MIOS_LCD_YAddressSet                    EQU	0x2d50
                                           MIOS_GLCD_FontInit                      EQU	0x2d54
                                           MIOS_GLCD_GCursorGet                    EQU	0x2d58
                                           MIOS_GLCD_GCursorSet                    EQU	0x2d5c
                                           MIOS_EEPROM_Read                        EQU	0x2d60
                                           MIOS_EEPROM_Write                       EQU	0x2d64
                                           MIOS_FLASH_Read                         EQU	0x2d68
                                           MIOS_FLASH_Write                        EQU	0x2d6c
                                           MIOS_BANKSTICK_Read                     EQU	0x2d70
                                           MIOS_BANKSTICK_Write                    EQU	0x2d74
                                           MIOS_TIMER_Init                         EQU	0x2d78
                                           MIOS_TIMER_Start                        EQU	0x2d7c
                                           MIOS_TIMER_Stop                         EQU	0x2d80
                                           MIOS_HLP_AddressFromTable               EQU	0x2d84
                                           MIOS_HLP_GetBitANDMask                  EQU	0x2d88
                                           MIOS_HLP_GetBitORMask                   EQU	0x2d8c
                                           MIOS_HLP_GetIndex_2bytes                EQU	0x2d90
                                           MIOS_HLP_GetIndex_4bytes                EQU	0x2d94
                                           MIOS_HLP_IndirectJump                   EQU	0x2d98
                                           MIOS_Delay                              EQU	0x2d9c
                                           MIOS_GPCounterGet                       EQU	0x2da0
                                           MIOS_Reset                              EQU	0x2da4
                                           MIOS_SystemResume                       EQU	0x2da8
                                           MIOS_SystemSuspend                      EQU	0x2dac
                                           MIOS_UserResume                         EQU	0x2db0
                                           MIOS_UserSuspend                        EQU	0x2db4
                                           MIOS_HLP_16bitAddSaturate		EQU	0x2db8
                                           MIOS_DIN_PinAutoRepeatEnable		EQU	0x2dbc
                                           MIOS_DIN_PinAutoRepeatDisable		EQU	0x2dc0
                                           MIOS_DIN_PinAutoRepeatGet		EQU	0x2dc4
                                           MIOS_CLCD_SpecialCharInit		EQU	0x2dc8
                                           MIOS_CLCD_SpecialCharsInit		EQU	0x2dcc
                                           MIOS_AIN_DynamicPrioSet			EQU	0x2dd0
                                           MIOS_AIN_DynamicPrioGet			EQU	0x2dd4
                                           MIOS_AIN_LastPinsGet			EQU	0x2dd8
                                           MIOS_BANKSTICK_CtrlSet			EQU	0x2ddc
                                           MIOS_BANKSTICK_CtrlGet			EQU	0x2de0
                                           MIOS_BANKSTICK_WritePage		EQU	0x2de4
                                           MIOS_HLP_Dec2BCD			EQU	0x2de8
                                           MIOS_LCD_PrintBCD4			EQU	0x2dec
                                           MIOS_LCD_PrintBCD5                      EQU	0x2df0
                                           MIOS_LCD_MessageStart			EQU	0x2df4
                                           MIOS_LCD_MessageStop			EQU	0x2df8
                                           MIOS_MF_PWM_PeriodGet                   EQU	0x2dfc
                                           MIOS_MF_PWM_PeriodSet                   EQU	0x2e00
                                           MIOS_IIC_Start				EQU	0x2e04
                                           MIOS_IIC_Stop				EQU	0x2e08
                                           MIOS_IIC_ByteSend			EQU	0x2e0c
                                           MIOS_IIC_ByteReceive			EQU	0x2e10
                                           MIOS_IIC_AckSend			EQU	0x2e14
                                           MIOS_IIC_NakSend			EQU	0x2e18
                                           MIOS_IIC_CtrlSet			EQU	0x2e1c
                                           MIOS_IIC_CtrlGet			EQU	0x2e20
                                           MIOS_SRIO_DebounceSet			EQU	0x2e24
                                           MIOS_SRIO_DebounceGet			EQU	0x2e28
                                           MIOS_MF_TouchDetectionReset		EQU	0x2e2c
                                           MIOS_BANKSTICK_ReadPage			EQU	0x2e30
                                           MIOS_EEPROM_ReadPage			EQU	0x2e34
                                           MIOS_EEPROM_WritePage			EQU	0x2e38
                                           MIOS_TIMER_ReInit			EQU	0x2e3c
                                           MIOS_RESERVED_144                       EQU	0x2e40
                                           MIOS_RESERVED_145                       EQU	0x2e44
                                           MIOS_RESERVED_146                       EQU	0x2e48
                                           MIOS_RESERVED_147                       EQU	0x2e4c
                                           MIOS_RESERVED_148                       EQU	0x2e50
                                           MIOS_RESERVED_149                       EQU	0x2e54
                                           MIOS_RESERVED_150                       EQU	0x2e58
                                           MIOS_RESERVED_151                       EQU	0x2e5c
                                           MIOS_RESERVED_152                       EQU	0x2e60
                                           MIOS_RESERVED_153                       EQU	0x2e64
                                           MIOS_RESERVED_154                       EQU	0x2e68
                                           MIOS_RESERVED_155                       EQU	0x2e6c
                                           MIOS_RESERVED_156                       EQU	0x2e70
                                           MIOS_RESERVED_157                       EQU	0x2e74
                                           MIOS_RESERVED_158                       EQU	0x2e78
                                           MIOS_RESERVED_159                       EQU	0x2e7c
                                           MIOS_RESERVED_160                       EQU	0x2e80
                                           MIOS_RESERVED_161                       EQU	0x2e84
                                           MIOS_RESERVED_162                       EQU	0x2e88
                                           MIOS_RESERVED_163                       EQU	0x2e8c
                                           MIOS_RESERVED_164                       EQU	0x2e90
                                           MIOS_RESERVED_165                       EQU	0x2e94
                                           MIOS_RESERVED_166                       EQU	0x2e98
                                           MIOS_RESERVED_167                       EQU	0x2e9c
                                           MIOS_RESERVED_168                       EQU	0x2ea0
                                           MIOS_RESERVED_169                       EQU	0x2ea4
                                           MIOS_RESERVED_170                       EQU	0x2ea8
                                           MIOS_RESERVED_171                       EQU	0x2eac
                                           MIOS_RESERVED_172                       EQU	0x2eb0
                                           MIOS_RESERVED_173                       EQU	0x2eb4
                                           MIOS_RESERVED_174                       EQU	0x2eb8
                                           MIOS_RESERVED_175                       EQU	0x2ebc
                                           MIOS_RESERVED_176                       EQU	0x2ec0
                                           MIOS_RESERVED_177                       EQU	0x2ec4
                                           MIOS_RESERVED_178                       EQU	0x2ec8
                                           MIOS_RESERVED_179                       EQU	0x2ecc
                                           MIOS_RESERVED_180                       EQU	0x2ed0
                                           MIOS_RESERVED_181                       EQU	0x2ed4
                                           MIOS_RESERVED_182                       EQU	0x2ed8
                                           MIOS_RESERVED_183                       EQU	0x2edc
                                           MIOS_RESERVED_184                       EQU	0x2ee0
                                           MIOS_RESERVED_185                       EQU	0x2ee4
                                           MIOS_RESERVED_186                       EQU	0x2ee8
                                           MIOS_RESERVED_187                       EQU	0x2eec
                                           MIOS_RESERVED_188                       EQU	0x2ef0
                                           MIOS_RESERVED_189                       EQU	0x2ef4
                                           MIOS_RESERVED_190                       EQU	0x2ef8
                                           MIOS_RESERVED_191                       EQU	0x2efc
                                           MIOS_RESERVED_192                       EQU	0x2f00
                                           MIOS_RESERVED_193                       EQU	0x2f04
                                           MIOS_RESERVED_194                       EQU	0x2f08
                                           MIOS_RESERVED_195                       EQU	0x2f0c
                                           MIOS_RESERVED_196                       EQU	0x2f10
                                           MIOS_RESERVED_197                       EQU	0x2f14
                                           MIOS_RESERVED_198                       EQU	0x2f18
                                           MIOS_RESERVED_199                       EQU	0x2f1c
                                           MIOS_RESERVED_200                       EQU	0x2f20
                                           MIOS_RESERVED_201                       EQU	0x2f24
                                           MIOS_RESERVED_202                       EQU	0x2f28
                                           MIOS_RESERVED_203                       EQU	0x2f2c
                                           MIOS_RESERVED_204                       EQU	0x2f30
                                           MIOS_RESERVED_205                       EQU	0x2f34
                                           MIOS_RESERVED_206                       EQU	0x2f38
                                           MIOS_RESERVED_207                       EQU	0x2f3c
                                           MIOS_RESERVED_208                       EQU	0x2f40
                                           MIOS_RESERVED_209                       EQU	0x2f44
                                           MIOS_RESERVED_210                       EQU	0x2f48
                                           MIOS_RESERVED_211                       EQU	0x2f4c
                                           MIOS_RESERVED_212                       EQU	0x2f50
                                           MIOS_RESERVED_213                       EQU	0x2f54
                                           MIOS_RESERVED_214                       EQU	0x2f58
                                           MIOS_RESERVED_215                       EQU	0x2f5c
                                           MIOS_RESERVED_216                       EQU	0x2f60
                                           MIOS_RESERVED_217                       EQU	0x2f64
                                           MIOS_RESERVED_218                       EQU	0x2f68
                                           MIOS_RESERVED_219                       EQU	0x2f6c
                                           MIOS_RESERVED_220                       EQU	0x2f70
                                           MIOS_RESERVED_221                       EQU	0x2f74
                                           MIOS_RESERVED_222                       EQU	0x2f78
                                           MIOS_RESERVED_223                       EQU	0x2f7c
                                           MIOS_RESERVED_224                       EQU	0x2f80
                                           MIOS_RESERVED_225                       EQU	0x2f84
                                           MIOS_RESERVED_226                       EQU	0x2f88
                                           MIOS_RESERVED_227                       EQU	0x2f8c
                                           MIOS_RESERVED_228                       EQU	0x2f90
                                           MIOS_RESERVED_229                       EQU	0x2f94
                                           MIOS_RESERVED_230                       EQU	0x2f98
                                           MIOS_RESERVED_231                       EQU	0x2f9c
                                           MIOS_RESERVED_232                       EQU	0x2fa0
                                           MIOS_RESERVED_233                       EQU	0x2fa4
                                           MIOS_RESERVED_234                       EQU	0x2fa8
                                           MIOS_RESERVED_235                       EQU	0x2fac
                                           MIOS_RESERVED_236                       EQU	0x2fb0
                                           MIOS_RESERVED_237                       EQU	0x2fb4
                                           MIOS_RESERVED_238                       EQU	0x2fb8
                                           MIOS_RESERVED_239                       EQU	0x2fbc
                                           MIOS_RESERVED_240                       EQU	0x2fc0
                                           MIOS_RESERVED_241                       EQU	0x2fc4
                                           MIOS_RESERVED_242                       EQU	0x2fc8
                                           MIOS_RESERVED_243                       EQU	0x2fcc
                                           MIOS_RESERVED_244                       EQU	0x2fd0
                                           MIOS_RESERVED_245                       EQU	0x2fd4
                                           MIOS_RESERVED_246                       EQU	0x2fd8
                                           MIOS_RESERVED_247                       EQU	0x2fdc
                                           MIOS_RESERVED_248                       EQU	0x2fe0
                                           MIOS_RESERVED_249                       EQU	0x2fe4
                                           MIOS_RESERVED_250                       EQU	0x2fe8
                                           MIOS_RESERVED_251                       EQU	0x2fec
                                           MIOS_RESERVED_252                       EQU	0x2ff0
                                           MIOS_RESERVED_253                       EQU	0x2ff4
                                           MIOS_RESERVED_254                       EQU	0x2ff8
                                           MIOS_RESERVED_255                       EQU	0x2ffc
                                           
                                           ;; ---[ user hooks (never change!) ]---
                                           #include <user_vectors.inc>
                                           ; $Id: user_vectors.inc 49 2008-01-30 21:47:31Z tk $
                                           ;
                                           ; User vectortable - contains user hooks to MIOS
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           	;; never change the origin or the order of entries!
                                           	org	0x3000
                                           _User_Init
003000   ef96     goto	0x512c              	goto	USER_Init
003002   f028
                                           _USER_Tick
003004   ef9c     goto	0x5138              	goto	USER_Tick
003006   f028
                                           _USER_Timer
003008   efa2     goto	0x5144              	goto	USER_Timer
00300a   f028
                                           _USER_MPROC_DebugTrigger
00300c   efb1     goto	0x5162              	goto	USER_MPROC_DebugTrigger
00300e   f028
                                           _USER_DISPLAY_Init
003010   efb2     goto	0x5164              	goto	USER_DISPLAY_Init
003012   f028
                                           _USER_DISPLAY_Tick
003014   efb8     goto	0x5170              	goto	USER_DISPLAY_Tick
003016   f028
                                           _USER_SR_Service_Prepare
003018   eff4     goto	0x51e8              	goto	USER_SR_Service_Prepare
00301a   f028
                                           _USER_SR_Service_Finish
00301c   ef03     goto	0x5206              	goto	USER_SR_Service_Finish
00301e   f029
                                           _USER_DIN_NotifyToggle
003020   efe4     goto	0x51c8              	goto	USER_DIN_NotifyToggle
003022   f028
                                           _USER_ENC_NotifyChange
003024   efec     goto	0x51d8              	goto	USER_ENC_NotifyChange
003026   f028
                                           _USER_AIN_NotifyChange
003028   ef12     goto	0x5224              	goto	USER_AIN_NotifyChange
00302a   f029
                                           _USER_MPROC_NotifyReceivedByte
00302c   efdc     goto	0x51b8              	goto	USER_MPROC_NotifyReceivedByte
00302e   f028
                                           _USER_MPROC_NotifyTimeout
003030   efd6     goto	0x51ac              	goto	USER_MPROC_NotifyTimeout
003032   f028
                                           _USER_MPROC_NotifyReceivedEvent
003034   efbe     goto	0x517c              	goto	USER_MPROC_NotifyReceivedEvent
003036   f028
                                           _USER_MPROC_NotifyFoundEvent
003038   efc9     goto	0x5192              	goto	USER_MPROC_NotifyFoundEvent
00303a   f028
                                           _USER_LCD_Init
00303c   ef1c     goto	0x5c38              	goto	USER_LCD_Init
00303e   f02e
                                           _USER_LCD_Clear
003040   ef1d     goto	0x5c3a              	goto	USER_LCD_Clear
003042   f02e
                                           _USER_LCD_CursorSet
003044   ef1e     goto	0x5c3c              	goto	USER_LCD_CursorSet
003046   f02e
                                           _USER_LCD_PrintChar
003048   ef1f     goto	0x5c3e              	goto	USER_LCD_PrintChar
00304a   f02e
                                           _USER_MIDI_NotifyRx
00304c   efe3     goto	0x51c6              	goto	USER_MIDI_NotifyRx
00304e   f028
                                           _USER_MIDI_NotifyTx
003050   efe2     goto	0x51c4              	goto	USER_MIDI_NotifyTx
003052   f028
                                           _USER_LCD_Data
003054   ef20     goto	0x5c40              	goto	USER_LCD_Data
003056   f02e
                                           _USER_LCD_Cmd
003058   ef21     goto	0x5c42              	goto	USER_LCD_Cmd
00305a   f02e
                                           _USER_LCD_SpecialCharInit
00305c   ef22     goto	0x5c44              	goto	USER_LCD_SpecialCharInit
00305e   f02e
                                           USER_RESERVED_25
003060   0012     return	0                 	return
003062   0000     nop                      	nop
                                           USER_RESERVED_26
003064   0012     return	0                 	return
003066   0000     nop                      	nop
                                           USER_RESERVED_27
003068   0012     return	0                 	return
00306a   0000     nop                      	nop
                                           USER_RESERVED_28
00306c   0012     return	0                 	return
00306e   0000     nop                      	nop
                                           USER_RESERVED_29
003070   0012     return	0                 	return
003072   0000     nop                      	nop
                                           USER_RESERVED_30
003074   0012     return	0                 	return
003076   0000     nop                      	nop
                                           USER_RESERVED_31
003078   0012     return	0                 	return
00307a   0000     nop                      	nop
                                           USER_RESERVED_32
00307c   0012     return	0                 	return
00307e   0000     nop                      	nop
                                           
                                           ;; ==========================================================================
                                           ;;  General Application Settings
                                           ;; ==========================================================================
                                           
                                           ;; ---[ configuration table for MIDI processor ]---
                                           #ifndef DONT_INCLUDE_MIOS_MT_TABLE
                                           ;; dummy table located in $MIOS_PATH/include/asm
                                           ;; If the application should use MT entries,
                                           ;; just add "-DDONT_INCLUDE_MIOS_MT_TABLE" to MIOS_WRAPPER_DEFINES
                                           ;; and build the table within the C program with:
                                           ;; 
                                           ;; MIOS_MT_TABLE {
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x10), // CC#16
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x11), // CC#17
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x12), // CC#18
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x13), // CC#19
                                           ;;   MIOS_MT_EOT
                                           ;; };
                                           ;; 
                                           ;; The MIOS_MT_* macros are defined in $MIOS_PATH/include/c/cmios.h
                                           ;; 
                                           ;; Note that due to the inflexibility of the MT Table concept, it isn't
                                           ;; recommented for new designs
                                           #include <mios_mt_table.inc>
                                           ; $Id: mios_mt_table.inc 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; "Dummy" MIDI Trigger Configuaration Table
                                           ; 
                                           ; Should be included by the application, if the MIDI processor feature
                                           ; is not used in order to pre-initialize the table area with EOT's
                                           ;
                                           ; Note: due to the inflexible concept (e.g. handling of Note On/Off events),
                                           ; the usage of this function is not recommented for new designs - please parse 
                                           ; MIDI events locally within the application.
                                           ;
                                           ;
                                           	org	0x3080		; never change the origin!
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; The MIDI Trigger table maps incoming MIDI events to control elements
                                           ;; (pots/faders, encoders, buttons, LEDs, ...)
                                           ;; 
                                           ;; After the MIOS MIDI processor (MPROC) has received a complete event, it
                                           ;; searches in this table for a matching entry and calls USER_MPROC_NotifyFoundEvent
                                           ;; with the table index in WREG and the MIDI event in MIOS_PARAMETER[123]
                                           ;; 
                                           ;; Note also that the MIDI processor stops scanning the table after
                                           ;; the first MT_EOT entry
                                           ;; 
                                           ;; Note2: never change the origin (memory location) of this table!
                                           ;; 
                                           ;; Optionally this table can also be used to define events, which should be
                                           ;; transmitted (Example: see example_ain64_din128_dout128), so that incoming
                                           ;; and outgoing events are located at one place
                                           ;; 
                                           ;; The table *must* contain 256 entries. Unused entries should be filled with
                                           ;; MT_EOT.
                                           ;; --------------------------------------------------------------------------
                                           
                                           	;; MIDI Trigger entry structure
                                           MT_ENTRY MACRO event_0, event_1
                                           	dw	(event_1 << 8) | event_0
                                           	ENDM
                                           
                                           MT_EOT	MACRO
003080   ffff     dw	0xffff  ;unknown opcode 	dw	0xffff
003082   ffff     dw	0xffff  ;unknown opcode 
003084   ffff     dw	0xffff  ;unknown opcode 
003086   ffff     dw	0xffff  ;unknown opcode 
003088   ffff     dw	0xffff  ;unknown opcode 
00308a   ffff     dw	0xffff  ;unknown opcode 
00308c   ffff     dw	0xffff  ;unknown opcode 
00308e   ffff     dw	0xffff  ;unknown opcode 
003090   ffff     dw	0xffff  ;unknown opcode 
003092   ffff     dw	0xffff  ;unknown opcode 
003094   ffff     dw	0xffff  ;unknown opcode 
003096   ffff     dw	0xffff  ;unknown opcode 
003098   ffff     dw	0xffff  ;unknown opcode 
00309a   ffff     dw	0xffff  ;unknown opcode 
00309c   ffff     dw	0xffff  ;unknown opcode 
00309e   ffff     dw	0xffff  ;unknown opcode 
0030a0   ffff     dw	0xffff  ;unknown opcode 
0030a2   ffff     dw	0xffff  ;unknown opcode 
0030a4   ffff     dw	0xffff  ;unknown opcode 
0030a6   ffff     dw	0xffff  ;unknown opcode 
0030a8   ffff     dw	0xffff  ;unknown opcode 
0030aa   ffff     dw	0xffff  ;unknown opcode 
0030ac   ffff     dw	0xffff  ;unknown opcode 
0030ae   ffff     dw	0xffff  ;unknown opcode 
0030b0   ffff     dw	0xffff  ;unknown opcode 
0030b2   ffff     dw	0xffff  ;unknown opcode 
0030b4   ffff     dw	0xffff  ;unknown opcode 
0030b6   ffff     dw	0xffff  ;unknown opcode 
0030b8   ffff     dw	0xffff  ;unknown opcode 
0030ba   ffff     dw	0xffff  ;unknown opcode 
0030bc   ffff     dw	0xffff  ;unknown opcode 
0030be   ffff     dw	0xffff  ;unknown opcode 
0030c0   ffff     dw	0xffff  ;unknown opcode 
0030c2   ffff     dw	0xffff  ;unknown opcode 
0030c4   ffff     dw	0xffff  ;unknown opcode 
0030c6   ffff     dw	0xffff  ;unknown opcode 
0030c8   ffff     dw	0xffff  ;unknown opcode 
0030ca   ffff     dw	0xffff  ;unknown opcode 
0030cc   ffff     dw	0xffff  ;unknown opcode 
0030ce   ffff     dw	0xffff  ;unknown opcode 
0030d0   ffff     dw	0xffff  ;unknown opcode 
0030d2   ffff     dw	0xffff  ;unknown opcode 
0030d4   ffff     dw	0xffff  ;unknown opcode 
0030d6   ffff     dw	0xffff  ;unknown opcode 
0030d8   ffff     dw	0xffff  ;unknown opcode 
0030da   ffff     dw	0xffff  ;unknown opcode 
0030dc   ffff     dw	0xffff  ;unknown opcode 
0030de   ffff     dw	0xffff  ;unknown opcode 
0030e0   ffff     dw	0xffff  ;unknown opcode 
0030e2   ffff     dw	0xffff  ;unknown opcode 
0030e4   ffff     dw	0xffff  ;unknown opcode 
0030e6   ffff     dw	0xffff  ;unknown opcode 
0030e8   ffff     dw	0xffff  ;unknown opcode 
0030ea   ffff     dw	0xffff  ;unknown opcode 
0030ec   ffff     dw	0xffff  ;unknown opcode 
0030ee   ffff     dw	0xffff  ;unknown opcode 
0030f0   ffff     dw	0xffff  ;unknown opcode 
0030f2   ffff     dw	0xffff  ;unknown opcode 
0030f4   ffff     dw	0xffff  ;unknown opcode 
0030f6   ffff     dw	0xffff  ;unknown opcode 
0030f8   ffff     dw	0xffff  ;unknown opcode 
0030fa   ffff     dw	0xffff  ;unknown opcode 
0030fc   ffff     dw	0xffff  ;unknown opcode 
0030fe   ffff     dw	0xffff  ;unknown opcode 
003100   ffff     dw	0xffff  ;unknown opcode 
003102   ffff     dw	0xffff  ;unknown opcode 
003104   ffff     dw	0xffff  ;unknown opcode 
003106   ffff     dw	0xffff  ;unknown opcode 
003108   ffff     dw	0xffff  ;unknown opcode 
00310a   ffff     dw	0xffff  ;unknown opcode 
00310c   ffff     dw	0xffff  ;unknown opcode 
00310e   ffff     dw	0xffff  ;unknown opcode 
003110   ffff     dw	0xffff  ;unknown opcode 
003112   ffff     dw	0xffff  ;unknown opcode 
003114   ffff     dw	0xffff  ;unknown opcode 
003116   ffff     dw	0xffff  ;unknown opcode 
003118   ffff     dw	0xffff  ;unknown opcode 
00311a   ffff     dw	0xffff  ;unknown opcode 
00311c   ffff     dw	0xffff  ;unknown opcode 
00311e   ffff     dw	0xffff  ;unknown opcode 
003120   ffff     dw	0xffff  ;unknown opcode 
003122   ffff     dw	0xffff  ;unknown opcode 
003124   ffff     dw	0xffff  ;unknown opcode 
003126   ffff     dw	0xffff  ;unknown opcode 
003128   ffff     dw	0xffff  ;unknown opcode 
00312a   ffff     dw	0xffff  ;unknown opcode 
00312c   ffff     dw	0xffff  ;unknown opcode 
00312e   ffff     dw	0xffff  ;unknown opcode 
003130   ffff     dw	0xffff  ;unknown opcode 
003132   ffff     dw	0xffff  ;unknown opcode 
003134   ffff     dw	0xffff  ;unknown opcode 
003136   ffff     dw	0xffff  ;unknown opcode 
003138   ffff     dw	0xffff  ;unknown opcode 
00313a   ffff     dw	0xffff  ;unknown opcode 
00313c   ffff     dw	0xffff  ;unknown opcode 
00313e   ffff     dw	0xffff  ;unknown opcode 
003140   ffff     dw	0xffff  ;unknown opcode 
003142   ffff     dw	0xffff  ;unknown opcode 
003144   ffff     dw	0xffff  ;unknown opcode 
003146   ffff     dw	0xffff  ;unknown opcode 
003148   ffff     dw	0xffff  ;unknown opcode 
00314a   ffff     dw	0xffff  ;unknown opcode 
00314c   ffff     dw	0xffff  ;unknown opcode 
00314e   ffff     dw	0xffff  ;unknown opcode 
003150   ffff     dw	0xffff  ;unknown opcode 
003152   ffff     dw	0xffff  ;unknown opcode 
003154   ffff     dw	0xffff  ;unknown opcode 
003156   ffff     dw	0xffff  ;unknown opcode 
003158   ffff     dw	0xffff  ;unknown opcode 
00315a   ffff     dw	0xffff  ;unknown opcode 
00315c   ffff     dw	0xffff  ;unknown opcode 
00315e   ffff     dw	0xffff  ;unknown opcode 
003160   ffff     dw	0xffff  ;unknown opcode 
003162   ffff     dw	0xffff  ;unknown opcode 
003164   ffff     dw	0xffff  ;unknown opcode 
003166   ffff     dw	0xffff  ;unknown opcode 
003168   ffff     dw	0xffff  ;unknown opcode 
00316a   ffff     dw	0xffff  ;unknown opcode 
00316c   ffff     dw	0xffff  ;unknown opcode 
00316e   ffff     dw	0xffff  ;unknown opcode 
003170   ffff     dw	0xffff  ;unknown opcode 
003172   ffff     dw	0xffff  ;unknown opcode 
003174   ffff     dw	0xffff  ;unknown opcode 
003176   ffff     dw	0xffff  ;unknown opcode 
003178   ffff     dw	0xffff  ;unknown opcode 
00317a   ffff     dw	0xffff  ;unknown opcode 
00317c   ffff     dw	0xffff  ;unknown opcode 
00317e   ffff     dw	0xffff  ;unknown opcode 
003180   ffff     dw	0xffff  ;unknown opcode 
003182   ffff     dw	0xffff  ;unknown opcode 
003184   ffff     dw	0xffff  ;unknown opcode 
003186   ffff     dw	0xffff  ;unknown opcode 
003188   ffff     dw	0xffff  ;unknown opcode 
00318a   ffff     dw	0xffff  ;unknown opcode 
00318c   ffff     dw	0xffff  ;unknown opcode 
00318e   ffff     dw	0xffff  ;unknown opcode 
003190   ffff     dw	0xffff  ;unknown opcode 
003192   ffff     dw	0xffff  ;unknown opcode 
003194   ffff     dw	0xffff  ;unknown opcode 
003196   ffff     dw	0xffff  ;unknown opcode 
003198   ffff     dw	0xffff  ;unknown opcode 
00319a   ffff     dw	0xffff  ;unknown opcode 
00319c   ffff     dw	0xffff  ;unknown opcode 
00319e   ffff     dw	0xffff  ;unknown opcode 
0031a0   ffff     dw	0xffff  ;unknown opcode 
0031a2   ffff     dw	0xffff  ;unknown opcode 
0031a4   ffff     dw	0xffff  ;unknown opcode 
0031a6   ffff     dw	0xffff  ;unknown opcode 
0031a8   ffff     dw	0xffff  ;unknown opcode 
0031aa   ffff     dw	0xffff  ;unknown opcode 
0031ac   ffff     dw	0xffff  ;unknown opcode 
0031ae   ffff     dw	0xffff  ;unknown opcode 
0031b0   ffff     dw	0xffff  ;unknown opcode 
0031b2   ffff     dw	0xffff  ;unknown opcode 
0031b4   ffff     dw	0xffff  ;unknown opcode 
0031b6   ffff     dw	0xffff  ;unknown opcode 
0031b8   ffff     dw	0xffff  ;unknown opcode 
0031ba   ffff     dw	0xffff  ;unknown opcode 
0031bc   ffff     dw	0xffff  ;unknown opcode 
0031be   ffff     dw	0xffff  ;unknown opcode 
0031c0   ffff     dw	0xffff  ;unknown opcode 
0031c2   ffff     dw	0xffff  ;unknown opcode 
0031c4   ffff     dw	0xffff  ;unknown opcode 
0031c6   ffff     dw	0xffff  ;unknown opcode 
0031c8   ffff     dw	0xffff  ;unknown opcode 
0031ca   ffff     dw	0xffff  ;unknown opcode 
0031cc   ffff     dw	0xffff  ;unknown opcode 
0031ce   ffff     dw	0xffff  ;unknown opcode 
0031d0   ffff     dw	0xffff  ;unknown opcode 
0031d2   ffff     dw	0xffff  ;unknown opcode 
0031d4   ffff     dw	0xffff  ;unknown opcode 
0031d6   ffff     dw	0xffff  ;unknown opcode 
0031d8   ffff     dw	0xffff  ;unknown opcode 
0031da   ffff     dw	0xffff  ;unknown opcode 
0031dc   ffff     dw	0xffff  ;unknown opcode 
0031de   ffff     dw	0xffff  ;unknown opcode 
0031e0   ffff     dw	0xffff  ;unknown opcode 
0031e2   ffff     dw	0xffff  ;unknown opcode 
0031e4   ffff     dw	0xffff  ;unknown opcode 
0031e6   ffff     dw	0xffff  ;unknown opcode 
0031e8   ffff     dw	0xffff  ;unknown opcode 
0031ea   ffff     dw	0xffff  ;unknown opcode 
0031ec   ffff     dw	0xffff  ;unknown opcode 
0031ee   ffff     dw	0xffff  ;unknown opcode 
0031f0   ffff     dw	0xffff  ;unknown opcode 
0031f2   ffff     dw	0xffff  ;unknown opcode 
0031f4   ffff     dw	0xffff  ;unknown opcode 
0031f6   ffff     dw	0xffff  ;unknown opcode 
0031f8   ffff     dw	0xffff  ;unknown opcode 
0031fa   ffff     dw	0xffff  ;unknown opcode 
0031fc   ffff     dw	0xffff  ;unknown opcode 
0031fe   ffff     dw	0xffff  ;unknown opcode 
003200   ffff     dw	0xffff  ;unknown opcode 
003202   ffff     dw	0xffff  ;unknown opcode 
003204   ffff     dw	0xffff  ;unknown opcode 
003206   ffff     dw	0xffff  ;unknown opcode 
003208   ffff     dw	0xffff  ;unknown opcode 
00320a   ffff     dw	0xffff  ;unknown opcode 
00320c   ffff     dw	0xffff  ;unknown opcode 
00320e   ffff     dw	0xffff  ;unknown opcode 
003210   ffff     dw	0xffff  ;unknown opcode 
003212   ffff     dw	0xffff  ;unknown opcode 
003214   ffff     dw	0xffff  ;unknown opcode 
003216   ffff     dw	0xffff  ;unknown opcode 
003218   ffff     dw	0xffff  ;unknown opcode 
00321a   ffff     dw	0xffff  ;unknown opcode 
00321c   ffff     dw	0xffff  ;unknown opcode 
00321e   ffff     dw	0xffff  ;unknown opcode 
003220   ffff     dw	0xffff  ;unknown opcode 
003222   ffff     dw	0xffff  ;unknown opcode 
003224   ffff     dw	0xffff  ;unknown opcode 
003226   ffff     dw	0xffff  ;unknown opcode 
003228   ffff     dw	0xffff  ;unknown opcode 
00322a   ffff     dw	0xffff  ;unknown opcode 
00322c   ffff     dw	0xffff  ;unknown opcode 
00322e   ffff     dw	0xffff  ;unknown opcode 
003230   ffff     dw	0xffff  ;unknown opcode 
003232   ffff     dw	0xffff  ;unknown opcode 
003234   ffff     dw	0xffff  ;unknown opcode 
003236   ffff     dw	0xffff  ;unknown opcode 
003238   ffff     dw	0xffff  ;unknown opcode 
00323a   ffff     dw	0xffff  ;unknown opcode 
00323c   ffff     dw	0xffff  ;unknown opcode 
00323e   ffff     dw	0xffff  ;unknown opcode 
003240   ffff     dw	0xffff  ;unknown opcode 
003242   ffff     dw	0xffff  ;unknown opcode 
003244   ffff     dw	0xffff  ;unknown opcode 
003246   ffff     dw	0xffff  ;unknown opcode 
003248   ffff     dw	0xffff  ;unknown opcode 
00324a   ffff     dw	0xffff  ;unknown opcode 
00324c   ffff     dw	0xffff  ;unknown opcode 
00324e   ffff     dw	0xffff  ;unknown opcode 
003250   ffff     dw	0xffff  ;unknown opcode 
003252   ffff     dw	0xffff  ;unknown opcode 
003254   ffff     dw	0xffff  ;unknown opcode 
003256   ffff     dw	0xffff  ;unknown opcode 
003258   ffff     dw	0xffff  ;unknown opcode 
00325a   ffff     dw	0xffff  ;unknown opcode 
00325c   ffff     dw	0xffff  ;unknown opcode 
00325e   ffff     dw	0xffff  ;unknown opcode 
003260   ffff     dw	0xffff  ;unknown opcode 
003262   ffff     dw	0xffff  ;unknown opcode 
003264   ffff     dw	0xffff  ;unknown opcode 
003266   ffff     dw	0xffff  ;unknown opcode 
003268   ffff     dw	0xffff  ;unknown opcode 
00326a   ffff     dw	0xffff  ;unknown opcode 
00326c   ffff     dw	0xffff  ;unknown opcode 
00326e   ffff     dw	0xffff  ;unknown opcode 
003270   ffff     dw	0xffff  ;unknown opcode 
003272   ffff     dw	0xffff  ;unknown opcode 
003274   ffff     dw	0xffff  ;unknown opcode 
003276   ffff     dw	0xffff  ;unknown opcode 
003278   ffff     dw	0xffff  ;unknown opcode 
00327a   ffff     dw	0xffff  ;unknown opcode 
00327c   ffff     dw	0xffff  ;unknown opcode 
00327e   ffff     dw	0xffff  ;unknown opcode 
                                           	ENDM
                                           
                                           
                                           _MIOS_MPROC_EVENT_TABLE
                                           MIOS_MPROC_EVENT_TABLE
                                           	;; entry 0x00-0x0f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x10-0x1f	
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x20-0x2f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	
                                           	;; entry 0x30-0x3f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	
                                           	;; entry 0x40-0x4f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	
                                           	;; entry 0x50-0x5f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           		
                                           	;; entry 0x60-0x6f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x70-0x7f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x80-0x8f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x90-0x9f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xa0-0xaf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xb1-0xbf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xc0-0xcf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xd0-0xdf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xe0-0xef
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xf0-0xff
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           #endif
                                           
                                           ;; ---[ configuration table for rotary encoders ]---
                                           #ifndef DONT_INCLUDE_MIOS_ENC_TABLE
                                           ;; dummy table located in $MIOS_PATH/include/asm
                                           ;; If the application should use ENC entries,
                                           ;; just add "-DDONT_INCLUDE_MIOS_ENC_TABLE" to MIOS_WRAPPER_DEFINES
                                           ;; and build the table within the C program with:
                                           ;; 
                                           ;; MIOS_ENC_TABLE {
                                           ;;              // sr pin mode
                                           ;;   MIOS_ENC_ENTRY(1, 0, MIOS_ENC_MODE_DETENTED), // VPot #1
                                           ;;   MIOS_ENC_ENTRY(1, 2, MIOS_ENC_MODE_DETENTED), // VPot #2
                                           ;;   MIOS_ENC_ENTRY(1, 4, MIOS_ENC_MODE_DETENTED), // VPot #3
                                           ;;   MIOS_ENC_EOT
                                           ;; };
                                           ;; 
                                           ;; The MIOS_MT_* macros are defined in $MIOS_PATH/include/c/cmios.h
                                           #include <mios_enc_table.inc>
                                           ; $Id: mios_enc_table.inc 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; "Dummy" Configuration Table for Rotary Encoders
                                           ; 
                                           ; Should be included by the application, if no rotary encoders are connected
                                           ; in order to pre-initialize the table area with EOT's
                                           ; 
                                           ; ==========================================================================
                                           
                                           	org	0x3280		; never change the origin!
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; In this table DIN pins have to be assigned to rotary encoders for the
                                           ;; MIOS_ENC driver 
                                           ;; 
                                           ;; up to 64 entries are provided
                                           ;; 
                                           ;; The table must be terminated with an ENC_EOT entry. Unused entries should
                                           ;; be filled with ENC_EOT
                                           ;; 
                                           ;; ENC_ENTRY provides following parameters
                                           ;;    o first parameter: number of shift register - 1, 2, 3, ... 16
                                           ;;    o second parameter: number of pin; since two pins are necessary
                                           ;;      for each encoder, an even number is expected: 0, 2, 4 or 6
                                           ;;    o the third parameter contains the encoder mode:
                                           ;;      either MIOS_ENC_MODE_NON_DETENTED
                                           ;;          or MIOS_ENC_MODE_DETENTED
                                           ;;          or MIOS_ENC_MODE_DETENTED2
                                           ;;          or MIOS_ENC_MODE_DETENTED3
                                           ;;
                                           ;; Configuration Examples:
                                           ;;    ENC_ENTRY  1,  0,  MIOS_ENC_MODE_NON_DETENTED    ; non-detented encoder at pin 0 and 1 of SR 1
                                           ;;    ENC_ENTRY  1,  2,  MIOS_ENC_MODE_DETENTED        ; detented encoder at pin 2 and 3 of SR 1
                                           ;;    ENC_ENTRY  9,  6,  MIOS_ENC_MODE_NON_DETENTED    ; non-detented encoder at pin 6 and 7 of SR 9
                                           ;; --------------------------------------------------------------------------
                                           
                                           	;; encoder entry structure
                                           ENC_ENTRY MACRO sr, din_0, mode
                                           	dw	(mode << 8) | (din_0 + 8*(sr-1))
                                           	ENDM	
                                           ENC_EOT	MACRO
003280   ffff     dw	0xffff  ;unknown opcode 	dw	0xffff
003282   ffff     dw	0xffff  ;unknown opcode 
003284   ffff     dw	0xffff  ;unknown opcode 
003286   ffff     dw	0xffff  ;unknown opcode 
003288   ffff     dw	0xffff  ;unknown opcode 
00328a   ffff     dw	0xffff  ;unknown opcode 
00328c   ffff     dw	0xffff  ;unknown opcode 
00328e   ffff     dw	0xffff  ;unknown opcode 
003290   ffff     dw	0xffff  ;unknown opcode 
003292   ffff     dw	0xffff  ;unknown opcode 
003294   ffff     dw	0xffff  ;unknown opcode 
003296   ffff     dw	0xffff  ;unknown opcode 
003298   ffff     dw	0xffff  ;unknown opcode 
00329a   ffff     dw	0xffff  ;unknown opcode 
00329c   ffff     dw	0xffff  ;unknown opcode 
00329e   ffff     dw	0xffff  ;unknown opcode 
0032a0   ffff     dw	0xffff  ;unknown opcode 
0032a2   ffff     dw	0xffff  ;unknown opcode 
0032a4   ffff     dw	0xffff  ;unknown opcode 
0032a6   ffff     dw	0xffff  ;unknown opcode 
0032a8   ffff     dw	0xffff  ;unknown opcode 
0032aa   ffff     dw	0xffff  ;unknown opcode 
0032ac   ffff     dw	0xffff  ;unknown opcode 
0032ae   ffff     dw	0xffff  ;unknown opcode 
0032b0   ffff     dw	0xffff  ;unknown opcode 
0032b2   ffff     dw	0xffff  ;unknown opcode 
0032b4   ffff     dw	0xffff  ;unknown opcode 
0032b6   ffff     dw	0xffff  ;unknown opcode 
0032b8   ffff     dw	0xffff  ;unknown opcode 
0032ba   ffff     dw	0xffff  ;unknown opcode 
0032bc   ffff     dw	0xffff  ;unknown opcode 
0032be   ffff     dw	0xffff  ;unknown opcode 
0032c0   ffff     dw	0xffff  ;unknown opcode 
0032c2   ffff     dw	0xffff  ;unknown opcode 
0032c4   ffff     dw	0xffff  ;unknown opcode 
0032c6   ffff     dw	0xffff  ;unknown opcode 
0032c8   ffff     dw	0xffff  ;unknown opcode 
0032ca   ffff     dw	0xffff  ;unknown opcode 
0032cc   ffff     dw	0xffff  ;unknown opcode 
0032ce   ffff     dw	0xffff  ;unknown opcode 
0032d0   ffff     dw	0xffff  ;unknown opcode 
0032d2   ffff     dw	0xffff  ;unknown opcode 
0032d4   ffff     dw	0xffff  ;unknown opcode 
0032d6   ffff     dw	0xffff  ;unknown opcode 
0032d8   ffff     dw	0xffff  ;unknown opcode 
0032da   ffff     dw	0xffff  ;unknown opcode 
0032dc   ffff     dw	0xffff  ;unknown opcode 
0032de   ffff     dw	0xffff  ;unknown opcode 
0032e0   ffff     dw	0xffff  ;unknown opcode 
0032e2   ffff     dw	0xffff  ;unknown opcode 
0032e4   ffff     dw	0xffff  ;unknown opcode 
0032e6   ffff     dw	0xffff  ;unknown opcode 
0032e8   ffff     dw	0xffff  ;unknown opcode 
0032ea   ffff     dw	0xffff  ;unknown opcode 
0032ec   ffff     dw	0xffff  ;unknown opcode 
0032ee   ffff     dw	0xffff  ;unknown opcode 
0032f0   ffff     dw	0xffff  ;unknown opcode 
0032f2   ffff     dw	0xffff  ;unknown opcode 
0032f4   ffff     dw	0xffff  ;unknown opcode 
0032f6   ffff     dw	0xffff  ;unknown opcode 
0032f8   ffff     dw	0xffff  ;unknown opcode 
0032fa   ffff     dw	0xffff  ;unknown opcode 
0032fc   ffff     dw	0xffff  ;unknown opcode 
0032fe   ffff     dw	0xffff  ;unknown opcode 
                                           	ENDM
                                           
                                           _MIOS_ENC_PIN_TABLE
                                           MIOS_ENC_PIN_TABLE
                                           	;; encoders 1-16
                                           	;;        SR  Pin  Mode
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           	;; encoders 17-32
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           	;; encoders 33-48
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           	;; encoders 49-64
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           #endif
                                           
                                           	org	0x3300		; never change the origin!
                                           
                                           ; Don't enable this --- its only used by a special testcase which checks 
                                           ; parameter passing on functions which are difficult to verify with
                                           ; directed tests
                                           #ifndef PARAMETER_PASSING_TEST
                                           #define PARAMETER_PASSING_TEST 0
                                           #endif
                                           
                                           ;; ==========================================================================
                                           ;;  Export MIOS variables
                                           ;; ==========================================================================
                                           	global	_MIOS_BOX_CFG0
                                           	global	_MIOS_BOX_CFG1
                                           	global	_MIOS_BOX_STAT
                                           	global	_MIOS_PARAMETER1
                                           	global	_MIOS_PARAMETER2
                                           	global	_MIOS_PARAMETER3
                                           
                                           MIOS_VARIABLES		udata	0x0000
                                           _MIOS_BOX_CFG0		res	1
                                           _MIOS_BOX_CFG1		res	1
                                           _MIOS_BOX_STAT		res	1
                                           _MIOS_PARAMETER1	res	1
                                           _MIOS_PARAMETER2	res	1
                                           _MIOS_PARAMETER3	res	1
                                           _TMP1			res	1
                                           _TMP2			res	1
                                           _TMP3			res	1
                                           _TMP4			res	1
                                           _TMP5			res	1
                                           _IRQ_TMP1		res	1
                                           _IRQ_TMP2		res	1
                                           _IRQ_TMP3		res	1
                                           _IRQ_TMP4		res	1
                                           _IRQ_TMP5		res	1
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  USER_LCD_* vectors defined externally in $MIOS_PATH/modules/app_lcd/*/*.asm
                                           ;; ==========================================================================
                                           	extern	USER_LCD_Init
                                           	extern	USER_LCD_Data
                                           	extern	USER_LCD_Cmd
                                           	extern	USER_LCD_Clear
                                           	extern	USER_LCD_CursorSet
                                           	extern	USER_LCD_PrintChar
                                           	extern	USER_LCD_SpecialCharInit
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  All MIOS hooks in one file
                                           ;; ==========================================================================
                                           
                                           MIOS_WRAPPER_CODE	code
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS after startup to initialize the 
                                           ;;  application
                                           ;; --------------------------------------------------------------------------
                                           USER_Init
                                           	extern	_Init
                                           
00512c   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
00512e   f07f
005130   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
005132   f07f
005134   efca     goto	0x5994              	goto	_Init	
005136   f02c
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS in the mainloop when nothing else is to do
                                           ;; --------------------------------------------------------------------------
                                           USER_Tick
                                           	extern	_Tick
                                           
005138   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
00513a   f07f
00513c   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
00513e   f07f
005140   ef81     goto	0x5d02              	goto	_Tick
005142   f02e
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is periodically called by MIOS. The frequency has to be
                                           ;;  initialized with MIOS_Timer_Set
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
                                           ;; --------------------------------------------------------------------------
                                           USER_Timer
                                           	extern	_Timer
                                           
005144   ee23     lfsr	0x2, 0x33f          	lfsr	FSR2, STACK_IRQ_HEAD	; initialize IRQ stack
005146   f03f
005148   cfe9     movff	0xfe9, 0xfdd       	movff	FSR0L, POSTDEC2		; save FSR0[LH] on IRQ stack
00514a   ffdd
00514c   cfea     movff	0xfea, 0xfdd       	movff	FSR0H, POSTDEC2
00514e   ffdd
005150   ee03     lfsr	0, 0x33d            	lfsr	FSR0, STACK_IRQ_HEAD-2	; write stack pointer also to FSR0
005152   f03d
005154   ec80     call	0x5d00, 0           	call	_Timer			; call C hook
005156   f02e
005158   c33f     movff	0x33f, 0xfe9       	movff	STACK_IRQ_HEAD-0, FSR0L	; restore FSR0[LH] directly from memory (more fail save)
00515a   ffe9
00515c   c33e     movff	0x33e, 0xfea       	movff	STACK_IRQ_HEAD-1, FSR0H	; restore FSR0[LH] directly from memory (more fail save)
00515e   ffea
005160   0012     return	0                 	return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a debug command has been received
                                           ;;  via SysEx
                                           ;;  Input:
                                           ;;     o WREG, MIOS_PARAMETER1, MIOS_PARAMETER2, MIOS_PARAMETER3 like
                                           ;;       specified in the debug command
                                           ;;  Output:
                                           ;;     o return values WREG, MIOS_PARAMETER1, MIOS_PARAMETER2, MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_DebugTrigger
                                           	;; not really required for C programs
005162   0012     return	0                 	return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the display content should be 
                                           ;;  initialized. Thats the case during startup and after a temporary message
                                           ;;  has been printed on the screen
                                           ;; --------------------------------------------------------------------------
                                           USER_DISPLAY_Init
                                           	extern	_DISPLAY_Init
                                           
005164   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
005166   f07f
005168   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
00516a   f07f
00516c   ef42     goto	0x5a84              	goto	_DISPLAY_Init
00516e   f02d
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called in the mainloop when no temporary message is shown
                                           ;;  on screen. Print the realtime messages here
                                           ;; --------------------------------------------------------------------------
                                           USER_DISPLAY_Tick
                                           	extern	_DISPLAY_Tick
                                           
005170   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
005172   f07f
005174   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
005176   f07f
005178   eff7     goto	0x57ee              	goto	_DISPLAY_Tick
00517a   f02b
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a complete MIDI event has been received
                                           ;;  Input:
                                           ;;     o first  MIDI event byte in MIOS_PARAMETER1
                                           ;;     o second MIDI event byte in MIOS_PARAMETER2
                                           ;;     o third  MIDI event byte in MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyReceivedEvent
                                           	extern	_MPROC_NotifyReceivedEvnt
                                           
00517c   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
00517e   f07f
005180   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
005182   f07f
                                           
005184   c005     movff	0x5, 0xfed         	movff	MIOS_PARAMETER3, POSTDEC0
005186   ffed
005188   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
00518a   ffed
00518c   5003     movf	0x3, 0, 0           	movf	MIOS_PARAMETER1, W
00518e   ef48     goto	0x4690              	goto	_MPROC_NotifyReceivedEvnt
005190   f023
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI event has been received
                                           ;;  which has been specified in the CONFIG_MIDI_IN table
                                           ;;  Input:
                                           ;;     o number of entry in WREG
                                           ;;     o first  MIDI event byte in MIOS_PARAMETER1
                                           ;;     o second MIDI event byte in MIOS_PARAMETER2
                                           ;;     o third  MIDI event byte in MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyFoundEvent
                                           	extern	_MPROC_NotifyFoundEvent
                                           
005192   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
005194   f07f
005196   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
005198   f07f
                                           
00519a   c005     movff	0x5, 0xfed         	movff	MIOS_PARAMETER3, POSTDEC0
00519c   ffed
00519e   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
0051a0   ffed
0051a2   c003     movff	0x3, 0xfed         	movff	MIOS_PARAMETER1, POSTDEC0
0051a4   ffed
0051a6   6eed     movwf	0xed, 0            	movwf	POSTDEC0		; TK: required for SDCC 2.5.0, don't know why...
                                           	;; entry number still in wreg
0051a8   ef2a     goto	0x5c54              	goto	_MPROC_NotifyFoundEvent
0051aa   f02e
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI event has not been completly
                                           ;;  received within 2 seconds
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyTimeout
                                           	extern	_MPROC_NotifyTimeout
                                           
0051ac   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
0051ae   f07f
0051b0   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
0051b2   f07f
0051b4   ef7f     goto	0x5cfe              	goto	_MPROC_NotifyTimeout
0051b6   f02e
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI byte has been received
                                           ;;  Input:
                                           ;;     o received MIDI byte in WREG and MIOS_PARAMETER1
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyReceivedByte
                                           	extern	_MPROC_NotifyReceivedByte
                                           
0051b8   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
0051ba   f07f
0051bc   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
0051be   f07f
                                           
                                           	;; MIDI byte still in WREG
0051c0   efbe     goto	0x497c              	goto	_MPROC_NotifyReceivedByte
0051c2   f024
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS before the transfer of a MIDI byte. 
                                           ;;  It can be used to monitor the Tx activity or to do any other actions
                                           ;;  (e.g. to switch a pin for multiplexed MIDI Outs) before the byte will 
                                           ;;  be sent.
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
                                           ;;  Input:
                                           ;;     o transmitted byte in WREG
                                           ;; --------------------------------------------------------------------------
                                           USER_MIDI_NotifyTx
                                           	;; too time consuming for C programs --- should be handled so fast as
                                           	;; possible and therefore serviced in assembler
                                           
                                           	;; disabled by default
                                           	;; enable it if external function is available
                                           #ifdef ENABLE_MIDI_NOTIFY_TX
                                           	extern	_MIDI_NotifyTx
                                           	goto	_MIDI_NotifyTx
                                           #else
0051c4   0012     return	0                 	return
                                           #endif
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI byte has been received.
                                           ;;  It can be used to monitor the Rx activity or to do any action - e.g.
                                           ;;  to react on realtime events like MIDI clock (0xf8) with a minimum latency
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
                                           ;;  Input:
                                           ;;     o received byte in WREG
                                           ;; --------------------------------------------------------------------------
                                           USER_MIDI_NotifyRx
                                           	;; too time consuming for C programs --- should be handled so fast as
                                           	;; possible and therefore serviced in assembler
                                           
                                           	;; disabled by default
                                           	;; enable it if external function is available
                                           #ifdef ENABLE_MIDI_NOTIFY_RX
                                           	extern	_MIDI_NotifyRx
                                           	goto	_MIDI_NotifyRx
                                           #else
0051c6   0012     return	0                 	return
                                           #endif
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when an button has been toggled
                                           ;;  Input:
                                           ;;     o Button number in WREG and MIOS_PARAMETER1
                                           ;;     o Button value MIOS_PARAMETER2:
                                           ;;       - 1 if button has been released (=5V)
                                           ;;       - 0 if button has been pressed (=0V)
                                           ;; --------------------------------------------------------------------------
                                           USER_DIN_NotifyToggle
                                           	extern	_DIN_NotifyToggle
                                           
0051c8   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
0051ca   f07f
0051cc   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
0051ce   f07f
                                           
0051d0   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
0051d2   ffed
                                           	;; button number still in WREG
0051d4   ef1c     goto	0x5238              	goto	_DIN_NotifyToggle
0051d6   f029
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when an encoder has been moved
                                           ;;  Input:
                                           ;;     o Encoder number in WREG and MIOS_PARAMETER1
                                           ;;     o signed incrementer value in MIOS_PARAMETER2:
                                           ;;       - is positive when encoder has been turned clockwise
                                           ;;       - is negative when encoder has been turned counter clockwise
                                           ;; --------------------------------------------------------------------------
                                           USER_ENC_NotifyChange
                                           	extern	_ENC_NotifyChange
                                           
0051d8   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
0051da   f07f
0051dc   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
0051de   f07f
                                           
0051e0   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
0051e2   ffed
                                           	;; encoder number still in WREG
0051e4   ef23     goto	0x5c46              	goto	_ENC_NotifyChange
0051e6   f02e
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS before the shift register are loaded
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible
                                           ;; --------------------------------------------------------------------------
                                           USER_SR_Service_Prepare
                                           	extern	_SR_Service_Prepare
                                           
0051e8   ee23     lfsr	0x2, 0x33f          	lfsr	FSR2, STACK_IRQ_HEAD	; initialize IRQ stack
0051ea   f03f
0051ec   cfe9     movff	0xfe9, 0xfdd       	movff	FSR0L, POSTDEC2		; save FSR0[LH] on IRQ stack
0051ee   ffdd
0051f0   cfea     movff	0xfea, 0xfdd       	movff	FSR0H, POSTDEC2
0051f2   ffdd
0051f4   ee03     lfsr	0, 0x33d            	lfsr	FSR0, STACK_IRQ_HEAD-2	; write stack pointer also to FSR0
0051f6   f03d
0051f8   ec1a     call	0x5434, 0           	call	_SR_Service_Prepare	; call C hook
0051fa   f02a
0051fc   c33f     movff	0x33f, 0xfe9       	movff	STACK_IRQ_HEAD-0, FSR0L	; restore FSR0[LH] directly from memory (more fail save)
0051fe   ffe9
005200   c33e     movff	0x33e, 0xfea       	movff	STACK_IRQ_HEAD-1, FSR0H	; restore FSR0[LH] directly from memory (more fail save)
005202   ffea
005204   0012     return	0                 	return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS after the shift register have been loaded
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible
                                           ;; --------------------------------------------------------------------------
                                           USER_SR_Service_Finish
                                           	extern	_SR_Service_Finish
                                           
005206   ee23     lfsr	0x2, 0x33f          	lfsr	FSR2, STACK_IRQ_HEAD	; initialize IRQ stack
005208   f03f
00520a   cfe9     movff	0xfe9, 0xfdd       	movff	FSR0L, POSTDEC2		; save FSR0[LH] on IRQ stack
00520c   ffdd
00520e   cfea     movff	0xfea, 0xfdd       	movff	FSR0H, POSTDEC2
005210   ffdd
005212   ee03     lfsr	0, 0x33d            	lfsr	FSR0, STACK_IRQ_HEAD-2	; write stack pointer also to FSR0
005214   f03d
005216   ec7e     call	0x5cfc, 0           	call	_SR_Service_Finish	; call C hook
005218   f02e
00521a   c33f     movff	0x33f, 0xfe9       	movff	STACK_IRQ_HEAD-0, FSR0L	; restore FSR0[LH] directly from memory (more fail save)
00521c   ffe9
00521e   c33e     movff	0x33e, 0xfea       	movff	STACK_IRQ_HEAD-1, FSR0H	; restore FSR0[LH] directly from memory (more fail save)
005220   ffea
005222   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a pot has been moved
                                           ;;  Input:
                                           ;;     o Pot number in WREG and MIOS_PARAMETER1
                                           ;;     o LSB value in MIOS_PARAMETER2
                                           ;;     o MSB value in MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_AIN_NotifyChange
                                           	extern	_AIN_NotifyChange
                                           
005224   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
005226   f07f
005228   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
00522a   f07f
                                           
00522c   c005     movff	0x5, 0xfed         	movff	MIOS_PARAMETER3, POSTDEC0
00522e   ffed
005230   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
005232   ffed
                                           	;; pot number still in WREG
005234   eff0     goto	0x55e0              	goto	_AIN_NotifyChange
005236   f02a
                                           
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; ==========================================================================
                                           ;;  LINKS TO THE MIOS FUNCTIONS
                                           ;; ==========================================================================
                                           ;; --------------------------------------------------------------------------
                                           
                                           .MIOS_MIDI_BeginStream code MIOS_MIDI_BeginStream
                                           _MIOS_MIDI_BeginStream
                                           	global	_MIOS_MIDI_BeginStream
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_DeviceIDAutoSet code MIOS_MIDI_DeviceIDAutoSet
                                           _MIOS_MIDI_DeviceIDAutoSet
                                           	global	_MIOS_MIDI_DeviceIDAutoSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_DeviceIDGet code MIOS_MIDI_DeviceIDGet
                                           _MIOS_MIDI_DeviceIDGet
                                           	global	_MIOS_MIDI_DeviceIDGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_DeviceIDSet code MIOS_MIDI_DeviceIDSet
                                           _MIOS_MIDI_DeviceIDSet
                                           	global	_MIOS_MIDI_DeviceIDSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_EndStream code MIOS_MIDI_EndStream
                                           _MIOS_MIDI_EndStream
                                           	global	_MIOS_MIDI_EndStream
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_Init code MIOS_MIDI_Init
                                           _MIOS_MIDI_Init
                                           	global	_MIOS_MIDI_Init
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_InterfaceAutoSet code MIOS_MIDI_InterfaceAutoSet
                                           _MIOS_MIDI_InterfaceAutoSet
                                           	global	_MIOS_MIDI_InterfaceAutoSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_InterfaceGet code MIOS_MIDI_InterfaceGet
                                           _MIOS_MIDI_InterfaceGet
                                           	global	_MIOS_MIDI_InterfaceGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_InterfaceSet code MIOS_MIDI_InterfaceSet
                                           _MIOS_MIDI_InterfaceSet
                                           	global	_MIOS_MIDI_InterfaceSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_MergerGet code MIOS_MIDI_MergerGet
                                           _MIOS_MIDI_MergerGet
                                           	global	_MIOS_MIDI_MergerGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_MergerSet code MIOS_MIDI_MergerSet
                                           _MIOS_MIDI_MergerSet
                                           	global	_MIOS_MIDI_MergerSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferFree code MIOS_MIDI_RxBufferFree
                                           _MIOS_MIDI_RxBufferFree
                                           	global	_MIOS_MIDI_RxBufferFree
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferGet code MIOS_MIDI_RxBufferGet
                                           _MIOS_MIDI_RxBufferGet
                                           	global	_MIOS_MIDI_RxBufferGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferPut code MIOS_MIDI_RxBufferPut
                                           _MIOS_MIDI_RxBufferPut
                                           	global	_MIOS_MIDI_RxBufferPut
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferUsed code MIOS_MIDI_RxBufferUsed
                                           _MIOS_MIDI_RxBufferUsed
                                           	global	_MIOS_MIDI_RxBufferUsed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferFlush code MIOS_MIDI_TxBufferFlush
                                           _MIOS_MIDI_TxBufferFlush
                                           	global	_MIOS_MIDI_TxBufferFlush
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferFree code MIOS_MIDI_TxBufferFree
                                           _MIOS_MIDI_TxBufferFree
                                           	global	_MIOS_MIDI_TxBufferFree
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferGet code MIOS_MIDI_TxBufferGet
                                           _MIOS_MIDI_TxBufferGet
                                           	global	_MIOS_MIDI_TxBufferGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferPut code MIOS_MIDI_TxBufferPut
                                           _MIOS_MIDI_TxBufferPut
                                           	global	_MIOS_MIDI_TxBufferPut
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferUsed code MIOS_MIDI_TxBufferUsed
                                           _MIOS_MIDI_TxBufferUsed
                                           	global	_MIOS_MIDI_TxBufferUsed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MPROC_MergerDisable code MIOS_MPROC_MergerDisable
                                           _MIOS_MPROC_MergerDisable
                                           	global	_MIOS_MPROC_MergerDisable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MPROC_MergerEnable code MIOS_MPROC_MergerEnable
                                           _MIOS_MPROC_MergerEnable
                                           	global	_MIOS_MPROC_MergerEnable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MPROC_MergerGet code MIOS_MPROC_MergerGet
                                           _MIOS_MPROC_MergerGet
                                           	global	_MIOS_MPROC_MergerGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DeadbandGet code MIOS_AIN_DeadbandGet
                                           _MIOS_AIN_DeadbandGet
                                           	global	_MIOS_AIN_DeadbandGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DeadbandSet code MIOS_AIN_DeadbandSet
                                           _MIOS_AIN_DeadbandSet
                                           	global	_MIOS_AIN_DeadbandSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_Muxed code MIOS_AIN_Muxed
                                           _MIOS_AIN_Muxed
                                           	global	_MIOS_AIN_Muxed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_NumberGet code MIOS_AIN_NumberGet
                                           _MIOS_AIN_NumberGet
                                           	global	_MIOS_AIN_NumberGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_NumberSet code MIOS_AIN_NumberSet
                                           _MIOS_AIN_NumberSet
                                           	global	_MIOS_AIN_NumberSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_Pin7bitGet code MIOS_AIN_Pin7bitGet
                                           _MIOS_AIN_Pin7bitGet
                                           	global	_MIOS_AIN_Pin7bitGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_PinGet code
                                           _MIOS_AIN_PinGet
                                           	global	_MIOS_AIN_PinGet
                                           
005ce8   ec3a     call	0x2c74, 0           	call	MIOS_AIN_PinGet
005cea   f016
005cec   c004     movff	0x4, 0xff3         	movff	MIOS_PARAMETER2, PRODL	; high byte -> PRODL
005cee   fff3
005cf0   0012     return	0                 	return				; low byte already in WREG
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_PinLSBGet code MIOS_AIN_PinLSBGet
                                           _MIOS_AIN_PinLSBGet
                                           	global	_MIOS_AIN_PinLSBGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_PinMSBGet code MIOS_AIN_PinMSBGet
                                           _MIOS_AIN_PinMSBGet
                                           	global	_MIOS_AIN_PinMSBGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_UnMuxed code MIOS_AIN_UnMuxed
                                           _MIOS_AIN_UnMuxed
                                           	global	_MIOS_AIN_UnMuxed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleDownGet code MIOS_MF_PWM_DutyCycleDownGet
                                           _MIOS_MF_PWM_DutyCycleDownGet
                                           	global	_MIOS_MF_PWM_DutyCycleDownGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleDownSet code MIOS_MF_PWM_DutyCycleDownSet
                                           _MIOS_MF_PWM_DutyCycleDownSet
                                           	global	_MIOS_MF_PWM_DutyCycleDownSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleUpGet code MIOS_MF_PWM_DutyCycleUpGet
                                           _MIOS_MF_PWM_DutyCycleUpGet
                                           	global	_MIOS_MF_PWM_DutyCycleUpGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleUpSet code MIOS_MF_PWM_DutyCycleUpSet
                                           _MIOS_MF_PWM_DutyCycleUpSet
                                           	global	_MIOS_MF_PWM_DutyCycleUpSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_DeadbandGet code MIOS_MF_DeadbandGet
                                           _MIOS_MF_DeadbandGet
                                           	global	_MIOS_MF_DeadbandGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_DeadbandSet code MIOS_MF_DeadbandSet
                                           _MIOS_MF_DeadbandSet
                                           	global	_MIOS_MF_DeadbandSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_Disable code MIOS_MF_Disable
                                           _MIOS_MF_Disable
                                           	global	_MIOS_MF_Disable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_Enable code MIOS_MF_Enable
                                           _MIOS_MF_Enable
                                           	global	_MIOS_MF_Enable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_FaderMove code
                                           _MIOS_MF_FaderMove
                                           	global	_MIOS_MF_FaderMove
                                           
005bca   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005bcc   ffd9
005bce   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
005bd0   f003
005bd2   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
005bd4   f004
005bd6   ef52     goto	0x2ca4              	goto	MIOS_MF_FaderMove
005bd8   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_SuspendDisable code MIOS_MF_SuspendDisable
                                           _MIOS_MF_SuspendDisable
                                           	global	_MIOS_MF_SuspendDisable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_SuspendEnable code MIOS_MF_SuspendEnable
                                           _MIOS_MF_SuspendEnable
                                           	global	_MIOS_MF_SuspendEnable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_SuspendGet code MIOS_MF_SuspendGet
                                           _MIOS_MF_SuspendGet
                                           	global	_MIOS_MF_SuspendGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_PeriodGet code MIOS_MF_PWM_PeriodGet
                                           _MIOS_MF_PWM_PeriodGet
                                           	global	_MIOS_MF_PWM_PeriodGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_PeriodSet code MIOS_MF_PWM_PeriodSet
                                           _MIOS_MF_PWM_PeriodSet
                                           	global	_MIOS_MF_PWM_PeriodSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_TouchDetectionReset code MIOS_MF_TouchDetectionReset
                                           _MIOS_MF_TouchDetectionReset
                                           	global	_MIOS_MF_TouchDetectionReset
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinGet code MIOS_DIN_PinGet
                                           _MIOS_DIN_PinGet
                                           	global	_MIOS_DIN_PinGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_SRGet code MIOS_DIN_SRGet
                                           _MIOS_DIN_SRGet
                                           	global	_MIOS_DIN_SRGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinGet code MIOS_DOUT_PinGet
                                           _MIOS_DOUT_PinGet
                                           	global	_MIOS_DOUT_PinGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinSet code
                                           _MIOS_DOUT_PinSet
                                           	global	_MIOS_DOUT_PinSet
                                           
005c70   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005c72   ffd9
005c74   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
005c76   f003
005c78   ef60     goto	0x2cc0              	goto	MIOS_DOUT_PinSet
005c7a   f016
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinSet0 code MIOS_DOUT_PinSet0
                                           _MIOS_DOUT_PinSet0
                                           	global	_MIOS_DOUT_PinSet0
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinSet1 code MIOS_DOUT_PinSet1
                                           _MIOS_DOUT_PinSet1
                                           	global	_MIOS_DOUT_PinSet1
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_SRGet code MIOS_DOUT_SRGet
                                           _MIOS_DOUT_SRGet
                                           	global	_MIOS_DOUT_SRGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_SRSet code
                                           _MIOS_DOUT_SRSet
                                           	global	_MIOS_DOUT_SRSet
                                           	
005c7c   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005c7e   ffd9
005c80   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
005c82   f003
005c84   ef68     goto	0x2cd0              	goto	MIOS_DOUT_SRSet
005c86   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_Abs7bitAdd code
                                           _MIOS_ENC_Abs7bitAdd
                                           	global	_MIOS_ENC_Abs7bitAdd
                                           	
005c88   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005c8a   ffd9
005c8c   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
005c8e   f003
005c90   ef6a     goto	0x2cd4              	goto	MIOS_ENC_Abs7bitAdd
005c92   f016
                                           	
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_Abs7bitGet code MIOS_ENC_Abs7bitGet
                                           _MIOS_ENC_Abs7bitGet
                                           	global	_MIOS_ENC_Abs7bitGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_Abs7bitSet code
                                           _MIOS_ENC_Abs7bitSet
                                           	global	_MIOS_ENC_Abs7bitSet
                                           
005c94   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005c96   ffd9
005c98   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
005c9a   f003
005c9c   ef6e     goto	0x2cdc              	goto	MIOS_ENC_Abs7bitSet
005c9e   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_NumberGet code MIOS_ENC_NumberGet
                                           _MIOS_ENC_NumberGet
                                           	global	_MIOS_ENC_NumberGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_SpeedGet code
                                           _MIOS_ENC_SpeedGet
                                           	global	_MIOS_ENC_SpeedGet
                                           
005ca0   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005ca2   ffd9
005ca4   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
005ca6   f003
005ca8   ef72     goto	0x2ce4              	goto	MIOS_ENC_SpeedGet
005caa   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_SpeedSet code
                                           _MIOS_ENC_SpeedSet
                                           	global	_MIOS_ENC_SpeedSet
                                           
005bda   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005bdc   ffd9
005bde   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
005be0   f003
005be2   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
005be4   f004
005be6   ef74     goto	0x2ce8              	goto	MIOS_ENC_SpeedSet
005be8   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_NumberGet code MIOS_SRIO_NumberGet
                                           _MIOS_SRIO_NumberGet
                                           	global	_MIOS_SRIO_NumberGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_NumberSet code MIOS_SRIO_NumberSet
                                           _MIOS_SRIO_NumberSet
                                           	global	_MIOS_SRIO_NumberSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_TS_SensitivityGet code MIOS_SRIO_TS_SensitivityGet
                                           _MIOS_SRIO_TS_SensitivityGet
                                           	global	_MIOS_SRIO_TS_SensitivityGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_TS_SensitivitySet code MIOS_SRIO_TS_SensitivitySet
                                           _MIOS_SRIO_TS_SensitivitySet
                                           	global	_MIOS_SRIO_TS_SensitivitySet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_UpdateFrqGet code MIOS_SRIO_UpdateFrqGet
                                           _MIOS_SRIO_UpdateFrqGet
                                           	global	_MIOS_SRIO_UpdateFrqGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_UpdateFrqSet code MIOS_SRIO_UpdateFrqSet
                                           _MIOS_SRIO_UpdateFrqSet
                                           	global	_MIOS_SRIO_UpdateFrqSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_DebounceGet code MIOS_SRIO_DebounceGet
                                           _MIOS_SRIO_DebounceGet
                                           	global	_MIOS_SRIO_DebounceGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_DebounceSet code MIOS_SRIO_DebounceSet
                                           _MIOS_SRIO_DebounceSet
                                           	global	_MIOS_SRIO_DebounceSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Clear code MIOS_LCD_Clear
                                           _MIOS_LCD_Clear
                                           	global	_MIOS_LCD_Clear
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Cmd code MIOS_LCD_Cmd
                                           _MIOS_LCD_Cmd
                                           	global	_MIOS_LCD_Cmd
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_CursorGet code MIOS_LCD_CursorGet
                                           _MIOS_LCD_CursorGet
                                           	global	_MIOS_LCD_CursorGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_CursorSet code MIOS_LCD_CursorSet
                                           _MIOS_LCD_CursorSet
                                           	global	_MIOS_LCD_CursorSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Data code MIOS_LCD_Data
                                           _MIOS_LCD_Data
                                           	global	_MIOS_LCD_Data
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Init code MIOS_LCD_Init
                                           _MIOS_LCD_Init
                                           	global	_MIOS_LCD_Init
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD1 code MIOS_LCD_PrintBCD1
                                           _MIOS_LCD_PrintBCD1
                                           	global	_MIOS_LCD_PrintBCD1
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD2 code MIOS_LCD_PrintBCD2
                                           _MIOS_LCD_PrintBCD2
                                           	global	_MIOS_LCD_PrintBCD2
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD3 code MIOS_LCD_PrintBCD3
                                           _MIOS_LCD_PrintBCD3
                                           	global	_MIOS_LCD_PrintBCD3
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD4 code
                                           _MIOS_LCD_PrintBCD4
                                           	global	_MIOS_LCD_PrintBCD4
                                           
005cac   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005cae   ffd9
005cb0   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
005cb2   f003
005cb4   eff6     goto	0x2dec              	goto	MIOS_LCD_PrintBCD4
005cb6   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD5 code
                                           _MIOS_LCD_PrintBCD5
                                           	global	_MIOS_LCD_PrintBCD5
                                           
005cb8   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005cba   ffd9
005cbc   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
005cbe   f003
005cc0   eff8     goto	0x2df0              	goto	MIOS_LCD_PrintBCD5
005cc2   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintChar code MIOS_LCD_PrintChar
                                           _MIOS_LCD_PrintChar
                                           	global	_MIOS_LCD_PrintChar
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintHex1 code MIOS_LCD_PrintHex1
                                           _MIOS_LCD_PrintHex1
                                           	global	_MIOS_LCD_PrintHex1
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintHex2 code MIOS_LCD_PrintHex2
                                           _MIOS_LCD_PrintHex2
                                           	global	_MIOS_LCD_PrintHex2
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintMessage code
                                           _MIOS_LCD_PrintMessage
                                           	global	_MIOS_LCD_PrintMessage
                                           
005b5e   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
005b60   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005b62   ffd9
005b64   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
005b66   fff7
005b68   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
005b6a   fff8
005b6c   ef9a     goto	0x2d34              	goto	MIOS_LCD_PrintMessage
005b6e   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintPreconfString code
                                           _MIOS_LCD_PrintPreconfString
                                           	global	_MIOS_LCD_PrintPreconfString
                                           
005b22   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005b24   ffd9
005b26   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
005b28   fff8
005b2a   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
005b2c   fff7
005b2e   cfdc     movff	0xfdc, 0xff6       	movff	PREINC2, TBLPTRL
005b30   fff6
005b32   ef9c     goto	0x2d38              	goto	MIOS_LCD_PrintPreconfString
005b34   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintString code
                                           _MIOS_LCD_PrintString
                                           	global	_MIOS_LCD_PrintString
                                           
005b70   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
005b72   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005b74   ffd9
005b76   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
005b78   fff7
005b7a   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
005b7c   fff8
005b7e   ef9e     goto	0x2d3c              	goto	MIOS_LCD_PrintString
005b80   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_TypeAutoSet code MIOS_LCD_TypeAutoSet
                                           _MIOS_LCD_TypeAutoSet
                                           	global	_MIOS_LCD_TypeAutoSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_TypeGet code MIOS_LCD_TypeGet
                                           _MIOS_LCD_TypeGet
                                           	global	_MIOS_LCD_TypeGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_TypeSet code
                                           _MIOS_LCD_TypeSet
                                           	global	_MIOS_LCD_TypeSet
                                           
005bea   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005bec   ffd9
005bee   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
005bf0   f003
005bf2   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
005bf4   f004
005bf6   efa4     goto	0x2d48              	goto	MIOS_LCD_TypeSet
005bf8   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_YAddressGet code
                                           _MIOS_LCD_YAddressGet
                                           	global	_MIOS_LCD_YAddressGet
005cf8   efa6     goto	0x2d4c              	goto	MIOS_LCD_YAddressGet
005cfa   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_YAddressSet code
                                           _MIOS_LCD_YAddressSet
                                           	global	_MIOS_LCD_YAddressSet
                                           
005b36   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005b38   ffd9
005b3a   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
005b3c   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
005b3e   f004
005b40   cfdc     movff	0xfdc, 0x5          	movff	PREINC2, MIOS_PARAMETER3
005b42   f005
005b44   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
005b46   efa8     goto	0x2d50              	goto	MIOS_LCD_YAddressSet
005b48   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_MessageStart code MIOS_LCD_MessageStart
                                           _MIOS_LCD_MessageStart
                                           	global	_MIOS_LCD_MessageStart
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_MessageStop code MIOS_LCD_MessageStop
                                           _MIOS_LCD_MessageStop
                                           	global	_MIOS_LCD_MessageStop
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_CLCD_SpecialCharInit code
                                           _MIOS_CLCD_SpecialCharInit
                                           	global	_MIOS_CLCD_SpecialCharInit
                                           
005b4a   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005b4c   ffd9
005b4e   cfdc     movff	0xfdc, 0xff6       	movff	PREINC2, TBLPTRL
005b50   fff6
005b52   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
005b54   fff7
005b56   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
005b58   fff8
005b5a   efe4     goto	0x2dc8              	goto	MIOS_CLCD_SpecialCharInit
005b5c   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_CLCD_SpecialCharsInit code
                                           _MIOS_CLCD_SpecialCharsInit
                                           	global	_MIOS_CLCD_SpecialCharsInit
                                           
005b82   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
005b84   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005b86   ffd9
005b88   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
005b8a   fff7
005b8c   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
005b8e   fff8
005b90   efe6     goto	0x2dcc              	goto	MIOS_CLCD_SpecialCharsInit
005b92   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GLCD_FontInit code
                                           _MIOS_GLCD_FontInit
                                           	global	_MIOS_GLCD_FontInit
                                           
005b94   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
005b96   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005b98   ffd9
005b9a   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
005b9c   fff7
005b9e   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
005ba0   fff8
005ba2   efaa     goto	0x2d54              	goto	MIOS_GLCD_FontInit
005ba4   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GLCD_GCursorGet code MIOS_GLCD_GCursorGet
                                           _MIOS_GLCD_GCursorGet
                                           	global	_MIOS_GLCD_GCursorGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GLCD_GCursorSet code
                                           _MIOS_GLCD_GCursorSet
                                           	global	_MIOS_GLCD_GCursorSet
                                           
005cc4   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005cc6   ffd9
005cc8   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
005cca   f003
005ccc   efae     goto	0x2d5c              	goto	MIOS_GLCD_GCursorSet
005cce   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_Read code
                                           _MIOS_EEPROM_Read
                                           	global	_MIOS_EEPROM_Read
                                           
005cf2   6ea9     movwf	0xa9, 0            	movwf	EEADR
005cf4   efb0     goto	0x2d60              	goto	MIOS_EEPROM_Read
005cf6   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_Write code
                                           _MIOS_EEPROM_Write
                                           	global	_MIOS_EEPROM_Write
                                           
005cd0   6ea9     movwf	0xa9, 0            	movwf	EEADR
005cd2   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005cd4   ffd9
005cd6   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
005cd8   efb2     goto	0x2d64              	goto	MIOS_EEPROM_Write
005cda   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_ReadPage code
                                           _MIOS_EEPROM_ReadPage
                                           	global	_MIOS_EEPROM_ReadPage
                                           
005ba6   6ea9     movwf	0xa9, 0            	movwf	EEADR
005ba8   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005baa   ffd9
005bac   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
005bae   ffe1
005bb0   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
005bb2   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	EEADR, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
005bb4   ef1a     goto	0x2e34              	goto	MIOS_EEPROM_ReadPage
005bb6   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_WritePage code
                                           _MIOS_EEPROM_WritePage
                                           	global	_MIOS_EEPROM_WritePage
                                           
005bb8   6ea9     movwf	0xa9, 0            	movwf	EEADR
005bba   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005bbc   ffd9
005bbe   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
005bc0   ffe1
005bc2   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
005bc4   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	EEADR, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
005bc6   ef1c     goto	0x2e38              	goto	MIOS_EEPROM_WritePage
005bc8   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_FLASH_Read code
                                           _MIOS_FLASH_Read
                                           	global	_MIOS_FLASH_Read
                                           
005ac2   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
005ac4   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005ac6   ffd9
005ac8   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
005aca   fff7
005acc   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
005ace   fff8
005ad0   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
005ad2   ffe1
005ad4   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
005ad6   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	TBLPTRL, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	TBLPTRH, ACCESS
                                           	return
                                           
                                           	movlw	0x00
                                           	cpfseq	TBLPTRU, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
005ad8   efb4     goto	0x2d68              	goto	MIOS_FLASH_Read
005ada   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_FLASH_Write code
                                           _MIOS_FLASH_Write
                                           	global	_MIOS_FLASH_Write
                                           
005adc   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
005ade   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005ae0   ffd9
005ae2   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
005ae4   fff7
005ae6   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
005ae8   fff8
005aea   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
005aec   ffe1
005aee   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
005af0   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	TBLPTRL, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	TBLPTRH, ACCESS
                                           	return
                                           
                                           	movlw	0x00
                                           	cpfseq	TBLPTRU, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
005af2   efb6     goto	0x2d6c              	goto	MIOS_FLASH_Write
005af4   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_Read code
                                           _MIOS_BANKSTICK_Read
                                           	global	_MIOS_BANKSTICK_Read
                                           
005c2a   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
005c2c   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005c2e   ffd9
005c30   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
005c32   f004
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
005c34   efb8     goto	0x2d70              	goto	MIOS_BANKSTICK_Read
005c36   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_Write code
                                           _MIOS_BANKSTICK_Write
                                           	global	_MIOS_BANKSTICK_Write
                                           
005bfa   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
005bfc   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005bfe   ffd9
005c00   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
005c02   f004
005c04   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movwf	TMP1
                                           	movlw	0x56
                                           	cpfseq	TMP1, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
005c06   efba     goto	0x2d74              	goto	MIOS_BANKSTICK_Write
005c08   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_CtrlSet code MIOS_BANKSTICK_CtrlSet
                                           _MIOS_BANKSTICK_CtrlSet
                                           	global	_MIOS_BANKSTICK_CtrlSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_CtrlGet code MIOS_BANKSTICK_CtrlGet
                                           _MIOS_BANKSTICK_CtrlGet
                                           	global	_MIOS_BANKSTICK_CtrlGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_WritePage code
                                           _MIOS_BANKSTICK_WritePage
                                           	global	_MIOS_BANKSTICK_WritePage
                                           
005af6   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
005af8   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005afa   ffd9
005afc   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
005afe   f004
005b00   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
005b02   ffe1
005b04   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
005b06   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
005b08   eff2     goto	0x2de4              	goto	MIOS_BANKSTICK_WritePage
005b0a   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_ReadPage code
                                           _MIOS_BANKSTICK_ReadPage
                                           	global	_MIOS_BANKSTICK_ReadPage
                                           	
005b0c   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
005b0e   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005b10   ffd9
005b12   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
005b14   f004
005b16   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
005b18   ffe1
005b1a   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
005b1c   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
005b1e   ef18     goto	0x2e30              	goto	MIOS_BANKSTICK_ReadPage
005b20   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_Init code
                                           _MIOS_TIMER_Init
                                           	global	_MIOS_TIMER_Init
                                           
005c0a   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005c0c   ffd9
005c0e   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
005c10   f003
005c12   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
005c14   f004
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movwf	TMP1
                                           	movlw	0x56
                                           	cpfseq	TMP1, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
005c16   efbc     goto	0x2d78              	goto	MIOS_TIMER_Init
005c18   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_Start code MIOS_TIMER_Start
                                           _MIOS_TIMER_Start
                                           	global	_MIOS_TIMER_Start
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_Stop code MIOS_TIMER_Stop
                                           _MIOS_TIMER_Stop
                                           	global	_MIOS_TIMER_Stop
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_ReInit code
                                           _MIOS_TIMER_ReInit
                                           	global	_MIOS_TIMER_ReInit
                                           
005c1a   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005c1c   ffd9
005c1e   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
005c20   f003
005c22   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
005c24   f004
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movwf	TMP1
                                           	movlw	0x56
                                           	cpfseq	TMP1, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
005c26   ef1e     goto	0x2e3c              	goto	MIOS_TIMER_ReInit
005c28   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_GetBitANDMask code MIOS_HLP_GetBitANDMask
                                           _MIOS_HLP_GetBitANDMask
                                           	global	_MIOS_HLP_GetBitANDMask
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_GetBitORMask code MIOS_HLP_GetBitORMask
                                           _MIOS_HLP_GetBitORMask
                                           	global	_MIOS_HLP_GetBitORMask
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_16bitAddSaturate code
                                           _MIOS_HLP_16bitAddSaturate
                                           	global	_MIOS_HLP_16bitAddSaturate
                                           
005a44   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005a46   ffd9
005a48   6e0a     movwf	0xa, 0             	movwf	TMP5
                                           
005a4a   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
005a4c   ffe1
005a4e   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
005a50   ffe2
005a52   52dc     movf	0xdc, 0x1, 0        	movf	PREINC2, F
005a54   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
005a56   f003
005a58   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
005a5a   f004
                                           
005a5c   cfe6     movff	0xfe6, 0x6         	movff	POSTINC1, TMP1	; due to requirement that FSR1 is aligned to 16bit address
005a5e   f006
005a60   cfe6     movff	0xfe6, 0x7         	movff	POSTINC1, TMP2
005a62   f007
005a64   ee10     lfsr	0x1, 0x6            	lfsr	FSR1, TMP1
005a66   f006
                                           
005a68   500a     movf	0xa, 0, 0           	movf	TMP5, W
005a6a   ecdc     call	0x2db8, 0           	call	MIOS_HLP_16bitAddSaturate
005a6c   f016
005a6e   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005a70   ffd9
005a72   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
005a74   ffe1
005a76   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
005a78   ffe2
005a7a   c006     movff	0x6, 0xfe6         	movff	TMP1, POSTINC1
005a7c   ffe6
005a7e   c007     movff	0x7, 0xfe6         	movff	TMP2, POSTINC1
005a80   ffe6
005a82   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_Dec2BCD code
                                           _MIOS_HLP_Dec2BCD
                                           	global	_MIOS_HLP_Dec2BCD
                                           
005cdc   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005cde   ffd9
005ce0   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
005ce2   f003
005ce4   eff4     goto	0x2de8              	goto	MIOS_HLP_Dec2BCD
005ce6   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_Delay code MIOS_Delay
                                           _MIOS_Delay
                                           	global	_MIOS_Delay
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GPCounterGet code MIOS_GPCounterGet
                                           _MIOS_GPCounterGet
                                           	global	_MIOS_GPCounterGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_Reset code MIOS_Reset
                                           _MIOS_Reset
                                           	global	_MIOS_Reset
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SystemResume code MIOS_SystemResume
                                           _MIOS_SystemResume
                                           	global	_MIOS_SystemResume
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SystemSuspend code MIOS_SystemSuspend
                                           _MIOS_SystemSuspend
                                           	global	_MIOS_SystemSuspend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_UserResume code MIOS_UserResume
                                           _MIOS_UserResume
                                           	global	_MIOS_UserResume
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_UserSuspend code MIOS_UserSuspend
                                           _MIOS_UserSuspend
                                           	global	_MIOS_UserSuspend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinAutoRepeatEnable code MIOS_DIN_PinAutoRepeatEnable
                                           _MIOS_DIN_PinAutoRepeatEnable
                                           	global	_MIOS_DIN_PinAutoRepeatEnable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinAutoRepeatDisable code MIOS_DIN_PinAutoRepeatDisable
                                           _MIOS_DIN_PinAutoRepeatDisable
                                           	global	_MIOS_DIN_PinAutoRepeatDisable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinAutoRepeatGet code MIOS_DIN_PinAutoRepeatGet
                                           _MIOS_DIN_PinAutoRepeatGet
                                           	global	_MIOS_DIN_PinAutoRepeatGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DynamicPrioSet code MIOS_AIN_DynamicPrioSet
                                           _MIOS_AIN_DynamicPrioSet
                                           	global	_MIOS_AIN_DynamicPrioSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DynamicPrioGet code MIOS_AIN_DynamicPrioGet
                                           _MIOS_AIN_DynamicPrioGet
                                           	global	_MIOS_AIN_DynamicPrioGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_LastPinsGet code MIOS_AIN_LastPinsGet
                                           _MIOS_AIN_LastPinsGet
                                           	global	_MIOS_AIN_LastPinsGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_Start code MIOS_IIC_Start
                                           _MIOS_IIC_Start
                                           	global	_MIOS_IIC_Start
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_Stop code MIOS_IIC_Stop
                                           _MIOS_IIC_Stop
                                           	global	_MIOS_IIC_Stop
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_ByteSend code MIOS_IIC_ByteSend
                                           _MIOS_IIC_ByteSend
                                           	global	_MIOS_IIC_ByteSend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_ByteReceive code MIOS_IIC_ByteReceive
                                           _MIOS_IIC_ByteReceive
                                           	global	_MIOS_IIC_ByteReceive
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_AckSend code MIOS_IIC_AckSend
                                           _MIOS_IIC_AckSend
                                           	global	_MIOS_IIC_AckSend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_NakSend code MIOS_IIC_NakSend
                                           _MIOS_IIC_NakSend
                                           	global	_MIOS_IIC_NakSend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_CtrlSet code MIOS_IIC_CtrlSet
                                           _MIOS_IIC_CtrlSet
                                           	global	_MIOS_IIC_CtrlSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_CtrlGet code MIOS_IIC_CtrlGet
                                           _MIOS_IIC_CtrlGet
                                           	global	_MIOS_IIC_CtrlGet
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; ==========================================================================
                                           ;;  Special functions supported by the wrapper
                                           ;; ==========================================================================
                                           ;; --------------------------------------------------------------------------
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintCString code
                                           _MIOS_LCD_PrintCString
                                           	global	_MIOS_LCD_PrintCString
                                           
005a00   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
005a02   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
005a04   ffd9
005a06   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
005a08   fff7
005a0a   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
                                           
                                           	;; SDCC passes a 24bit pointer, the MSB (now in WREG) bit 6 and 7 tells us, where the data is located:
                                           	;; 00 -> code
                                           	;; 01 -> EEPROM (not supported by MIOS_LCD_PrintCString yet)
                                           	;; 10 -> data
                                           	;; 11 -> unimplemented
                                           
005a0c   bee8     btfsc	0xe8, 0x7, 0       	btfsc	WREG, 7
005a0e   d008     bra	0x5a20               	bra	_MIOS_LCD_PrintCString_RAM
                                           _MIOS_LCD_PrintCString_Code
005a10   6ef8     movwf	0xf8, 0            	movwf	TBLPTRU
                                           _MIOS_LCD_PrintCStringLoop_Code
005a12   0009     tblrd	*+                 	tblrd*+
005a14   50f5     movf	0xf5, 0, 0          	movf	TABLAT, W
005a16   e003     bz	0x5a1e                	bz	_MIOS_LCD_PrintCString_Code_End
005a18   ec94     call	0x2d28, 0           	call	MIOS_LCD_PrintChar
005a1a   f016
005a1c   d7fa     bra	0x5a12               	bra	_MIOS_LCD_PrintCStringLoop_Code
                                           _MIOS_LCD_PrintCString_Code_End
005a1e   0012     return	0                 	return
                                           
                                           _MIOS_LCD_PrintCString_RAM
                                           	;; using FSR2 as temporary pointer - store current FSR2 into TMP[12]
005a20   cfd9     movff	0xfd9, 0x6         	movff	FSR2L, TMP1
005a22   f006
005a24   cfda     movff	0xfda, 0x7         	movff	FSR2H, TMP2
005a26   f007
005a28   cff6     movff	0xff6, 0xfd9       	movff	TBLPTRL, FSR2L
005a2a   ffd9
005a2c   cff7     movff	0xff7, 0xfda       	movff	TBLPTRH, FSR2H
005a2e   ffda
                                           _MIOS_LCD_PrintCStringLoop_RAM
005a30   50de     movf	0xde, 0, 0          	movf	POSTINC2, W
005a32   e003     bz	0x5a3a                	bz	_MIOS_LCD_PrintCString_RAM_End
005a34   ec94     call	0x2d28, 0           	call	MIOS_LCD_PrintChar
005a36   f016
005a38   d7fb     bra	0x5a30               	bra	_MIOS_LCD_PrintCStringLoop_RAM
                                           _MIOS_LCD_PrintCString_RAM_End
                                           	;; restore FSR2
005a3a   c006     movff	0x6, 0xfd9         	movff	TMP1, FSR2L
005a3c   ffd9
005a3e   c007     movff	0x7, 0xfda         	movff	TMP2, FSR2H
005a40   ffda
005a42   0012     return	0                 	return
                                           
                                           	END
                                           ; $Id: app_lcd.asm 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; Wrapper for app_lcd.inc
                                           ; To be used for relocatable programs
                                           ;
                                           ; ==========================================================================
                                           
                                           	radix	dec
                                           
                                           #include <mios.h>
                                           ; $Id: mios.h 387 2008-07-14 20:59:15Z tk $
                                           ;
                                           ; MIOS Definitions file
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2008 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  Include basic defines which characterize the derivative to
                                           ;;  simplify dependencies within MIOS source code
                                           ;; ==========================================================================
                                           #include <hw_flags.h>
                                           
                                           #ifndef _HW_FLAGS_H
                                           #define _HW_FLAGS_H
                                           
                                           #ifdef __18F452
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		0
                                           #define PIC_DERIVATIVE_CMCON_INIT	0
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4620
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x10000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xf80
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	1
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4682
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x14000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #ifdef __18F4685
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x18000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #endif
                                            
                                           ;; ==========================================================================
                                           ;;  Assembler directives & device specific include file
                                           ;;
                                           ;;  Natively supported devices are listed here.
                                           ;; ==========================================================================
                                           
                                           #ifdef __18F452
                                           	LIST R=DEC
                                           #include <p18f452.inc>
                                                   LIST
                                           ; P18F452.INC  Standard Header File, Version 1.4   Microchip Technology, Inc.
                                                   NOLIST
                                           #endif
                                           
                                           #ifdef __18F4620
                                           	LIST R=DEC
                                           #include <p18f4620.inc>
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           	LIST R=DEC
                                           #include <p18f4520.inc>
                                           #endif
                                           
                                           #ifdef __18F4682
                                           	LIST R=DEC
                                           #include <p18f4682.inc>
                                           #endif
                                           
                                           #ifdef __18F4685
                                           	LIST R=DEC
                                           #include <p18f4685.inc>
                                           #endif
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  General constants
                                           ;; ==========================================================================
                                           
                                           ;; used by MIOS_MIDI_Interface*
                                           MIOS_MIDI_INTERFACE_COMMON	EQU	0x00
                                           MIOS_MIDI_INTERFACE_TO_HOST	EQU	0x01
                                           
                                           ;; used by MIOS_MIDI_Merger*
                                           MIOS_MIDI_MERGER_DISABLED	EQU	0x00
                                           MIOS_MIDI_MERGER_ENABLED	EQU	0x01
                                           MIOS_MIDI_MERGER_MBLINK_EP	EQU	0x02
                                           MIOS_MIDI_MERGER_MBLINK_FP	EQU	0x03
                                           
                                           ;; used by MIOS_ENC_PIN_TABLE
                                           MIOS_ENC_MODE_NON_DETENTED	EQU	0x00
                                           MIOS_ENC_MODE_DETENTED		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED1		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED2		EQU	0x81
                                           MIOS_ENC_MODE_DETENTED3		EQU	0x82
                                           
                                           ;; used by MIOS_ENC_Speed*
                                           MIOS_ENC_SPEED_SLOW		EQU	0
                                           MIOS_ENC_SPEED_NORMAL		EQU	1
                                           MIOS_ENC_SPEED_FAST		EQU	2
                                           
                                           ;; used by MIOS_LCD_Type*
                                           MIOS_LCD_TYPE_CLCD		EQU	0x00
                                           MIOS_LCD_TYPE_GLCD0		EQU	0x01
                                           MIOS_LCD_TYPE_GLCD1		EQU	0x02
                                           MIOS_LCD_TYPE_GLCD2		EQU	0x03
                                           MIOS_LCD_TYPE_GLCD3		EQU	0x04
                                           MIOS_LCD_TYPE_GLCD4		EQU	0x05
                                           MIOS_LCD_TYPE_MLCD		EQU	0x06
                                           MIOS_LCD_TYPE_GLCD_CUSTOM	EQU	0x07
                                           
                                           ;; location of default 5x8 font for graphical displays
                                           MIOS_GLCD_FONT			EQU	0x7cfc
                                           
                                           ;; general config flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_CFG0_LCD_TYPE0		EQU 0	; selects LCD type, bit 0
                                           MIOS_BOX_CFG0_LCD_TYPE1		EQU 1	; selects LCD type, bit 1
                                           MIOS_BOX_CFG0_LCD_TYPE2		EQU 2	; selects LCD type, bit 2
                                           MIOS_BOX_CFG0_USE_GLCD		EQU 3	; if 1, graphical LCD is connected
                                           MIOS_BOX_CFG0_MERGER		EQU 4	; if 1, MIDI merger is enabled
                                           MIOS_BOX_CFG0_MBLINK		EQU 5	; if 1, MIDIbox Link is enabled
                                           MIOS_BOX_CFG0_TO_HOST		EQU 6	; if 1, MIDI interface will run with 38400 baud instead of 31250
                                           MIOS_BOX_CFG0_20MHz		EQU 7	; if 1, it is assumed that box is running with 20 MHz, else with 40 MHz
                                           
                                           MIOS_BOX_CFG1_BS_A0		EQU 0	; A0 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A1		EQU 1	; A1 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A2		EQU 2	; A2 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_DIS_VERIFY	EQU 3	; if 1, writes to the BankStick will not be verified
                                           MIOS_BOX_CFG1_IIC_STRETCH_CLK	EQU 4	; if 1, IIC clock stretching enabled
                                           
                                           ;; general status flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_STAT_BS_AVAILABLE	EQU 0	; if 1, BankStick is available
                                           MIOS_BOX_STAT_MBLINK_TUNNEL_PASS EQU 1  ; if 1, a MBLinked event will be tunnled
                                           MIOS_BOX_STAT_SUSPEND_ALL       EQU 2   ; if 1, all system and user tasks are suspended
                                           MIOS_BOX_STAT_SUSPEND_USER      EQU 3   ; if 1, all user tasks are suspended
                                           MIOS_BOX_STAT_AUTOREPEAT	EQU 4	; if 1, start the auto-repeat handler
                                           MIOS_BOX_STAT_MLCD_TRANSFER	EQU 5	; if 1, a transfer to the MLCD has been started
                                           MIOS_BOX_STAT_FERR		EQU 6	; if 1, a frame error happened during MIDI receive
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS Special Function Registers
                                           ;; ==========================================================================
                                           
                                           MIOS_BOX_CFG0	EQU	0x000
                                           MIOS_BOX_CFG1	EQU	0x001
                                           MIOS_BOX_STAT	EQU	0x002
                                           MIOS_PARAMETER1	EQU	0x003
                                           MIOS_PARAMETER2	EQU	0x004
                                           MIOS_PARAMETER3	EQU	0x005
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for main programs
                                           ;; ==========================================================================
                                           TMP1		EQU	0x006
                                           TMP2		EQU	0x007
                                           TMP3		EQU	0x008
                                           TMP4		EQU	0x009
                                           TMP5		EQU	0x00a
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for IRQs
                                           ;; ==========================================================================
                                           IRQ_TMP1	EQU	0x00b
                                           IRQ_TMP2	EQU	0x00c
                                           IRQ_TMP3	EQU	0x00d
                                           IRQ_TMP4	EQU	0x00e
                                           IRQ_TMP5	EQU	0x00f
                                           
                                           ;; ==========================================================================
                                           ;;  free memory space for user application:
                                           ;; ==========================================================================
                                           	;; 0x010-0x37f
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers -- not defined here -- 
                                           ;;  never use these memory locations!
                                           ;; ==========================================================================
                                           	;; 0x380-0x6ff
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers for custom LCD driver
                                           ;; ==========================================================================
                                           MIOS_GLCD_BUFFER	EQU	0x570	; note: the buffer must be located at ...0-...7
                                           MIOS_LCD_OPTION1	EQU	0x578	; contains the first LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_OPTION2	EQU	0x579	; contains the second LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_CURSOR_POS	EQU	0x57a	; the current cursor pos of characters (GLCD: multiplied by width)
                                           MIOS_GLCD_GCURSOR_X	EQU	0x57b	; for GLCDs: the current X position of graphical cursor
                                           MIOS_GLCD_GCURSOR_Y	EQU	0x57c	; for GLCDs: the current Y position of graphical cursor
                                           MIOS_GLCD_FONT_WIDTH	EQU	0x57d	; for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_HEIGHT	EQU	0x57e	; for GLCDs: the fontheight given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_X0	EQU	0x57f	; for GLCDs: the first byte within a char entry
                                           MIOS_GLCD_FONT_OFFSET	EQU	0x580	; for GLCDs: the byte offset between the characters
                                           MIOS_GLCD_FONT_PTRL	EQU	0x581	; for GLCDs: pointer to the character table, low-byte
                                           MIOS_GLCD_FONT_PTRH	EQU	0x582	; for GLCDs: pointer to the character table, high-byte
                                           MIOS_LCD_TIMEOUT0	EQU	0x583   ; can be used for timeout loops
                                           MIOS_LCD_TIMEOUT1	EQU	0x584   ; can be used for timeout loops
                                           MIOS_GLCD_TMP1		EQU	0x585   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP2		EQU	0x586   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP3		EQU	0x587   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP4		EQU	0x588   ; can be used as temporary buffer
                                           MIOS_LCD_Y0_OFFSET	EQU	0x589   ; Y0 offset of LCD
                                           MIOS_LCD_Y1_OFFSET	EQU	0x58a   ; Y1 offset of LCD
                                           MIOS_LCD_Y2_OFFSET	EQU	0x58b   ; Y2 offset of LCD
                                           MIOS_LCD_Y3_OFFSET	EQU	0x58c   ; Y3 offset of LCD
                                           MIOS_LCD_CURSOR_POS_REAL EQU	0x58d	; unmapped cursor position which has been set with MIOS_LCD_CursorSet
                                           MIOS_GLCD_FONT_PTRU	EQU	0x58e	; for GLCDs: pointer to the character table, upper-byte (>64k flash derivatives only)
                                           #include <mios_vectors.inc>
                                           ; $Id: mios_vectors.inc 49 2008-01-30 21:47:31Z tk $
                                           
                                           MIOS_MIDI_BeginStream                   EQU	0x2c00
                                           MIOS_MIDI_DeviceIDAutoSet               EQU	0x2c04
                                           MIOS_MIDI_DeviceIDGet                   EQU	0x2c08
                                           MIOS_MIDI_DeviceIDSet                   EQU	0x2c0c
                                           MIOS_MIDI_EndStream                     EQU	0x2c10
                                           MIOS_MIDI_Init                          EQU	0x2c14
                                           MIOS_MIDI_InterfaceAutoSet              EQU	0x2c18
                                           MIOS_MIDI_InterfaceGet                  EQU	0x2c1c
                                           MIOS_MIDI_InterfaceSet                  EQU	0x2c20
                                           MIOS_MIDI_MergerGet                     EQU	0x2c24
                                           MIOS_MIDI_MergerSet                     EQU	0x2c28
                                           MIOS_MIDI_RxBufferFree                  EQU	0x2c2c
                                           MIOS_MIDI_RxBufferGet                   EQU	0x2c30
                                           MIOS_MIDI_RxBufferPut                   EQU	0x2c34
                                           MIOS_MIDI_RxBufferUsed                  EQU	0x2c38
                                           MIOS_MIDI_TxBufferFlush                 EQU	0x2c3c
                                           MIOS_MIDI_TxBufferFree                  EQU	0x2c40
                                           MIOS_MIDI_TxBufferGet                   EQU	0x2c44
                                           MIOS_MIDI_TxBufferPut                   EQU	0x2c48
                                           MIOS_MIDI_TxBufferUsed                  EQU	0x2c4c
                                           MIOS_MPROC_MergerDisable                EQU	0x2c50
                                           MIOS_MPROC_MergerEnable                 EQU	0x2c54
                                           MIOS_MPROC_MergerGet                    EQU	0x2c58
                                           MIOS_AIN_DeadbandGet                    EQU	0x2c5c
                                           MIOS_AIN_DeadbandSet                    EQU	0x2c60
                                           MIOS_AIN_Muxed                          EQU	0x2c64
                                           MIOS_AIN_NumberGet                      EQU	0x2c68
                                           MIOS_AIN_NumberSet                      EQU	0x2c6c
                                           MIOS_AIN_Pin7bitGet                     EQU	0x2c70
                                           MIOS_AIN_PinGet                         EQU	0x2c74
                                           MIOS_AIN_PinLSBGet                      EQU	0x2c78
                                           MIOS_AIN_PinMSBGet                      EQU	0x2c7c
                                           MIOS_AIN_UnMuxed                        EQU	0x2c80
                                           MIOS_MF_PWM_DutyCycleDownGet            EQU	0x2c84
                                           MIOS_MF_PWM_DutyCycleDownSet            EQU	0x2c88
                                           MIOS_MF_PWM_DutyCycleUpGet              EQU	0x2c8c
                                           MIOS_MF_PWM_DutyCycleUpSet              EQU	0x2c90
                                           MIOS_MF_DeadbandGet                     EQU	0x2c94
                                           MIOS_MF_DeadbandSet                     EQU	0x2c98
                                           MIOS_MF_Disable                         EQU	0x2c9c
                                           MIOS_MF_Enable                          EQU	0x2ca0
                                           MIOS_MF_FaderMove                       EQU	0x2ca4
                                           MIOS_MF_SuspendDisable                  EQU	0x2ca8
                                           MIOS_MF_SuspendEnable                   EQU	0x2cac
                                           MIOS_MF_SuspendGet                      EQU	0x2cb0
                                           MIOS_DIN_PinGet                         EQU	0x2cb4
                                           MIOS_DIN_SRGet                          EQU	0x2cb8
                                           MIOS_DOUT_PinGet                        EQU	0x2cbc
                                           MIOS_DOUT_PinSet                        EQU	0x2cc0
                                           MIOS_DOUT_PinSet0                       EQU	0x2cc4
                                           MIOS_DOUT_PinSet1                       EQU	0x2cc8
                                           MIOS_DOUT_SRGet                         EQU	0x2ccc
                                           MIOS_DOUT_SRSet                         EQU	0x2cd0
                                           MIOS_ENC_Abs7bitAdd                     EQU	0x2cd4
                                           MIOS_ENC_Abs7bitGet                     EQU	0x2cd8
                                           MIOS_ENC_Abs7bitSet                     EQU	0x2cdc
                                           MIOS_ENC_NumberGet                      EQU	0x2ce0
                                           MIOS_ENC_SpeedGet                       EQU	0x2ce4
                                           MIOS_ENC_SpeedSet                       EQU	0x2ce8
                                           MIOS_SRIO_NumberGet                     EQU	0x2cec
                                           MIOS_SRIO_NumberSet                     EQU	0x2cf0
                                           MIOS_SRIO_TS_SensitivityGet             EQU	0x2cf4
                                           MIOS_SRIO_TS_SensitivitySet             EQU	0x2cf8
                                           MIOS_SRIO_UpdateFrqGet                  EQU	0x2cfc
                                           MIOS_SRIO_UpdateFrqSet                  EQU	0x2d00
                                           MIOS_LCD_Clear                          EQU	0x2d04
                                           MIOS_LCD_Cmd                            EQU	0x2d08
                                           MIOS_LCD_CursorGet                      EQU	0x2d0c
                                           MIOS_LCD_CursorSet                      EQU	0x2d10
                                           MIOS_LCD_Data                           EQU	0x2d14
                                           MIOS_LCD_Init                           EQU	0x2d18
                                           MIOS_LCD_PrintBCD1	                EQU	0x2d1c
                                           MIOS_LCD_PrintBCD2                      EQU	0x2d20
                                           MIOS_LCD_PrintBCD3                      EQU	0x2d24
                                           MIOS_LCD_PrintChar	                EQU	0x2d28
                                           MIOS_LCD_PrintHex1	                EQU	0x2d2c
                                           MIOS_LCD_PrintHex2                      EQU	0x2d30
                                           MIOS_LCD_PrintMessage                   EQU	0x2d34
                                           MIOS_LCD_PrintPreconfString             EQU	0x2d38
                                           MIOS_LCD_PrintString                    EQU	0x2d3c
                                           MIOS_LCD_TypeAutoSet                    EQU	0x2d40
                                           MIOS_LCD_TypeGet                        EQU	0x2d44
                                           MIOS_LCD_TypeSet                        EQU	0x2d48
                                           MIOS_LCD_YAddressGet                    EQU	0x2d4c
                                           MIOS_LCD_YAddressSet                    EQU	0x2d50
                                           MIOS_GLCD_FontInit                      EQU	0x2d54
                                           MIOS_GLCD_GCursorGet                    EQU	0x2d58
                                           MIOS_GLCD_GCursorSet                    EQU	0x2d5c
                                           MIOS_EEPROM_Read                        EQU	0x2d60
                                           MIOS_EEPROM_Write                       EQU	0x2d64
                                           MIOS_FLASH_Read                         EQU	0x2d68
                                           MIOS_FLASH_Write                        EQU	0x2d6c
                                           MIOS_BANKSTICK_Read                     EQU	0x2d70
                                           MIOS_BANKSTICK_Write                    EQU	0x2d74
                                           MIOS_TIMER_Init                         EQU	0x2d78
                                           MIOS_TIMER_Start                        EQU	0x2d7c
                                           MIOS_TIMER_Stop                         EQU	0x2d80
                                           MIOS_HLP_AddressFromTable               EQU	0x2d84
                                           MIOS_HLP_GetBitANDMask                  EQU	0x2d88
                                           MIOS_HLP_GetBitORMask                   EQU	0x2d8c
                                           MIOS_HLP_GetIndex_2bytes                EQU	0x2d90
                                           MIOS_HLP_GetIndex_4bytes                EQU	0x2d94
                                           MIOS_HLP_IndirectJump                   EQU	0x2d98
                                           MIOS_Delay                              EQU	0x2d9c
                                           MIOS_GPCounterGet                       EQU	0x2da0
                                           MIOS_Reset                              EQU	0x2da4
                                           MIOS_SystemResume                       EQU	0x2da8
                                           MIOS_SystemSuspend                      EQU	0x2dac
                                           MIOS_UserResume                         EQU	0x2db0
                                           MIOS_UserSuspend                        EQU	0x2db4
                                           MIOS_HLP_16bitAddSaturate		EQU	0x2db8
                                           MIOS_DIN_PinAutoRepeatEnable		EQU	0x2dbc
                                           MIOS_DIN_PinAutoRepeatDisable		EQU	0x2dc0
                                           MIOS_DIN_PinAutoRepeatGet		EQU	0x2dc4
                                           MIOS_CLCD_SpecialCharInit		EQU	0x2dc8
                                           MIOS_CLCD_SpecialCharsInit		EQU	0x2dcc
                                           MIOS_AIN_DynamicPrioSet			EQU	0x2dd0
                                           MIOS_AIN_DynamicPrioGet			EQU	0x2dd4
                                           MIOS_AIN_LastPinsGet			EQU	0x2dd8
                                           MIOS_BANKSTICK_CtrlSet			EQU	0x2ddc
                                           MIOS_BANKSTICK_CtrlGet			EQU	0x2de0
                                           MIOS_BANKSTICK_WritePage		EQU	0x2de4
                                           MIOS_HLP_Dec2BCD			EQU	0x2de8
                                           MIOS_LCD_PrintBCD4			EQU	0x2dec
                                           MIOS_LCD_PrintBCD5                      EQU	0x2df0
                                           MIOS_LCD_MessageStart			EQU	0x2df4
                                           MIOS_LCD_MessageStop			EQU	0x2df8
                                           MIOS_MF_PWM_PeriodGet                   EQU	0x2dfc
                                           MIOS_MF_PWM_PeriodSet                   EQU	0x2e00
                                           MIOS_IIC_Start				EQU	0x2e04
                                           MIOS_IIC_Stop				EQU	0x2e08
                                           MIOS_IIC_ByteSend			EQU	0x2e0c
                                           MIOS_IIC_ByteReceive			EQU	0x2e10
                                           MIOS_IIC_AckSend			EQU	0x2e14
                                           MIOS_IIC_NakSend			EQU	0x2e18
                                           MIOS_IIC_CtrlSet			EQU	0x2e1c
                                           MIOS_IIC_CtrlGet			EQU	0x2e20
                                           MIOS_SRIO_DebounceSet			EQU	0x2e24
                                           MIOS_SRIO_DebounceGet			EQU	0x2e28
                                           MIOS_MF_TouchDetectionReset		EQU	0x2e2c
                                           MIOS_BANKSTICK_ReadPage			EQU	0x2e30
                                           MIOS_EEPROM_ReadPage			EQU	0x2e34
                                           MIOS_EEPROM_WritePage			EQU	0x2e38
                                           MIOS_TIMER_ReInit			EQU	0x2e3c
                                           MIOS_RESERVED_144                       EQU	0x2e40
                                           MIOS_RESERVED_145                       EQU	0x2e44
                                           MIOS_RESERVED_146                       EQU	0x2e48
                                           MIOS_RESERVED_147                       EQU	0x2e4c
                                           MIOS_RESERVED_148                       EQU	0x2e50
                                           MIOS_RESERVED_149                       EQU	0x2e54
                                           MIOS_RESERVED_150                       EQU	0x2e58
                                           MIOS_RESERVED_151                       EQU	0x2e5c
                                           MIOS_RESERVED_152                       EQU	0x2e60
                                           MIOS_RESERVED_153                       EQU	0x2e64
                                           MIOS_RESERVED_154                       EQU	0x2e68
                                           MIOS_RESERVED_155                       EQU	0x2e6c
                                           MIOS_RESERVED_156                       EQU	0x2e70
                                           MIOS_RESERVED_157                       EQU	0x2e74
                                           MIOS_RESERVED_158                       EQU	0x2e78
                                           MIOS_RESERVED_159                       EQU	0x2e7c
                                           MIOS_RESERVED_160                       EQU	0x2e80
                                           MIOS_RESERVED_161                       EQU	0x2e84
                                           MIOS_RESERVED_162                       EQU	0x2e88
                                           MIOS_RESERVED_163                       EQU	0x2e8c
                                           MIOS_RESERVED_164                       EQU	0x2e90
                                           MIOS_RESERVED_165                       EQU	0x2e94
                                           MIOS_RESERVED_166                       EQU	0x2e98
                                           MIOS_RESERVED_167                       EQU	0x2e9c
                                           MIOS_RESERVED_168                       EQU	0x2ea0
                                           MIOS_RESERVED_169                       EQU	0x2ea4
                                           MIOS_RESERVED_170                       EQU	0x2ea8
                                           MIOS_RESERVED_171                       EQU	0x2eac
                                           MIOS_RESERVED_172                       EQU	0x2eb0
                                           MIOS_RESERVED_173                       EQU	0x2eb4
                                           MIOS_RESERVED_174                       EQU	0x2eb8
                                           MIOS_RESERVED_175                       EQU	0x2ebc
                                           MIOS_RESERVED_176                       EQU	0x2ec0
                                           MIOS_RESERVED_177                       EQU	0x2ec4
                                           MIOS_RESERVED_178                       EQU	0x2ec8
                                           MIOS_RESERVED_179                       EQU	0x2ecc
                                           MIOS_RESERVED_180                       EQU	0x2ed0
                                           MIOS_RESERVED_181                       EQU	0x2ed4
                                           MIOS_RESERVED_182                       EQU	0x2ed8
                                           MIOS_RESERVED_183                       EQU	0x2edc
                                           MIOS_RESERVED_184                       EQU	0x2ee0
                                           MIOS_RESERVED_185                       EQU	0x2ee4
                                           MIOS_RESERVED_186                       EQU	0x2ee8
                                           MIOS_RESERVED_187                       EQU	0x2eec
                                           MIOS_RESERVED_188                       EQU	0x2ef0
                                           MIOS_RESERVED_189                       EQU	0x2ef4
                                           MIOS_RESERVED_190                       EQU	0x2ef8
                                           MIOS_RESERVED_191                       EQU	0x2efc
                                           MIOS_RESERVED_192                       EQU	0x2f00
                                           MIOS_RESERVED_193                       EQU	0x2f04
                                           MIOS_RESERVED_194                       EQU	0x2f08
                                           MIOS_RESERVED_195                       EQU	0x2f0c
                                           MIOS_RESERVED_196                       EQU	0x2f10
                                           MIOS_RESERVED_197                       EQU	0x2f14
                                           MIOS_RESERVED_198                       EQU	0x2f18
                                           MIOS_RESERVED_199                       EQU	0x2f1c
                                           MIOS_RESERVED_200                       EQU	0x2f20
                                           MIOS_RESERVED_201                       EQU	0x2f24
                                           MIOS_RESERVED_202                       EQU	0x2f28
                                           MIOS_RESERVED_203                       EQU	0x2f2c
                                           MIOS_RESERVED_204                       EQU	0x2f30
                                           MIOS_RESERVED_205                       EQU	0x2f34
                                           MIOS_RESERVED_206                       EQU	0x2f38
                                           MIOS_RESERVED_207                       EQU	0x2f3c
                                           MIOS_RESERVED_208                       EQU	0x2f40
                                           MIOS_RESERVED_209                       EQU	0x2f44
                                           MIOS_RESERVED_210                       EQU	0x2f48
                                           MIOS_RESERVED_211                       EQU	0x2f4c
                                           MIOS_RESERVED_212                       EQU	0x2f50
                                           MIOS_RESERVED_213                       EQU	0x2f54
                                           MIOS_RESERVED_214                       EQU	0x2f58
                                           MIOS_RESERVED_215                       EQU	0x2f5c
                                           MIOS_RESERVED_216                       EQU	0x2f60
                                           MIOS_RESERVED_217                       EQU	0x2f64
                                           MIOS_RESERVED_218                       EQU	0x2f68
                                           MIOS_RESERVED_219                       EQU	0x2f6c
                                           MIOS_RESERVED_220                       EQU	0x2f70
                                           MIOS_RESERVED_221                       EQU	0x2f74
                                           MIOS_RESERVED_222                       EQU	0x2f78
                                           MIOS_RESERVED_223                       EQU	0x2f7c
                                           MIOS_RESERVED_224                       EQU	0x2f80
                                           MIOS_RESERVED_225                       EQU	0x2f84
                                           MIOS_RESERVED_226                       EQU	0x2f88
                                           MIOS_RESERVED_227                       EQU	0x2f8c
                                           MIOS_RESERVED_228                       EQU	0x2f90
                                           MIOS_RESERVED_229                       EQU	0x2f94
                                           MIOS_RESERVED_230                       EQU	0x2f98
                                           MIOS_RESERVED_231                       EQU	0x2f9c
                                           MIOS_RESERVED_232                       EQU	0x2fa0
                                           MIOS_RESERVED_233                       EQU	0x2fa4
                                           MIOS_RESERVED_234                       EQU	0x2fa8
                                           MIOS_RESERVED_235                       EQU	0x2fac
                                           MIOS_RESERVED_236                       EQU	0x2fb0
                                           MIOS_RESERVED_237                       EQU	0x2fb4
                                           MIOS_RESERVED_238                       EQU	0x2fb8
                                           MIOS_RESERVED_239                       EQU	0x2fbc
                                           MIOS_RESERVED_240                       EQU	0x2fc0
                                           MIOS_RESERVED_241                       EQU	0x2fc4
                                           MIOS_RESERVED_242                       EQU	0x2fc8
                                           MIOS_RESERVED_243                       EQU	0x2fcc
                                           MIOS_RESERVED_244                       EQU	0x2fd0
                                           MIOS_RESERVED_245                       EQU	0x2fd4
                                           MIOS_RESERVED_246                       EQU	0x2fd8
                                           MIOS_RESERVED_247                       EQU	0x2fdc
                                           MIOS_RESERVED_248                       EQU	0x2fe0
                                           MIOS_RESERVED_249                       EQU	0x2fe4
                                           MIOS_RESERVED_250                       EQU	0x2fe8
                                           MIOS_RESERVED_251                       EQU	0x2fec
                                           MIOS_RESERVED_252                       EQU	0x2ff0
                                           MIOS_RESERVED_253                       EQU	0x2ff4
                                           MIOS_RESERVED_254                       EQU	0x2ff8
                                           MIOS_RESERVED_255                       EQU	0x2ffc
                                           #include <macros.h>
                                           ; $Id: macros.h 49 2008-01-30 21:47:31Z tk $
                                           ;
                                           ; Macro Definitions
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           BRA_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	bra	label
                                           	ENDM
                                           
                                           
                                           BRA_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	bra	label
                                           	ENDM
                                           
                                           GOTO_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	goto	label
                                           	ENDM
                                           
                                           
                                           GOTO_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	goto	label
                                           	ENDM
                                           
                                           CALL_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	call	label
                                           	ENDM
                                           
                                           
                                           CALL_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	call	label
                                           	ENDM
                                           
                                           RCALL_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	rcall	label
                                           	ENDM
                                           
                                           
                                           RCALL_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	rcall	label
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           IRQ_DISABLE MACRO
                                                   bcf     INTCON, GIE
                                                   ENDM
                                           
                                           IRQ_ENABLE MACRO
                                                   bsf     INTCON, GIE
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           TABLE_ADDR_FULL MACRO addr
                                           	movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                                   movlw   UPPER(addr)		; store upper Byte
                                                   movwf   TBLPTRU
                                                   ENDM
                                                   
                                           TABLE_ADDR MACRO addr
                                                   movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                                   movlw   UPPER(addr)		; store Upper Byte
                                                   movwf   TBLPTRU
                                           #endif
                                                   ENDM
                                                   
                                           TABLE_H MACRO   addr
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                                   ENDM
                                           
                                           TABLE_L MACRO   addr
                                                   movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   ENDM
                                           
                                           TABLE_ADD_W MACRO
                                           	addwf	TBLPTRL, F
                                           	movlw	0x00
                                           	addwfc	TBLPTRH, F
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                           	movlw	0x00
                                           	addwfc	TBLPTRU, F
                                           #endif
                                                   ENDM
                                           
                                           TABLE_ADDR_MUL_W MACRO addr, multiplicator
                                           	mullw	multiplicator
                                           	movlw	LOW(addr)
                                           	addwf	PRODL, W
                                           	movwf	TBLPTRL
                                           	movlw	HIGH(addr)
                                           	addwfc	PRODH, W
                                           	movwf	TBLPTRH
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                           	clrf    TBLPTRU
                                                   movlw   UPPER(addr)
                                           	addwfc	TBLPTRU, F
                                           #endif
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           JUMPTABLE_2BYTES MACRO max_value
                                           	addlw	-(max_value)	; ensure that jump index is not greater than (max_value-1)
                                           	skpnc
                                           	movlw	-(max_value)
                                           	addlw	max_value
                                           	call	MIOS_HLP_GetIndex_2bytes
                                           	ENDM
                                           
                                           JUMPTABLE_2BYTES_UNSECURE MACRO
                                           	call	MIOS_HLP_GetIndex_2bytes
                                           	ENDM
                                           
                                           JUMPTABLE_4BYTES MACRO max_value
                                           	addlw	-(max_value)	; ensure that jump index is not greater than (max_value-1)
                                           	skpnc
                                           	return
                                           	addlw	(max_value)
                                           	call	MIOS_HLP_GetIndex_4bytes
                                           	ENDM
                                           
                                           JUMPTABLE_4BYTES_UNSECURE MACRO
                                           	call	MIOS_HLP_GetIndex_4bytes
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           TWOBYTE_ENTRY MACRO low_byte, high_byte
                                                   dw      (high_byte << 8) | (low_byte)
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           #define skpnz	btfsc	STATUS, Z 
                                           #define skpz	btfss	STATUS, Z 
                                           #define skpndc	btfsc	STATUS, DC 
                                           #define skpdc	btfss	STATUS, DC
                                           #define skpnc	btfsc	STATUS, C
                                           #define skpc	btfss	STATUS, C
                                           #define clrc	bcf	STATUS, C
                                           #define setc	bsf	STATUS, C
                                           #define clrz	bcf	STATUS, Z
                                           #define setz	bsf	STATUS, Z
                                           #define rrf	rrcf	
                                           #define rlf	rlcf
                                           
                                           rgoto   MACRO   label
                                                   bra     label
                                                   ENDM
                                           
                                           SET_BSR MACRO   reg
                                                   movlb   HIGH(reg)
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           FONT_ENTRY MACRO width, height, x0, char_offset
                                           	dw	((height) << 8) | (width), ((char_offset) << 8) | (x0)
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           STRING MACRO length, pos, str
                                           	da	((length) << 8) | (pos), str
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           ; ==========================================================================
                                           ; Import/Export Labels
                                           ; ==========================================================================
                                           	global	USER_LCD_Init
                                           	global	USER_LCD_Data
                                           	global	USER_LCD_Cmd
                                           	global	USER_LCD_Clear
                                           	global	USER_LCD_CursorSet
                                           	global	USER_LCD_PrintChar
                                           	global	USER_LCD_SpecialCharInit
                                           
                                           ; ==========================================================================
                                           ; Start code section and include driver code
                                           ; ==========================================================================
                                           APP_LCD CODE
                                           #include "app_lcd.inc"
                                           ; $Id: app_lcd.inc 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; MIOS Custom LCD Driver Skeleton
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  Following system variables are given by MIOS and can be directly 
                                           ;;  accessed by the driver. The addresses are defined in mios.h and
                                           ;;  should not be changed
                                           ;; 
                                           ;;  MIOS_GLCD_BUFFER	     a 8 byte buffer for data transfers
                                           ;;  MIOS_LCD_OPTION1	     contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;  MIOS_LCD_OPTION2	     contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;  MIOS_LCD_CURSOR_POS	     the current cursor pos of characters (GLCD: multiplied by width)
                                           ;;  MIOS_GLCD_GCURSOR_X	     for GLCDs: the current X position of graphical cursor
                                           ;;  MIOS_GLCD_GCURSOR_Y	     for GLCDs: the current Y position of graphical cursor
                                           ;;  MIOS_GLCD_FONT_WIDTH     for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
                                           ;;  MIOS_GLCD_FONT_HEIGHT    for GLCDs: the fontheight given by MIOS_GLCD_FontInit
                                           ;;  MIOS_GLCD_FONT_X0        for GLCDs: the first byte within a char entry
                                           ;;  MIOS_GLCD_FONT_OFFSET    for GLCDs: the byte offset between the characters
                                           ;;  MIOS_GLCD_FONT_PTRL      for GLCDs: pointer to the character table, low-byte
                                           ;;  MIOS_GLCD_FONT_PTRH      for GLCDs: pointer to the character table, high-byte
                                           ;;  MIOS_LCD_TIMEOUT0        can be used for timeout loops
                                           ;;  MIOS_LCD_TIMEOUT1        can be used for timeout loops
                                           ;;  MIOS_GLCD_TMP1           can be used as temporary buffer
                                           ;;  MIOS_GLCD_TMP2           can be used as temporary buffer
                                           ;;  MIOS_GLCD_TMP3           can be used as temporary buffer
                                           ;;  MIOS_GLCD_TMP4           can be used as temporary buffer
                                           ;;  MIOS_LCD_Y0_OFFSET       Y0 offset of LCD
                                           ;;  MIOS_LCD_Y1_OFFSET       Y1 offset of LCD
                                           ;;  MIOS_LCD_Y2_OFFSET       Y2 offset of LCD
                                           ;;  MIOS_LCD_Y3_OFFSET       Y3 offset of LCD
                                           ;;  MIOS_LCD_CURSOR_POS_REAL unmapped cursor position which has been set with MIOS_LCD_CursorSet
                                           ;; 
                                           ;;  Note: the addresses are located in an upper bank and therefore have to
                                           ;;        be accessed with the BANKED flag. Also the BSR has to be justified
                                           ;;        before using the registers
                                           ;;  Example:
                                           ;;	SET_BSR MIOS_LCD_OPTION1	; sets BSR to the bank where MIOS_LCD_*
                                           ;;					; has been located. You don't need to
                                           ;;					; change the BSR for the other LCD registers
                                           ;;      movf    MIOS_LCD_OPTION1, W, BANKED	; get LCD option #1
                                           ;; 
                                           ;;  Important: to allow a proper interaction with MIOS applications, you are
                                           ;;  only allowed to modify MIOS_PARAMETER[123], the mutliplication registers
                                           ;;  and FSR1. You are not allowed to change TMP[1-5] or FSR0
                                           ;;  if you need some temporary registers, use the given addresses above or
                                           ;;  locate them to addresses which are not used by the application
                                           ;; --------------------------------------------------------------------------
                                           	
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the custom LCD should be initialized
                                           ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;  Out: -
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Init
005c38   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the custom LCD should be cleared
                                           ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;  Out: -
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Clear
005c3a   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the cursor should be changed
                                           ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_GLCD_CURSOR_X - horizontal cursor position (for GLCDs)
                                           ;;       MIOS_GLCD_CURSOR_X - vertical cursor position   (for GLCDs)
                                           ;;       MIOS_LCD_CURSOR    - character cursor position  (for CLCDs)
                                           ;;  Out: -
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_CursorSet
005c3c   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a character should be print
                                           ;;  In:  WREG - character
                                           ;;       all other MIOS_*LCD_* registers
                                           ;;  Out: GLCDs should justify the X/Y cursor position
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_PrintChar
005c3e   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: USER_LCD_Data
                                           ;;  DESCRIPTION: sends a data value to the LCD display.<BR>
                                           ;;  On CLCDs: branch directly to USER_LCD_PrintChar<BR>
                                           ;;  On GLCDs: ignore this function!
                                           ;;  IN:  data which should be sent
                                           ;;  OUT: -
                                           ;;  NOTE: see the custom_lcd_example for further details
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Data
005c40   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: USER_LCD_Cmd
                                           ;;  DESCRIPTION: sends a command to the LCD display.<BR>
                                           ;;  On CLCDs: use this function to decode the HD44780 commands if required<BR>
                                           ;;  On GLCDs: ignore this function!
                                           ;;  IN:  command which should be sent
                                           ;;  OUT: -
                                           ;;  NOTE: see the custom_lcd_example for further details
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Cmd
005c42   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: USER_LCD_SpecialCharInit
                                           ;;  DESCRIPTION: see MIOS_CLCD_SpecialCharInit
                                           ;;  IN:  number of special character (0-7) in WREG
                                           ;;       pointer to special char pattern in TBLPTR (consists of 8
                                           ;;          entries for every character-line)
                                           ;;  OUT: TBLPTR has to be set to next table entry (TBLPTR+=8)
                                           ;;  NOTE: see the custom_lcd_example for further details
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_SpecialCharInit
005c44   0012     return	0                 	return
                                           	END
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.8.0 #5117 (Mar 23 2008) (MINGW32)
                                           ; This file was generated Sat Nov 21 19:30:06 2009
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f452
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _DisplayLED
                                           	global _ClearMatrix
                                           	global _DoStartupPattern
                                           	global _DoShutdownPattern
                                           	global _TestMatrix1
                                           	global _TestMatrix2
                                           	global _DoMichaelKnightPattern
                                           	global _app_flags
                                           	global _last_ain_pin
                                           	global _last_din_pin
                                           	global _last_dout_pin
                                           	global _test_mode
                                           	global _record_sysex
                                           	global _last_sysex
                                           	global _clock_ticks
                                           	global _clock_beats
                                           	global _clock_bars
                                           	global _Init
                                           	global _Tick
                                           	global _Timer
                                           	global _DISPLAY_Init
                                           	global _DISPLAY_Tick
                                           	global _MPROC_NotifyReceivedEvnt
                                           	global _MPROC_NotifyFoundEvent
                                           	global _MPROC_NotifyTimeout
                                           	global _MPROC_NotifyReceivedByte
                                           	global _SR_Service_Prepare
                                           	global _SR_Service_Finish
                                           	global _DIN_NotifyToggle
                                           	global _ENC_NotifyChange
                                           	global _AIN_NotifyChange
                                           	global _pot_event_map
                                           	global _button_event_map
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _MIOS_BOX_CFG0
                                           	extern _MIOS_BOX_CFG1
                                           	extern _MIOS_BOX_STAT
                                           	extern _MIOS_PARAMETER1
                                           	extern _MIOS_PARAMETER2
                                           	extern _MIOS_PARAMETER3
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _MIOS_MIDI_BeginStream
                                           	extern _MIOS_MIDI_EndStream
                                           	extern _MIOS_MIDI_MergerSet
                                           	extern _MIOS_MIDI_TxBufferPut
                                           	extern _MIOS_AIN_DeadbandSet
                                           	extern _MIOS_AIN_Muxed
                                           	extern _MIOS_AIN_NumberSet
                                           	extern _MIOS_AIN_Pin7bitGet
                                           	extern _MIOS_DIN_PinGet
                                           	extern _MIOS_DOUT_PinGet
                                           	extern _MIOS_DOUT_PinSet
                                           	extern _MIOS_DOUT_PinSet1
                                           	extern _MIOS_DOUT_SRSet
                                           	extern _MIOS_SRIO_NumberSet
                                           	extern _MIOS_SRIO_TS_SensitivitySet
                                           	extern _MIOS_SRIO_UpdateFrqSet
                                           	extern _MIOS_SRIO_DebounceSet
                                           	extern _MIOS_LCD_Clear
                                           	extern _MIOS_LCD_CursorSet
                                           	extern _MIOS_LCD_PrintBCD2
                                           	extern _MIOS_LCD_PrintBCD3
                                           	extern _MIOS_LCD_PrintBCD4
                                           	extern _MIOS_LCD_PrintChar
                                           	extern _MIOS_LCD_PrintCString
                                           	extern _MIOS_Delay
                                           	extern __moduint
                                           	extern __mulint
                                           	extern __divsint
                                           	extern _mios_enc_pin_table
                                           	extern _mios_mproc_event_table
                                           	extern _MIOS_MPROC_EVENT_TABLE
                                           	extern _MIOS_ENC_PIN_TABLE
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L equ 0xfe1 ;; normaly 0xfe9, changed by mios-gpasm
                                           FSR0H equ 0xfe2 ;; normaly 0xfea, changed by mios-gpasm
                                           FSR1L equ 0xfe9 ;; normaly 0xfe1, changed by mios-gpasm
                                           FSR2L	equ	0xfd9
                                           INDF0 equ 0xfe7 ;; normaly 0xfef, changed by mios-gpasm
                                           POSTDEC1 equ 0xfed ;; normaly 0xfe5, changed by mios-gpasm
                                           PREINC1 equ 0xfec ;; normaly 0xfe4, changed by mios-gpasm
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           	idata
                                           _matrix_1	db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                           	db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                           	db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                           	db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                           	db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                           	db	0x00, 0x00, 0x00, 0x00
                                           _matrix_2	db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                           	db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                           	db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                           	db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                           	db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                           	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers udata_ovr 0x0010 ;; normaly 0x0000, changed by mios-gpasm
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           
                                           udata_main_0	udata
                                           _SR_Service_Prepare_row_1_1	res	1
                                           
                                           udata_main_1	udata
                                           _DoStartupPattern_row_1_1	res	2
                                           
                                           udata_main_2	udata
                                           _DoStartupPattern_column_1_1	res	2
                                           
                                           udata_main_3	udata
                                           _DoStartupPattern_color_1_1	res	1
                                           
                                           udata_main_4	udata
                                           _DoShutdownPattern_row_1_1	res	2
                                           
                                           udata_main_5	udata
                                           _DoShutdownPattern_column_1_1	res	2
                                           
                                           udata_main_6	udata
                                           _TestMatrix1_row_1_1	res	2
                                           
                                           udata_main_7	udata
                                           _TestMatrix1_column_1_1	res	2
                                           
                                           udata_main_8	udata
                                           _TestMatrix2_row_1_1	res	2
                                           
                                           udata_main_9	udata
                                           _TestMatrix2_column_1_1	res	2
                                           
                                           udata_main_10	udata
                                           _DoMichaelKnightPattern_column_1_1	res	2
                                           
                                           udata_main_11	udata
                                           _test_mode	res	2
                                           
                                           udata_main_12	udata
                                           _record_sysex	res	2
                                           
                                           udata_main_13	udata
                                           _last_sysex	res	1
                                           
                                           udata_main_14	udata
                                           _clock_ticks	res	2
                                           
                                           udata_main_15	udata
                                           _clock_beats	res	2
                                           
                                           udata_main_16	udata
                                           _clock_bars	res	2
                                           
                                           udata_main_17	udata
                                           _app_flags	res	1
                                           
                                           udata_main_18	udata
                                           _last_ain_pin	res	1
                                           
                                           udata_main_19	udata
                                           _last_din_pin	res	1
                                           
                                           udata_main_20	udata
                                           _last_dout_pin	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__DoMichaelKnightPattern	code
                                           _DoMichaelKnightPattern:
                                           ;	.line	772; main.c	void DoMichaelKnightPattern(void) __wparam
003300   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
003302   ffed
003304   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
003306   ffed
003308   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
00330a   ffed
00330c   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
00330e   ffed
003310   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
003312   ffed
003314   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
003316   ffed
                                           ;	.line	775; main.c	ClearMatrix(1);
003318   0e00     movlw	0                  	MOVLW	0x00
00331a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00331c   0e01     movlw	0x1                	MOVLW	0x01
00331e   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
003320   f025
003322   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	776; main.c	ClearMatrix(2);
003324   0e00     movlw	0                  	MOVLW	0x00
003326   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003328   0e02     movlw	0x2                	MOVLW	0x02
00332a   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
00332c   f025
00332e   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	777; main.c	for (column = -2; column < 21; column++)
003330   0efe     movlw	0xfe               	MOVLW	0xfe
003332   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
003334   6f10     movwf	0x10, 0x1          	MOVWF	_DoMichaelKnightPattern_column_1_1, B
003336   0eff     movlw	0xff               	MOVLW	0xff
                                           ; removed redundant BANKSEL
003338   6f11     movwf	0x11, 0x1          	MOVWF	(_DoMichaelKnightPattern_column_1_1 + 1), B
                                           _00572_DS_:
00333a   0101     movlb	0x1                	BANKSEL	(_DoMichaelKnightPattern_column_1_1 + 1)
00333c   5111     movf	0x11, 0, 0x1        	MOVF	(_DoMichaelKnightPattern_column_1_1 + 1), W, B
00333e   0f80     addlw	0x80               	ADDLW	0x80
003340   0f80     addlw	0x80               	ADDLW	0x80
003342   e102     bnz	0x3348               	BNZ	_00582_DS_
003344   0e15     movlw	0x15               	MOVLW	0x15
                                           ; removed redundant BANKSEL
003346   5d10     subwf	0x10, 0, 0x1       	SUBWF	_DoMichaelKnightPattern_column_1_1, W, B
                                           _00582_DS_:
003348   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00334a   efad     goto	0x435a              	GOTO	_00575_DS_
00334c   f021
                                           ;	.line	779; main.c	MIOS_Delay(50);
00334e   0e32     movlw	0x32               	MOVLW	0x32
003350   ecce     call	0x2d9c, 0           	CALL	_MIOS_Delay
003352   f016
003354   0101     movlb	0x1                	BANKSEL	(_DoMichaelKnightPattern_column_1_1 + 1)
                                           ;	.line	780; main.c	switch (column)
003356   5111     movf	0x11, 0, 0x1        	MOVF	(_DoMichaelKnightPattern_column_1_1 + 1), W, B
003358   0f80     addlw	0x80               	ADDLW	0x80
00335a   0f81     addlw	0x81               	ADDLW	0x81
00335c   e102     bnz	0x3362               	BNZ	_00583_DS_
00335e   0eff     movlw	0xff               	MOVLW	0xff
                                           ; removed redundant BANKSEL
003360   5d10     subwf	0x10, 0, 0x1       	SUBWF	_DoMichaelKnightPattern_column_1_1, W, B
                                           _00583_DS_:
003362   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
003364   efa7     goto	0x434e              	GOTO	_00574_DS_
003366   f021
003368   0101     movlb	0x1                	BANKSEL	(_DoMichaelKnightPattern_column_1_1 + 1)
00336a   5111     movf	0x11, 0, 0x1        	MOVF	(_DoMichaelKnightPattern_column_1_1 + 1), W, B
00336c   0f80     addlw	0x80               	ADDLW	0x80
00336e   0f80     addlw	0x80               	ADDLW	0x80
003370   e102     bnz	0x3376               	BNZ	_00584_DS_
003372   0e12     movlw	0x12               	MOVLW	0x12
                                           ; removed redundant BANKSEL
003374   5d10     subwf	0x10, 0, 0x1       	SUBWF	_DoMichaelKnightPattern_column_1_1, W, B
                                           _00584_DS_:
003376   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003378   efa7     goto	0x434e              	GOTO	_00574_DS_
00337a   f021
00337c   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
00337e   2910     incf	0x10, 0, 0x1        	INCF	_DoMichaelKnightPattern_column_1_1, W, B
003380   6e10     movwf	0x10, 0            	MOVWF	r0x00
003382   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
003384   ffed
003386   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
003388   ffed
00338a   6a17     clrf	0x17, 0             	CLRF	r0x07
00338c   3410     rlcf	0x10, 0, 0          	RLCF	r0x00, W
00338e   3617     rlcf	0x17, 0x1, 0        	RLCF	r0x07, F
003390   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
003392   3617     rlcf	0x17, 0x1, 0        	RLCF	r0x07, F
003394   0bfc     andlw	0xfc               	ANDLW	0xfc
003396   6e16     movwf	0x16, 0            	MOVWF	r0x06
003398   0e00     movlw	0                  	MOVLW	UPPER(_00585_DS_)
00339a   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
00339c   0e33     movlw	0x33               	MOVLW	HIGH(_00585_DS_)
00339e   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0033a0   0eb8     movlw	0xb8               	MOVLW	LOW(_00585_DS_)
0033a2   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
0033a4   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
0033a6   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0033a8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0033aa   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0033ac   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
0033ae   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
0033b0   f017
0033b2   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
0033b4   f016
0033b6   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00585_DS_:
0033b8   ef02     goto	0x3404              	GOTO	_00551_DS_
0033ba   f01a
0033bc   ef23     goto	0x3446              	GOTO	_00552_DS_
0033be   f01a
0033c0   ef60     goto	0x34c0              	GOTO	_00553_DS_
0033c2   f01a
0033c4   efba     goto	0x3574              	GOTO	_00554_DS_
0033c6   f01a
0033c8   ef32     goto	0x3664              	GOTO	_00555_DS_
0033ca   f01b
0033cc   efaa     goto	0x3754              	GOTO	_00556_DS_
0033ce   f01b
0033d0   ef22     goto	0x3844              	GOTO	_00557_DS_
0033d2   f01c
0033d4   ef9a     goto	0x3934              	GOTO	_00558_DS_
0033d6   f01c
0033d8   ef12     goto	0x3a24              	GOTO	_00559_DS_
0033da   f01d
0033dc   ef8b     goto	0x3b16              	GOTO	_00560_DS_
0033de   f01d
0033e0   ef06     goto	0x3c0c              	GOTO	_00561_DS_
0033e2   f01e
0033e4   ef82     goto	0x3d04              	GOTO	_00562_DS_
0033e6   f01e
0033e8   effe     goto	0x3dfc              	GOTO	_00563_DS_
0033ea   f01e
0033ec   ef7a     goto	0x3ef4              	GOTO	_00564_DS_
0033ee   f01f
0033f0   eff5     goto	0x3fea              	GOTO	_00565_DS_
0033f2   f01f
0033f4   ef70     goto	0x40e0              	GOTO	_00566_DS_
0033f6   f020
0033f8   efeb     goto	0x41d6              	GOTO	_00567_DS_
0033fa   f020
0033fc   ef48     goto	0x4290              	GOTO	_00568_DS_
0033fe   f021
003400   ef87     goto	0x430e              	GOTO	_00569_DS_
003402   f021
                                           _00551_DS_:
003404   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	783; main.c	matrix_2[4][column+1] 		= _COLOR_WHITE;
003406   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
003408   6e10     movwf	0x10, 0            	MOVWF	r0x00
00340a   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
00340c   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
00340e   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003410   6e11     movwf	0x11, 0            	MOVWF	r0x01
003412   6a12     clrf	0x12, 0             	CLRF	r0x02
003414   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
003416   6812     setf	0x12, 0             	SETF	r0x02
003418   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
00341a   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
00341c   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
00341e   ffe1
003420   c012     movff	0x12, 0xfe2        	MOVFF	r0x02, FSR0H
003422   ffe2
003424   0e70     movlw	0x70               	MOVLW	0x70
003426   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	784; main.c	matrix_2[6][column+1] 		= _COLOR_WHITE;
003428   6a11     clrf	0x11, 0             	CLRF	r0x01
00342a   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
00342c   6811     setf	0x11, 0             	SETF	r0x01
00342e   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
003430   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003432   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003434   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003436   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003438   ffe1
00343a   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
00343c   ffe2
00343e   0e70     movlw	0x70               	MOVLW	0x70
003440   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	785; main.c	break;
003442   efa7     goto	0x434e              	GOTO	_00574_DS_
003444   f021
                                           _00552_DS_:
003446   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	787; main.c	matrix_2[4][column+1] 		= _COLOR_WHITE;
003448   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
00344a   6e10     movwf	0x10, 0            	MOVWF	r0x00
00344c   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
00344e   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003450   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003452   6e11     movwf	0x11, 0            	MOVWF	r0x01
003454   6a12     clrf	0x12, 0             	CLRF	r0x02
003456   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
003458   6812     setf	0x12, 0             	SETF	r0x02
00345a   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
00345c   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
00345e   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
003460   ffe1
003462   c012     movff	0x12, 0xfe2        	MOVFF	r0x02, FSR0H
003464   ffe2
003466   0e70     movlw	0x70               	MOVLW	0x70
003468   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	788; main.c	matrix_2[4][column] 		= _COLOR_CYAN;
00346a   c110     movff	0x110, 0x11        	MOVFF	_DoMichaelKnightPattern_column_1_1, r0x01
00346c   f011
00346e   c111     movff	0x111, 0x12        	MOVFF	(_DoMichaelKnightPattern_column_1_1 + 1), r0x02
003470   f012
003472   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003474   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
003476   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
003478   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
00347a   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
00347c   ffe1
00347e   c012     movff	0x12, 0xfe2        	MOVFF	r0x02, FSR0H
003480   ffe2
003482   0e60     movlw	0x60               	MOVLW	0x60
003484   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	789; main.c	matrix_2[6][column+1] 		= _COLOR_WHITE;
003486   6a11     clrf	0x11, 0             	CLRF	r0x01
003488   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
00348a   6811     setf	0x11, 0             	SETF	r0x01
00348c   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
00348e   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003490   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003492   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003494   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003496   ffe1
003498   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
00349a   ffe2
00349c   0e70     movlw	0x70               	MOVLW	0x70
00349e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	790; main.c	matrix_2[6][column] 		= _COLOR_CYAN;
0034a0   c110     movff	0x110, 0x10        	MOVFF	_DoMichaelKnightPattern_column_1_1, r0x00
0034a2   f010
0034a4   c111     movff	0x111, 0x11        	MOVFF	(_DoMichaelKnightPattern_column_1_1 + 1), r0x01
0034a6   f011
0034a8   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
0034aa   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
0034ac   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
0034ae   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
0034b0   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
0034b2   ffe1
0034b4   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
0034b6   ffe2
0034b8   0e60     movlw	0x60               	MOVLW	0x60
0034ba   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	791; main.c	break;
0034bc   efa7     goto	0x434e              	GOTO	_00574_DS_
0034be   f021
                                           _00553_DS_:
0034c0   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	793; main.c	matrix_2[4][column+1] 		= _COLOR_WHITE;
0034c2   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
0034c4   6e10     movwf	0x10, 0            	MOVWF	r0x00
0034c6   2810     incf	0x10, 0, 0          	INCF	r0x00, W
0034c8   6e11     movwf	0x11, 0            	MOVWF	r0x01
0034ca   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
0034cc   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
0034ce   6e12     movwf	0x12, 0            	MOVWF	r0x02
0034d0   6a13     clrf	0x13, 0             	CLRF	r0x03
0034d2   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
0034d4   6813     setf	0x13, 0             	SETF	r0x03
0034d6   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
0034d8   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0034da   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
0034dc   ffe1
0034de   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0034e0   ffe2
0034e2   0e70     movlw	0x70               	MOVLW	0x70
0034e4   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	794; main.c	matrix_2[4][column] 		= _COLOR_CYAN;
0034e6   c110     movff	0x110, 0x12        	MOVFF	_DoMichaelKnightPattern_column_1_1, r0x02
0034e8   f012
0034ea   c111     movff	0x111, 0x13        	MOVFF	(_DoMichaelKnightPattern_column_1_1 + 1), r0x03
0034ec   f013
0034ee   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
0034f0   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
0034f2   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
0034f4   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0034f6   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
0034f8   ffe1
0034fa   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0034fc   ffe2
0034fe   0e60     movlw	0x60               	MOVLW	0x60
003500   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	795; main.c	matrix_2[4][column-1] 		= _COLOR_BLUE;
003502   0610     decf	0x10, 0x1, 0        	DECF	r0x00, F
003504   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003506   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003508   6e12     movwf	0x12, 0            	MOVWF	r0x02
00350a   6a13     clrf	0x13, 0             	CLRF	r0x03
00350c   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
00350e   6813     setf	0x13, 0             	SETF	r0x03
003510   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
003512   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003514   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003516   ffe1
003518   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
00351a   ffe2
00351c   0e40     movlw	0x40               	MOVLW	0x40
00351e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	796; main.c	matrix_2[6][column+1] 		= _COLOR_WHITE;
003520   6a12     clrf	0x12, 0             	CLRF	r0x02
003522   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003524   6812     setf	0x12, 0             	SETF	r0x02
003526   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
003528   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
00352a   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
00352c   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
00352e   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
003530   ffe1
003532   c012     movff	0x12, 0xfe2        	MOVFF	r0x02, FSR0H
003534   ffe2
003536   0e70     movlw	0x70               	MOVLW	0x70
003538   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	797; main.c	matrix_2[6][column] 		= _COLOR_CYAN;
00353a   c110     movff	0x110, 0x11        	MOVFF	_DoMichaelKnightPattern_column_1_1, r0x01
00353c   f011
00353e   c111     movff	0x111, 0x12        	MOVFF	(_DoMichaelKnightPattern_column_1_1 + 1), r0x02
003540   f012
003542   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
003544   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
003546   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003548   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
00354a   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
00354c   ffe1
00354e   c012     movff	0x12, 0xfe2        	MOVFF	r0x02, FSR0H
003550   ffe2
003552   0e60     movlw	0x60               	MOVLW	0x60
003554   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	798; main.c	matrix_2[6][column-1] 		= _COLOR_BLUE;
003556   6a11     clrf	0x11, 0             	CLRF	r0x01
003558   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
00355a   6811     setf	0x11, 0             	SETF	r0x01
00355c   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
00355e   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003560   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003562   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003564   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003566   ffe1
003568   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
00356a   ffe2
00356c   0e40     movlw	0x40               	MOVLW	0x40
00356e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	799; main.c	break;
003570   efa7     goto	0x434e              	GOTO	_00574_DS_
003572   f021
                                           _00554_DS_:
003574   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	801; main.c	matrix_2[4][column+1] 		= _COLOR_WHITE;
003576   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
003578   6e10     movwf	0x10, 0            	MOVWF	r0x00
00357a   2810     incf	0x10, 0, 0          	INCF	r0x00, W
00357c   6e11     movwf	0x11, 0            	MOVWF	r0x01
00357e   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003580   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003582   6e12     movwf	0x12, 0            	MOVWF	r0x02
003584   6a13     clrf	0x13, 0             	CLRF	r0x03
003586   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003588   6813     setf	0x13, 0             	SETF	r0x03
00358a   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
00358c   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
00358e   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003590   ffe1
003592   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003594   ffe2
003596   0e70     movlw	0x70               	MOVLW	0x70
003598   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	802; main.c	matrix_2[4][column] 		= _COLOR_CYAN;
00359a   c110     movff	0x110, 0x12        	MOVFF	_DoMichaelKnightPattern_column_1_1, r0x02
00359c   f012
00359e   c111     movff	0x111, 0x13        	MOVFF	(_DoMichaelKnightPattern_column_1_1 + 1), r0x03
0035a0   f013
0035a2   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
0035a4   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
0035a6   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
0035a8   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0035aa   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
0035ac   ffe1
0035ae   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0035b0   ffe2
0035b2   0e60     movlw	0x60               	MOVLW	0x60
0035b4   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	803; main.c	matrix_2[4][column-1] 		= _COLOR_BLUE;
0035b6   0410     decf	0x10, 0, 0          	DECF	r0x00, W
0035b8   6e12     movwf	0x12, 0            	MOVWF	r0x02
0035ba   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
0035bc   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
0035be   6e13     movwf	0x13, 0            	MOVWF	r0x03
0035c0   6a14     clrf	0x14, 0             	CLRF	r0x04
0035c2   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
0035c4   6814     setf	0x14, 0             	SETF	r0x04
0035c6   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
0035c8   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
0035ca   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
0035cc   ffe1
0035ce   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
0035d0   ffe2
0035d2   0e40     movlw	0x40               	MOVLW	0x40
0035d4   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	804; main.c	matrix_2[4][column-2] 		= _COLOR_OFF;
0035d6   0efe     movlw	0xfe               	MOVLW	0xfe
0035d8   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
0035da   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
0035dc   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
0035de   6e13     movwf	0x13, 0            	MOVWF	r0x03
0035e0   6a14     clrf	0x14, 0             	CLRF	r0x04
0035e2   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
0035e4   6814     setf	0x14, 0             	SETF	r0x04
0035e6   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
0035e8   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
0035ea   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
0035ec   ffe1
0035ee   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
0035f0   ffe2
0035f2   0e00     movlw	0                  	MOVLW	0x00
0035f4   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	805; main.c	matrix_2[6][column+1] 		= _COLOR_WHITE;
0035f6   6a13     clrf	0x13, 0             	CLRF	r0x03
0035f8   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
0035fa   6813     setf	0x13, 0             	SETF	r0x03
0035fc   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
0035fe   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
003600   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003602   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003604   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
003606   ffe1
003608   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
00360a   ffe2
00360c   0e70     movlw	0x70               	MOVLW	0x70
00360e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	806; main.c	matrix_2[6][column] 		= _COLOR_CYAN;
003610   c110     movff	0x110, 0x11        	MOVFF	_DoMichaelKnightPattern_column_1_1, r0x01
003612   f011
003614   c111     movff	0x111, 0x13        	MOVFF	(_DoMichaelKnightPattern_column_1_1 + 1), r0x03
003616   f013
003618   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
00361a   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
00361c   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
00361e   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003620   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
003622   ffe1
003624   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003626   ffe2
003628   0e60     movlw	0x60               	MOVLW	0x60
00362a   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	807; main.c	matrix_2[6][column-1] 		= _COLOR_BLUE;
00362c   6a11     clrf	0x11, 0             	CLRF	r0x01
00362e   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003630   6811     setf	0x11, 0             	SETF	r0x01
003632   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
003634   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003636   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003638   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
00363a   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
00363c   ffe1
00363e   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003640   ffe2
003642   0e40     movlw	0x40               	MOVLW	0x40
003644   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	808; main.c	matrix_2[6][column-2] 		= _COLOR_OFF;
003646   6a11     clrf	0x11, 0             	CLRF	r0x01
003648   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
00364a   6811     setf	0x11, 0             	SETF	r0x01
00364c   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
00364e   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003650   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003652   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003654   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003656   ffe1
003658   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
00365a   ffe2
00365c   0e00     movlw	0                  	MOVLW	0x00
00365e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	809; main.c	break;
003660   efa7     goto	0x434e              	GOTO	_00574_DS_
003662   f021
                                           _00555_DS_:
003664   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	811; main.c	matrix_2[4][column+1] 		= _COLOR_WHITE;
003666   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
003668   6e10     movwf	0x10, 0            	MOVWF	r0x00
00366a   2810     incf	0x10, 0, 0          	INCF	r0x00, W
00366c   6e11     movwf	0x11, 0            	MOVWF	r0x01
00366e   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003670   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003672   6e12     movwf	0x12, 0            	MOVWF	r0x02
003674   6a13     clrf	0x13, 0             	CLRF	r0x03
003676   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003678   6813     setf	0x13, 0             	SETF	r0x03
00367a   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
00367c   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
00367e   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003680   ffe1
003682   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003684   ffe2
003686   0e70     movlw	0x70               	MOVLW	0x70
003688   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	812; main.c	matrix_2[4][column] 		= _COLOR_CYAN;
00368a   c110     movff	0x110, 0x12        	MOVFF	_DoMichaelKnightPattern_column_1_1, r0x02
00368c   f012
00368e   c111     movff	0x111, 0x13        	MOVFF	(_DoMichaelKnightPattern_column_1_1 + 1), r0x03
003690   f013
003692   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003694   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003696   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
003698   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
00369a   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
00369c   ffe1
00369e   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0036a0   ffe2
0036a2   0e60     movlw	0x60               	MOVLW	0x60
0036a4   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	813; main.c	matrix_2[4][column-1] 		= _COLOR_BLUE;
0036a6   0410     decf	0x10, 0, 0          	DECF	r0x00, W
0036a8   6e12     movwf	0x12, 0            	MOVWF	r0x02
0036aa   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
0036ac   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
0036ae   6e13     movwf	0x13, 0            	MOVWF	r0x03
0036b0   6a14     clrf	0x14, 0             	CLRF	r0x04
0036b2   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
0036b4   6814     setf	0x14, 0             	SETF	r0x04
0036b6   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
0036b8   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
0036ba   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
0036bc   ffe1
0036be   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
0036c0   ffe2
0036c2   0e40     movlw	0x40               	MOVLW	0x40
0036c4   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	814; main.c	matrix_2[4][column-2] 		= _COLOR_OFF;
0036c6   0efe     movlw	0xfe               	MOVLW	0xfe
0036c8   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
0036ca   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
0036cc   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
0036ce   6e13     movwf	0x13, 0            	MOVWF	r0x03
0036d0   6a14     clrf	0x14, 0             	CLRF	r0x04
0036d2   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
0036d4   6814     setf	0x14, 0             	SETF	r0x04
0036d6   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
0036d8   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
0036da   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
0036dc   ffe1
0036de   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
0036e0   ffe2
0036e2   0e00     movlw	0                  	MOVLW	0x00
0036e4   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	815; main.c	matrix_2[6][column+1] 		= _COLOR_WHITE;
0036e6   6a13     clrf	0x13, 0             	CLRF	r0x03
0036e8   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
0036ea   6813     setf	0x13, 0             	SETF	r0x03
0036ec   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
0036ee   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
0036f0   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
0036f2   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0036f4   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
0036f6   ffe1
0036f8   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0036fa   ffe2
0036fc   0e70     movlw	0x70               	MOVLW	0x70
0036fe   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	816; main.c	matrix_2[6][column] 		= _COLOR_CYAN;
003700   c110     movff	0x110, 0x11        	MOVFF	_DoMichaelKnightPattern_column_1_1, r0x01
003702   f011
003704   c111     movff	0x111, 0x13        	MOVFF	(_DoMichaelKnightPattern_column_1_1 + 1), r0x03
003706   f013
003708   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
00370a   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
00370c   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
00370e   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003710   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
003712   ffe1
003714   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003716   ffe2
003718   0e60     movlw	0x60               	MOVLW	0x60
00371a   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	817; main.c	matrix_2[6][column-1] 		= _COLOR_BLUE;
00371c   6a11     clrf	0x11, 0             	CLRF	r0x01
00371e   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003720   6811     setf	0x11, 0             	SETF	r0x01
003722   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
003724   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003726   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003728   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
00372a   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
00372c   ffe1
00372e   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003730   ffe2
003732   0e40     movlw	0x40               	MOVLW	0x40
003734   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	818; main.c	matrix_2[6][column-2] 		= _COLOR_OFF;
003736   6a11     clrf	0x11, 0             	CLRF	r0x01
003738   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
00373a   6811     setf	0x11, 0             	SETF	r0x01
00373c   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
00373e   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003740   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003742   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003744   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003746   ffe1
003748   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
00374a   ffe2
00374c   0e00     movlw	0                  	MOVLW	0x00
00374e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	819; main.c	break;
003750   efa7     goto	0x434e              	GOTO	_00574_DS_
003752   f021
                                           _00556_DS_:
003754   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	821; main.c	matrix_2[4][column+1] 		= _COLOR_WHITE;
003756   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
003758   6e10     movwf	0x10, 0            	MOVWF	r0x00
00375a   2810     incf	0x10, 0, 0          	INCF	r0x00, W
00375c   6e11     movwf	0x11, 0            	MOVWF	r0x01
00375e   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003760   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003762   6e12     movwf	0x12, 0            	MOVWF	r0x02
003764   6a13     clrf	0x13, 0             	CLRF	r0x03
003766   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003768   6813     setf	0x13, 0             	SETF	r0x03
00376a   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
00376c   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
00376e   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003770   ffe1
003772   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003774   ffe2
003776   0e70     movlw	0x70               	MOVLW	0x70
003778   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	822; main.c	matrix_2[4][column] 		= _COLOR_CYAN;
00377a   c110     movff	0x110, 0x12        	MOVFF	_DoMichaelKnightPattern_column_1_1, r0x02
00377c   f012
00377e   c111     movff	0x111, 0x13        	MOVFF	(_DoMichaelKnightPattern_column_1_1 + 1), r0x03
003780   f013
003782   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003784   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003786   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
003788   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
00378a   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
00378c   ffe1
00378e   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003790   ffe2
003792   0e60     movlw	0x60               	MOVLW	0x60
003794   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	823; main.c	matrix_2[4][column-1] 		= _COLOR_BLUE;
003796   0410     decf	0x10, 0, 0          	DECF	r0x00, W
003798   6e12     movwf	0x12, 0            	MOVWF	r0x02
00379a   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
00379c   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
00379e   6e13     movwf	0x13, 0            	MOVWF	r0x03
0037a0   6a14     clrf	0x14, 0             	CLRF	r0x04
0037a2   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
0037a4   6814     setf	0x14, 0             	SETF	r0x04
0037a6   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
0037a8   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
0037aa   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
0037ac   ffe1
0037ae   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
0037b0   ffe2
0037b2   0e40     movlw	0x40               	MOVLW	0x40
0037b4   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	824; main.c	matrix_2[4][column-2] 		= _COLOR_OFF;
0037b6   0efe     movlw	0xfe               	MOVLW	0xfe
0037b8   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
0037ba   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
0037bc   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
0037be   6e13     movwf	0x13, 0            	MOVWF	r0x03
0037c0   6a14     clrf	0x14, 0             	CLRF	r0x04
0037c2   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
0037c4   6814     setf	0x14, 0             	SETF	r0x04
0037c6   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
0037c8   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
0037ca   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
0037cc   ffe1
0037ce   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
0037d0   ffe2
0037d2   0e00     movlw	0                  	MOVLW	0x00
0037d4   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	825; main.c	matrix_2[6][column+1] 		= _COLOR_WHITE;
0037d6   6a13     clrf	0x13, 0             	CLRF	r0x03
0037d8   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
0037da   6813     setf	0x13, 0             	SETF	r0x03
0037dc   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
0037de   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
0037e0   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
0037e2   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0037e4   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
0037e6   ffe1
0037e8   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0037ea   ffe2
0037ec   0e70     movlw	0x70               	MOVLW	0x70
0037ee   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	826; main.c	matrix_2[6][column] 		= _COLOR_CYAN;
0037f0   c110     movff	0x110, 0x11        	MOVFF	_DoMichaelKnightPattern_column_1_1, r0x01
0037f2   f011
0037f4   c111     movff	0x111, 0x13        	MOVFF	(_DoMichaelKnightPattern_column_1_1 + 1), r0x03
0037f6   f013
0037f8   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
0037fa   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
0037fc   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
0037fe   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003800   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
003802   ffe1
003804   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003806   ffe2
003808   0e60     movlw	0x60               	MOVLW	0x60
00380a   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	827; main.c	matrix_2[6][column-1] 		= _COLOR_BLUE;
00380c   6a11     clrf	0x11, 0             	CLRF	r0x01
00380e   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003810   6811     setf	0x11, 0             	SETF	r0x01
003812   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
003814   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003816   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003818   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
00381a   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
00381c   ffe1
00381e   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003820   ffe2
003822   0e40     movlw	0x40               	MOVLW	0x40
003824   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	828; main.c	matrix_2[6][column-2] 		= _COLOR_OFF;
003826   6a11     clrf	0x11, 0             	CLRF	r0x01
003828   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
00382a   6811     setf	0x11, 0             	SETF	r0x01
00382c   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
00382e   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003830   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003832   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003834   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003836   ffe1
003838   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
00383a   ffe2
00383c   0e00     movlw	0                  	MOVLW	0x00
00383e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	829; main.c	break;
003840   efa7     goto	0x434e              	GOTO	_00574_DS_
003842   f021
                                           _00557_DS_:
003844   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	831; main.c	matrix_2[4][column+1] 		= _COLOR_WHITE;
003846   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
003848   6e10     movwf	0x10, 0            	MOVWF	r0x00
00384a   2810     incf	0x10, 0, 0          	INCF	r0x00, W
00384c   6e11     movwf	0x11, 0            	MOVWF	r0x01
00384e   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003850   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003852   6e12     movwf	0x12, 0            	MOVWF	r0x02
003854   6a13     clrf	0x13, 0             	CLRF	r0x03
003856   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003858   6813     setf	0x13, 0             	SETF	r0x03
00385a   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
00385c   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
00385e   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003860   ffe1
003862   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003864   ffe2
003866   0e70     movlw	0x70               	MOVLW	0x70
003868   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	832; main.c	matrix_2[4][column] 		= _COLOR_CYAN;
00386a   c110     movff	0x110, 0x12        	MOVFF	_DoMichaelKnightPattern_column_1_1, r0x02
00386c   f012
00386e   c111     movff	0x111, 0x13        	MOVFF	(_DoMichaelKnightPattern_column_1_1 + 1), r0x03
003870   f013
003872   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003874   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003876   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
003878   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
00387a   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
00387c   ffe1
00387e   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003880   ffe2
003882   0e60     movlw	0x60               	MOVLW	0x60
003884   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	833; main.c	matrix_2[4][column-1] 		= _COLOR_BLUE;
003886   0410     decf	0x10, 0, 0          	DECF	r0x00, W
003888   6e12     movwf	0x12, 0            	MOVWF	r0x02
00388a   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
00388c   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
00388e   6e13     movwf	0x13, 0            	MOVWF	r0x03
003890   6a14     clrf	0x14, 0             	CLRF	r0x04
003892   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003894   6814     setf	0x14, 0             	SETF	r0x04
003896   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
003898   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
00389a   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
00389c   ffe1
00389e   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
0038a0   ffe2
0038a2   0e40     movlw	0x40               	MOVLW	0x40
0038a4   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	834; main.c	matrix_2[4][column-2] 		= _COLOR_OFF;
0038a6   0efe     movlw	0xfe               	MOVLW	0xfe
0038a8   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
0038aa   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
0038ac   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
0038ae   6e13     movwf	0x13, 0            	MOVWF	r0x03
0038b0   6a14     clrf	0x14, 0             	CLRF	r0x04
0038b2   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
0038b4   6814     setf	0x14, 0             	SETF	r0x04
0038b6   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
0038b8   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
0038ba   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
0038bc   ffe1
0038be   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
0038c0   ffe2
0038c2   0e00     movlw	0                  	MOVLW	0x00
0038c4   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	835; main.c	matrix_2[6][column+1] 		= _COLOR_WHITE;
0038c6   6a13     clrf	0x13, 0             	CLRF	r0x03
0038c8   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
0038ca   6813     setf	0x13, 0             	SETF	r0x03
0038cc   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
0038ce   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
0038d0   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
0038d2   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0038d4   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
0038d6   ffe1
0038d8   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0038da   ffe2
0038dc   0e70     movlw	0x70               	MOVLW	0x70
0038de   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	836; main.c	matrix_2[6][column] 		= _COLOR_CYAN;
0038e0   c110     movff	0x110, 0x11        	MOVFF	_DoMichaelKnightPattern_column_1_1, r0x01
0038e2   f011
0038e4   c111     movff	0x111, 0x13        	MOVFF	(_DoMichaelKnightPattern_column_1_1 + 1), r0x03
0038e6   f013
0038e8   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
0038ea   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
0038ec   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
0038ee   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0038f0   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
0038f2   ffe1
0038f4   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0038f6   ffe2
0038f8   0e60     movlw	0x60               	MOVLW	0x60
0038fa   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	837; main.c	matrix_2[6][column-1] 		= _COLOR_BLUE;
0038fc   6a11     clrf	0x11, 0             	CLRF	r0x01
0038fe   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003900   6811     setf	0x11, 0             	SETF	r0x01
003902   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
003904   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003906   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003908   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
00390a   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
00390c   ffe1
00390e   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003910   ffe2
003912   0e40     movlw	0x40               	MOVLW	0x40
003914   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	838; main.c	matrix_2[6][column-2] 		= _COLOR_OFF;
003916   6a11     clrf	0x11, 0             	CLRF	r0x01
003918   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
00391a   6811     setf	0x11, 0             	SETF	r0x01
00391c   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
00391e   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003920   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003922   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003924   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003926   ffe1
003928   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
00392a   ffe2
00392c   0e00     movlw	0                  	MOVLW	0x00
00392e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	839; main.c	break;
003930   efa7     goto	0x434e              	GOTO	_00574_DS_
003932   f021
                                           _00558_DS_:
003934   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	841; main.c	matrix_2[4][column+1] 		= _COLOR_WHITE;
003936   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
003938   6e10     movwf	0x10, 0            	MOVWF	r0x00
00393a   2810     incf	0x10, 0, 0          	INCF	r0x00, W
00393c   6e11     movwf	0x11, 0            	MOVWF	r0x01
00393e   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003940   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003942   6e12     movwf	0x12, 0            	MOVWF	r0x02
003944   6a13     clrf	0x13, 0             	CLRF	r0x03
003946   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003948   6813     setf	0x13, 0             	SETF	r0x03
00394a   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
00394c   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
00394e   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003950   ffe1
003952   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003954   ffe2
003956   0e70     movlw	0x70               	MOVLW	0x70
003958   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	842; main.c	matrix_2[4][column] 		= _COLOR_CYAN;
00395a   c110     movff	0x110, 0x12        	MOVFF	_DoMichaelKnightPattern_column_1_1, r0x02
00395c   f012
00395e   c111     movff	0x111, 0x13        	MOVFF	(_DoMichaelKnightPattern_column_1_1 + 1), r0x03
003960   f013
003962   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003964   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003966   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
003968   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
00396a   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
00396c   ffe1
00396e   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003970   ffe2
003972   0e60     movlw	0x60               	MOVLW	0x60
003974   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	843; main.c	matrix_2[4][column-1] 		= _COLOR_BLUE;
003976   0410     decf	0x10, 0, 0          	DECF	r0x00, W
003978   6e12     movwf	0x12, 0            	MOVWF	r0x02
00397a   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
00397c   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
00397e   6e13     movwf	0x13, 0            	MOVWF	r0x03
003980   6a14     clrf	0x14, 0             	CLRF	r0x04
003982   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003984   6814     setf	0x14, 0             	SETF	r0x04
003986   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
003988   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
00398a   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
00398c   ffe1
00398e   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003990   ffe2
003992   0e40     movlw	0x40               	MOVLW	0x40
003994   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	844; main.c	matrix_2[4][column-2] 		= _COLOR_OFF;
003996   0efe     movlw	0xfe               	MOVLW	0xfe
003998   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
00399a   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
00399c   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
00399e   6e13     movwf	0x13, 0            	MOVWF	r0x03
0039a0   6a14     clrf	0x14, 0             	CLRF	r0x04
0039a2   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
0039a4   6814     setf	0x14, 0             	SETF	r0x04
0039a6   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
0039a8   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
0039aa   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
0039ac   ffe1
0039ae   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
0039b0   ffe2
0039b2   0e00     movlw	0                  	MOVLW	0x00
0039b4   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	845; main.c	matrix_2[6][column+1] 		= _COLOR_WHITE;
0039b6   6a13     clrf	0x13, 0             	CLRF	r0x03
0039b8   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
0039ba   6813     setf	0x13, 0             	SETF	r0x03
0039bc   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
0039be   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
0039c0   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
0039c2   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0039c4   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
0039c6   ffe1
0039c8   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0039ca   ffe2
0039cc   0e70     movlw	0x70               	MOVLW	0x70
0039ce   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	846; main.c	matrix_2[6][column] 		= _COLOR_CYAN;
0039d0   c110     movff	0x110, 0x11        	MOVFF	_DoMichaelKnightPattern_column_1_1, r0x01
0039d2   f011
0039d4   c111     movff	0x111, 0x13        	MOVFF	(_DoMichaelKnightPattern_column_1_1 + 1), r0x03
0039d6   f013
0039d8   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
0039da   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
0039dc   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
0039de   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0039e0   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
0039e2   ffe1
0039e4   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0039e6   ffe2
0039e8   0e60     movlw	0x60               	MOVLW	0x60
0039ea   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	847; main.c	matrix_2[6][column-1] 		= _COLOR_BLUE;
0039ec   6a11     clrf	0x11, 0             	CLRF	r0x01
0039ee   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
0039f0   6811     setf	0x11, 0             	SETF	r0x01
0039f2   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
0039f4   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
0039f6   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
0039f8   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
0039fa   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
0039fc   ffe1
0039fe   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003a00   ffe2
003a02   0e40     movlw	0x40               	MOVLW	0x40
003a04   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	848; main.c	matrix_2[6][column-2] 		= _COLOR_OFF;
003a06   6a11     clrf	0x11, 0             	CLRF	r0x01
003a08   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
003a0a   6811     setf	0x11, 0             	SETF	r0x01
003a0c   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
003a0e   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003a10   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003a12   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003a14   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003a16   ffe1
003a18   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003a1a   ffe2
003a1c   0e00     movlw	0                  	MOVLW	0x00
003a1e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	849; main.c	break;
003a20   efa7     goto	0x434e              	GOTO	_00574_DS_
003a22   f021
                                           _00559_DS_:
003a24   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	851; main.c	matrix_2[5][column-8+1]	= _COLOR_WHITE;
003a26   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
003a28   6e10     movwf	0x10, 0            	MOVWF	r0x00
003a2a   0ef9     movlw	0xf9               	MOVLW	0xf9
003a2c   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003a2e   6e11     movwf	0x11, 0            	MOVWF	r0x01
003a30   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003a32   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003a34   6e12     movwf	0x12, 0            	MOVWF	r0x02
003a36   6a13     clrf	0x13, 0             	CLRF	r0x03
003a38   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003a3a   6813     setf	0x13, 0             	SETF	r0x03
003a3c   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003a3e   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003a40   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003a42   ffe1
003a44   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003a46   ffe2
003a48   0e70     movlw	0x70               	MOVLW	0x70
003a4a   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	852; main.c	matrix_2[4][column] 		= _COLOR_CYAN;
003a4c   c110     movff	0x110, 0x12        	MOVFF	_DoMichaelKnightPattern_column_1_1, r0x02
003a4e   f012
003a50   c111     movff	0x111, 0x13        	MOVFF	(_DoMichaelKnightPattern_column_1_1 + 1), r0x03
003a52   f013
003a54   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003a56   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003a58   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
003a5a   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003a5c   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003a5e   ffe1
003a60   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003a62   ffe2
003a64   0e60     movlw	0x60               	MOVLW	0x60
003a66   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	853; main.c	matrix_2[4][column-1] 		= _COLOR_BLUE;
003a68   0410     decf	0x10, 0, 0          	DECF	r0x00, W
003a6a   6e12     movwf	0x12, 0            	MOVWF	r0x02
003a6c   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003a6e   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
003a70   6e13     movwf	0x13, 0            	MOVWF	r0x03
003a72   6a14     clrf	0x14, 0             	CLRF	r0x04
003a74   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003a76   6814     setf	0x14, 0             	SETF	r0x04
003a78   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
003a7a   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
003a7c   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003a7e   ffe1
003a80   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003a82   ffe2
003a84   0e40     movlw	0x40               	MOVLW	0x40
003a86   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	854; main.c	matrix_2[4][column-2] 		= _COLOR_OFF;
003a88   0efe     movlw	0xfe               	MOVLW	0xfe
003a8a   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003a8c   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003a8e   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003a90   6e13     movwf	0x13, 0            	MOVWF	r0x03
003a92   6a14     clrf	0x14, 0             	CLRF	r0x04
003a94   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
003a96   6814     setf	0x14, 0             	SETF	r0x04
003a98   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
003a9a   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
003a9c   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003a9e   ffe1
003aa0   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003aa2   ffe2
003aa4   0e00     movlw	0                  	MOVLW	0x00
003aa6   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	855; main.c	matrix_2[7][column-8+1]	= _COLOR_WHITE;
003aa8   6a13     clrf	0x13, 0             	CLRF	r0x03
003aaa   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003aac   6813     setf	0x13, 0             	SETF	r0x03
003aae   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003ab0   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
003ab2   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003ab4   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003ab6   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
003ab8   ffe1
003aba   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003abc   ffe2
003abe   0e70     movlw	0x70               	MOVLW	0x70
003ac0   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	856; main.c	matrix_2[6][column] 		= _COLOR_CYAN;
003ac2   c110     movff	0x110, 0x11        	MOVFF	_DoMichaelKnightPattern_column_1_1, r0x01
003ac4   f011
003ac6   c111     movff	0x111, 0x13        	MOVFF	(_DoMichaelKnightPattern_column_1_1 + 1), r0x03
003ac8   f013
003aca   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
003acc   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
003ace   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003ad0   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003ad2   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
003ad4   ffe1
003ad6   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003ad8   ffe2
003ada   0e60     movlw	0x60               	MOVLW	0x60
003adc   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	857; main.c	matrix_2[6][column-1] 		= _COLOR_BLUE;
003ade   6a11     clrf	0x11, 0             	CLRF	r0x01
003ae0   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003ae2   6811     setf	0x11, 0             	SETF	r0x01
003ae4   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
003ae6   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003ae8   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003aea   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003aec   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003aee   ffe1
003af0   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003af2   ffe2
003af4   0e40     movlw	0x40               	MOVLW	0x40
003af6   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	858; main.c	matrix_2[6][column-2] 		= _COLOR_OFF;
003af8   6a11     clrf	0x11, 0             	CLRF	r0x01
003afa   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
003afc   6811     setf	0x11, 0             	SETF	r0x01
003afe   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
003b00   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003b02   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003b04   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003b06   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003b08   ffe1
003b0a   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003b0c   ffe2
003b0e   0e00     movlw	0                  	MOVLW	0x00
003b10   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	859; main.c	break;
003b12   efa7     goto	0x434e              	GOTO	_00574_DS_
003b14   f021
                                           _00560_DS_:
003b16   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	861; main.c	matrix_2[5][column-8+1]	= _COLOR_WHITE;
003b18   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
003b1a   6e10     movwf	0x10, 0            	MOVWF	r0x00
003b1c   0ef9     movlw	0xf9               	MOVLW	0xf9
003b1e   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003b20   6e11     movwf	0x11, 0            	MOVWF	r0x01
003b22   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003b24   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003b26   6e12     movwf	0x12, 0            	MOVWF	r0x02
003b28   6a13     clrf	0x13, 0             	CLRF	r0x03
003b2a   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003b2c   6813     setf	0x13, 0             	SETF	r0x03
003b2e   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003b30   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003b32   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003b34   ffe1
003b36   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003b38   ffe2
003b3a   0e70     movlw	0x70               	MOVLW	0x70
003b3c   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	862; main.c	matrix_2[5][column-8]		= _COLOR_CYAN;
003b3e   0ef8     movlw	0xf8               	MOVLW	0xf8
003b40   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003b42   6e12     movwf	0x12, 0            	MOVWF	r0x02
003b44   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003b46   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
003b48   6e13     movwf	0x13, 0            	MOVWF	r0x03
003b4a   6a14     clrf	0x14, 0             	CLRF	r0x04
003b4c   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003b4e   6814     setf	0x14, 0             	SETF	r0x04
003b50   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003b52   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
003b54   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003b56   ffe1
003b58   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003b5a   ffe2
003b5c   0e60     movlw	0x60               	MOVLW	0x60
003b5e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	863; main.c	matrix_2[4][column-1] 		= _COLOR_BLUE;
003b60   0410     decf	0x10, 0, 0          	DECF	r0x00, W
003b62   6e13     movwf	0x13, 0            	MOVWF	r0x03
003b64   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003b66   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
003b68   6e14     movwf	0x14, 0            	MOVWF	r0x04
003b6a   6a15     clrf	0x15, 0             	CLRF	r0x05
003b6c   be13     btfsc	0x13, 0x7, 0       	BTFSC	r0x03, 7
003b6e   6815     setf	0x15, 0             	SETF	r0x05
003b70   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
003b72   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
003b74   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
003b76   ffe1
003b78   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
003b7a   ffe2
003b7c   0e40     movlw	0x40               	MOVLW	0x40
003b7e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	864; main.c	matrix_2[4][column-2] 		= _COLOR_OFF;
003b80   0efe     movlw	0xfe               	MOVLW	0xfe
003b82   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003b84   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003b86   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003b88   6e14     movwf	0x14, 0            	MOVWF	r0x04
003b8a   6a15     clrf	0x15, 0             	CLRF	r0x05
003b8c   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
003b8e   6815     setf	0x15, 0             	SETF	r0x05
003b90   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
003b92   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
003b94   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
003b96   ffe1
003b98   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
003b9a   ffe2
003b9c   0e00     movlw	0                  	MOVLW	0x00
003b9e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	865; main.c	matrix_2[7][column-8+1]	= _COLOR_WHITE;
003ba0   6a14     clrf	0x14, 0             	CLRF	r0x04
003ba2   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003ba4   6814     setf	0x14, 0             	SETF	r0x04
003ba6   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003ba8   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
003baa   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003bac   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
003bae   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
003bb0   ffe1
003bb2   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003bb4   ffe2
003bb6   0e70     movlw	0x70               	MOVLW	0x70
003bb8   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	866; main.c	matrix_2[7][column-8]		= _COLOR_CYAN;
003bba   6a11     clrf	0x11, 0             	CLRF	r0x01
003bbc   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003bbe   6811     setf	0x11, 0             	SETF	r0x01
003bc0   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003bc2   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003bc4   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003bc6   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003bc8   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003bca   ffe1
003bcc   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003bce   ffe2
003bd0   0e60     movlw	0x60               	MOVLW	0x60
003bd2   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	867; main.c	matrix_2[6][column-1] 		= _COLOR_BLUE;
003bd4   6a11     clrf	0x11, 0             	CLRF	r0x01
003bd6   be13     btfsc	0x13, 0x7, 0       	BTFSC	r0x03, 7
003bd8   6811     setf	0x11, 0             	SETF	r0x01
003bda   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
003bdc   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
003bde   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003be0   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003be2   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003be4   ffe1
003be6   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003be8   ffe2
003bea   0e40     movlw	0x40               	MOVLW	0x40
003bec   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	868; main.c	matrix_2[6][column-2] 		= _COLOR_OFF;
003bee   6a11     clrf	0x11, 0             	CLRF	r0x01
003bf0   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
003bf2   6811     setf	0x11, 0             	SETF	r0x01
003bf4   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
003bf6   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003bf8   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003bfa   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003bfc   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003bfe   ffe1
003c00   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003c02   ffe2
003c04   0e00     movlw	0                  	MOVLW	0x00
003c06   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	869; main.c	break;
003c08   efa7     goto	0x434e              	GOTO	_00574_DS_
003c0a   f021
                                           _00561_DS_:
003c0c   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	871; main.c	matrix_2[5][column-8+1]	= _COLOR_WHITE;
003c0e   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
003c10   6e10     movwf	0x10, 0            	MOVWF	r0x00
003c12   0ef9     movlw	0xf9               	MOVLW	0xf9
003c14   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003c16   6e11     movwf	0x11, 0            	MOVWF	r0x01
003c18   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003c1a   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003c1c   6e12     movwf	0x12, 0            	MOVWF	r0x02
003c1e   6a13     clrf	0x13, 0             	CLRF	r0x03
003c20   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003c22   6813     setf	0x13, 0             	SETF	r0x03
003c24   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003c26   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003c28   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003c2a   ffe1
003c2c   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003c2e   ffe2
003c30   0e70     movlw	0x70               	MOVLW	0x70
003c32   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	872; main.c	matrix_2[5][column-8]		= _COLOR_CYAN;
003c34   0ef8     movlw	0xf8               	MOVLW	0xf8
003c36   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003c38   6e12     movwf	0x12, 0            	MOVWF	r0x02
003c3a   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003c3c   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
003c3e   6e13     movwf	0x13, 0            	MOVWF	r0x03
003c40   6a14     clrf	0x14, 0             	CLRF	r0x04
003c42   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003c44   6814     setf	0x14, 0             	SETF	r0x04
003c46   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003c48   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
003c4a   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003c4c   ffe1
003c4e   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003c50   ffe2
003c52   0e60     movlw	0x60               	MOVLW	0x60
003c54   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	873; main.c	matrix_2[5][column-8-1]	= _COLOR_BLUE;
003c56   0ef7     movlw	0xf7               	MOVLW	0xf7
003c58   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003c5a   6e13     movwf	0x13, 0            	MOVWF	r0x03
003c5c   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003c5e   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
003c60   6e14     movwf	0x14, 0            	MOVWF	r0x04
003c62   6a15     clrf	0x15, 0             	CLRF	r0x05
003c64   be13     btfsc	0x13, 0x7, 0       	BTFSC	r0x03, 7
003c66   6815     setf	0x15, 0             	SETF	r0x05
003c68   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003c6a   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
003c6c   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
003c6e   ffe1
003c70   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
003c72   ffe2
003c74   0e40     movlw	0x40               	MOVLW	0x40
003c76   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	874; main.c	matrix_2[4][column-2] 		= _COLOR_OFF;
003c78   0efe     movlw	0xfe               	MOVLW	0xfe
003c7a   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003c7c   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
003c7e   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003c80   6e14     movwf	0x14, 0            	MOVWF	r0x04
003c82   6a15     clrf	0x15, 0             	CLRF	r0x05
003c84   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
003c86   6815     setf	0x15, 0             	SETF	r0x05
003c88   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
003c8a   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
003c8c   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
003c8e   ffe1
003c90   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
003c92   ffe2
003c94   0e00     movlw	0                  	MOVLW	0x00
003c96   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	875; main.c	matrix_2[7][column-8+1]	= _COLOR_WHITE;
003c98   6a14     clrf	0x14, 0             	CLRF	r0x04
003c9a   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003c9c   6814     setf	0x14, 0             	SETF	r0x04
003c9e   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003ca0   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
003ca2   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003ca4   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
003ca6   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
003ca8   ffe1
003caa   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003cac   ffe2
003cae   0e70     movlw	0x70               	MOVLW	0x70
003cb0   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	876; main.c	matrix_2[7][column-8]		= _COLOR_CYAN;
003cb2   6a11     clrf	0x11, 0             	CLRF	r0x01
003cb4   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003cb6   6811     setf	0x11, 0             	SETF	r0x01
003cb8   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003cba   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003cbc   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003cbe   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003cc0   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003cc2   ffe1
003cc4   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003cc6   ffe2
003cc8   0e60     movlw	0x60               	MOVLW	0x60
003cca   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	877; main.c	matrix_2[7][column-8-1]	= _COLOR_BLUE;
003ccc   6a11     clrf	0x11, 0             	CLRF	r0x01
003cce   be13     btfsc	0x13, 0x7, 0       	BTFSC	r0x03, 7
003cd0   6811     setf	0x11, 0             	SETF	r0x01
003cd2   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003cd4   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
003cd6   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003cd8   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003cda   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003cdc   ffe1
003cde   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003ce0   ffe2
003ce2   0e40     movlw	0x40               	MOVLW	0x40
003ce4   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	878; main.c	matrix_2[6][column-2] 		= _COLOR_OFF;
003ce6   6a11     clrf	0x11, 0             	CLRF	r0x01
003ce8   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
003cea   6811     setf	0x11, 0             	SETF	r0x01
003cec   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
003cee   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003cf0   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
003cf2   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003cf4   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003cf6   ffe1
003cf8   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003cfa   ffe2
003cfc   0e00     movlw	0                  	MOVLW	0x00
003cfe   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	879; main.c	break;
003d00   efa7     goto	0x434e              	GOTO	_00574_DS_
003d02   f021
                                           _00562_DS_:
003d04   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	881; main.c	matrix_2[5][column-8+1] 	= _COLOR_WHITE;
003d06   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
003d08   6e10     movwf	0x10, 0            	MOVWF	r0x00
003d0a   0ef9     movlw	0xf9               	MOVLW	0xf9
003d0c   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003d0e   6e11     movwf	0x11, 0            	MOVWF	r0x01
003d10   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003d12   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003d14   6e12     movwf	0x12, 0            	MOVWF	r0x02
003d16   6a13     clrf	0x13, 0             	CLRF	r0x03
003d18   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003d1a   6813     setf	0x13, 0             	SETF	r0x03
003d1c   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003d1e   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003d20   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003d22   ffe1
003d24   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003d26   ffe2
003d28   0e70     movlw	0x70               	MOVLW	0x70
003d2a   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	882; main.c	matrix_2[5][column-8] 		= _COLOR_CYAN;
003d2c   0ef8     movlw	0xf8               	MOVLW	0xf8
003d2e   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003d30   6e12     movwf	0x12, 0            	MOVWF	r0x02
003d32   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003d34   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
003d36   6e13     movwf	0x13, 0            	MOVWF	r0x03
003d38   6a14     clrf	0x14, 0             	CLRF	r0x04
003d3a   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003d3c   6814     setf	0x14, 0             	SETF	r0x04
003d3e   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003d40   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
003d42   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003d44   ffe1
003d46   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003d48   ffe2
003d4a   0e60     movlw	0x60               	MOVLW	0x60
003d4c   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	883; main.c	matrix_2[5][column-8-1] 	= _COLOR_BLUE;
003d4e   0ef7     movlw	0xf7               	MOVLW	0xf7
003d50   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003d52   6e13     movwf	0x13, 0            	MOVWF	r0x03
003d54   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003d56   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
003d58   6e14     movwf	0x14, 0            	MOVWF	r0x04
003d5a   6a15     clrf	0x15, 0             	CLRF	r0x05
003d5c   be13     btfsc	0x13, 0x7, 0       	BTFSC	r0x03, 7
003d5e   6815     setf	0x15, 0             	SETF	r0x05
003d60   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003d62   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
003d64   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
003d66   ffe1
003d68   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
003d6a   ffe2
003d6c   0e40     movlw	0x40               	MOVLW	0x40
003d6e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	884; main.c	matrix_2[5][column-8-2] 	= _COLOR_OFF;
003d70   0ef6     movlw	0xf6               	MOVLW	0xf6
003d72   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003d74   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003d76   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003d78   6e14     movwf	0x14, 0            	MOVWF	r0x04
003d7a   6a15     clrf	0x15, 0             	CLRF	r0x05
003d7c   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
003d7e   6815     setf	0x15, 0             	SETF	r0x05
003d80   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003d82   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
003d84   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
003d86   ffe1
003d88   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
003d8a   ffe2
003d8c   0e00     movlw	0                  	MOVLW	0x00
003d8e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	885; main.c	matrix_2[7][column-8+1] 	= _COLOR_WHITE;
003d90   6a14     clrf	0x14, 0             	CLRF	r0x04
003d92   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003d94   6814     setf	0x14, 0             	SETF	r0x04
003d96   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003d98   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
003d9a   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003d9c   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
003d9e   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
003da0   ffe1
003da2   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003da4   ffe2
003da6   0e70     movlw	0x70               	MOVLW	0x70
003da8   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	886; main.c	matrix_2[7][column-8] 		= _COLOR_CYAN;
003daa   6a11     clrf	0x11, 0             	CLRF	r0x01
003dac   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003dae   6811     setf	0x11, 0             	SETF	r0x01
003db0   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003db2   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003db4   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003db6   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003db8   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003dba   ffe1
003dbc   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003dbe   ffe2
003dc0   0e60     movlw	0x60               	MOVLW	0x60
003dc2   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	887; main.c	matrix_2[7][column-8-1] 	= _COLOR_BLUE;
003dc4   6a11     clrf	0x11, 0             	CLRF	r0x01
003dc6   be13     btfsc	0x13, 0x7, 0       	BTFSC	r0x03, 7
003dc8   6811     setf	0x11, 0             	SETF	r0x01
003dca   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003dcc   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
003dce   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003dd0   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003dd2   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003dd4   ffe1
003dd6   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003dd8   ffe2
003dda   0e40     movlw	0x40               	MOVLW	0x40
003ddc   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	888; main.c	matrix_2[7][column-8-2] 	= _COLOR_OFF;
003dde   6a11     clrf	0x11, 0             	CLRF	r0x01
003de0   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
003de2   6811     setf	0x11, 0             	SETF	r0x01
003de4   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003de6   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003de8   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003dea   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003dec   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003dee   ffe1
003df0   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003df2   ffe2
003df4   0e00     movlw	0                  	MOVLW	0x00
003df6   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	889; main.c	break;
003df8   efa7     goto	0x434e              	GOTO	_00574_DS_
003dfa   f021
                                           _00563_DS_:
003dfc   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	891; main.c	matrix_2[5][column-8+1] 	= _COLOR_WHITE;
003dfe   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
003e00   6e10     movwf	0x10, 0            	MOVWF	r0x00
003e02   0ef9     movlw	0xf9               	MOVLW	0xf9
003e04   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003e06   6e11     movwf	0x11, 0            	MOVWF	r0x01
003e08   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003e0a   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003e0c   6e12     movwf	0x12, 0            	MOVWF	r0x02
003e0e   6a13     clrf	0x13, 0             	CLRF	r0x03
003e10   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003e12   6813     setf	0x13, 0             	SETF	r0x03
003e14   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003e16   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003e18   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003e1a   ffe1
003e1c   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003e1e   ffe2
003e20   0e70     movlw	0x70               	MOVLW	0x70
003e22   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	892; main.c	matrix_2[5][column-8] 		= _COLOR_CYAN;
003e24   0ef8     movlw	0xf8               	MOVLW	0xf8
003e26   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003e28   6e12     movwf	0x12, 0            	MOVWF	r0x02
003e2a   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003e2c   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
003e2e   6e13     movwf	0x13, 0            	MOVWF	r0x03
003e30   6a14     clrf	0x14, 0             	CLRF	r0x04
003e32   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003e34   6814     setf	0x14, 0             	SETF	r0x04
003e36   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003e38   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
003e3a   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003e3c   ffe1
003e3e   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003e40   ffe2
003e42   0e60     movlw	0x60               	MOVLW	0x60
003e44   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	893; main.c	matrix_2[5][column-8-1] 	= _COLOR_BLUE;
003e46   0ef7     movlw	0xf7               	MOVLW	0xf7
003e48   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003e4a   6e13     movwf	0x13, 0            	MOVWF	r0x03
003e4c   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003e4e   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
003e50   6e14     movwf	0x14, 0            	MOVWF	r0x04
003e52   6a15     clrf	0x15, 0             	CLRF	r0x05
003e54   be13     btfsc	0x13, 0x7, 0       	BTFSC	r0x03, 7
003e56   6815     setf	0x15, 0             	SETF	r0x05
003e58   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003e5a   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
003e5c   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
003e5e   ffe1
003e60   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
003e62   ffe2
003e64   0e40     movlw	0x40               	MOVLW	0x40
003e66   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	894; main.c	matrix_2[5][column-8-2] 	= _COLOR_OFF;
003e68   0ef6     movlw	0xf6               	MOVLW	0xf6
003e6a   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003e6c   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003e6e   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003e70   6e14     movwf	0x14, 0            	MOVWF	r0x04
003e72   6a15     clrf	0x15, 0             	CLRF	r0x05
003e74   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
003e76   6815     setf	0x15, 0             	SETF	r0x05
003e78   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003e7a   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
003e7c   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
003e7e   ffe1
003e80   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
003e82   ffe2
003e84   0e00     movlw	0                  	MOVLW	0x00
003e86   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	895; main.c	matrix_2[7][column-8+1] 	= _COLOR_WHITE;
003e88   6a14     clrf	0x14, 0             	CLRF	r0x04
003e8a   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003e8c   6814     setf	0x14, 0             	SETF	r0x04
003e8e   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003e90   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
003e92   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003e94   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
003e96   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
003e98   ffe1
003e9a   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003e9c   ffe2
003e9e   0e70     movlw	0x70               	MOVLW	0x70
003ea0   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	896; main.c	matrix_2[7][column-8] 		= _COLOR_CYAN;
003ea2   6a11     clrf	0x11, 0             	CLRF	r0x01
003ea4   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003ea6   6811     setf	0x11, 0             	SETF	r0x01
003ea8   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003eaa   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003eac   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003eae   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003eb0   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003eb2   ffe1
003eb4   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003eb6   ffe2
003eb8   0e60     movlw	0x60               	MOVLW	0x60
003eba   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	897; main.c	matrix_2[7][column-8-1] 	= _COLOR_BLUE;
003ebc   6a11     clrf	0x11, 0             	CLRF	r0x01
003ebe   be13     btfsc	0x13, 0x7, 0       	BTFSC	r0x03, 7
003ec0   6811     setf	0x11, 0             	SETF	r0x01
003ec2   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003ec4   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
003ec6   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003ec8   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003eca   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003ecc   ffe1
003ece   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003ed0   ffe2
003ed2   0e40     movlw	0x40               	MOVLW	0x40
003ed4   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	898; main.c	matrix_2[7][column-8-2] 	= _COLOR_OFF;
003ed6   6a11     clrf	0x11, 0             	CLRF	r0x01
003ed8   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
003eda   6811     setf	0x11, 0             	SETF	r0x01
003edc   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003ede   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003ee0   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003ee2   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003ee4   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003ee6   ffe1
003ee8   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003eea   ffe2
003eec   0e00     movlw	0                  	MOVLW	0x00
003eee   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	899; main.c	break;
003ef0   efa7     goto	0x434e              	GOTO	_00574_DS_
003ef2   f021
                                           _00564_DS_:
003ef4   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	901; main.c	matrix_2[5][column-8+1] 	= _COLOR_WHITE;
003ef6   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
003ef8   6e10     movwf	0x10, 0            	MOVWF	r0x00
003efa   0ef9     movlw	0xf9               	MOVLW	0xf9
003efc   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003efe   6e11     movwf	0x11, 0            	MOVWF	r0x01
003f00   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003f02   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003f04   6e12     movwf	0x12, 0            	MOVWF	r0x02
003f06   6a13     clrf	0x13, 0             	CLRF	r0x03
003f08   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003f0a   6813     setf	0x13, 0             	SETF	r0x03
003f0c   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003f0e   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003f10   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003f12   ffe1
003f14   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003f16   ffe2
003f18   0e70     movlw	0x70               	MOVLW	0x70
003f1a   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	902; main.c	matrix_2[5][column-8] 		= _COLOR_CYAN;
003f1c   0ef8     movlw	0xf8               	MOVLW	0xf8
003f1e   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003f20   6e12     movwf	0x12, 0            	MOVWF	r0x02
003f22   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003f24   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
003f26   6e13     movwf	0x13, 0            	MOVWF	r0x03
003f28   6a14     clrf	0x14, 0             	CLRF	r0x04
003f2a   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003f2c   6814     setf	0x14, 0             	SETF	r0x04
003f2e   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003f30   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
003f32   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003f34   ffe1
003f36   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003f38   ffe2
003f3a   0e60     movlw	0x60               	MOVLW	0x60
003f3c   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	903; main.c	matrix_2[5][column-8-1] 	= _COLOR_BLUE;
003f3e   0ef7     movlw	0xf7               	MOVLW	0xf7
003f40   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003f42   6e13     movwf	0x13, 0            	MOVWF	r0x03
003f44   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003f46   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
003f48   6e14     movwf	0x14, 0            	MOVWF	r0x04
003f4a   6a15     clrf	0x15, 0             	CLRF	r0x05
003f4c   be13     btfsc	0x13, 0x7, 0       	BTFSC	r0x03, 7
003f4e   6815     setf	0x15, 0             	SETF	r0x05
003f50   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003f52   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
003f54   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
003f56   ffe1
003f58   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
003f5a   ffe2
003f5c   0e40     movlw	0x40               	MOVLW	0x40
003f5e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	904; main.c	matrix_2[5][column-8-2] 	= _COLOR_OFF;
003f60   0ef6     movlw	0xf6               	MOVLW	0xf6
003f62   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003f64   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003f66   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003f68   6e14     movwf	0x14, 0            	MOVWF	r0x04
003f6a   6a15     clrf	0x15, 0             	CLRF	r0x05
003f6c   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
003f6e   6815     setf	0x15, 0             	SETF	r0x05
003f70   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
003f72   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
003f74   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
003f76   ffe1
003f78   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
003f7a   ffe2
003f7c   0e00     movlw	0                  	MOVLW	0x00
003f7e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	905; main.c	matrix_2[7][column-8+1] 	= _COLOR_WHITE;
003f80   6a14     clrf	0x14, 0             	CLRF	r0x04
003f82   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
003f84   6814     setf	0x14, 0             	SETF	r0x04
003f86   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003f88   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
003f8a   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003f8c   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
003f8e   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
003f90   ffe1
003f92   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003f94   ffe2
003f96   0e70     movlw	0x70               	MOVLW	0x70
003f98   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	906; main.c	matrix_2[7][column-8] 		= _COLOR_CYAN;
003f9a   6a11     clrf	0x11, 0             	CLRF	r0x01
003f9c   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
003f9e   6811     setf	0x11, 0             	SETF	r0x01
003fa0   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003fa2   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003fa4   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003fa6   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003fa8   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003faa   ffe1
003fac   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003fae   ffe2
003fb0   0e60     movlw	0x60               	MOVLW	0x60
003fb2   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	907; main.c	matrix_2[7][column-8-1] 	= _COLOR_BLUE;
003fb4   6a11     clrf	0x11, 0             	CLRF	r0x01
003fb6   be13     btfsc	0x13, 0x7, 0       	BTFSC	r0x03, 7
003fb8   6811     setf	0x11, 0             	SETF	r0x01
003fba   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003fbc   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
003fbe   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003fc0   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003fc2   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003fc4   ffe1
003fc6   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003fc8   ffe2
003fca   0e40     movlw	0x40               	MOVLW	0x40
003fcc   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	908; main.c	matrix_2[7][column-8-2] 	= _COLOR_OFF;
003fce   6a11     clrf	0x11, 0             	CLRF	r0x01
003fd0   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
003fd2   6811     setf	0x11, 0             	SETF	r0x01
003fd4   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
003fd6   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003fd8   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
003fda   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003fdc   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003fde   ffe1
003fe0   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003fe2   ffe2
003fe4   0e00     movlw	0                  	MOVLW	0x00
003fe6   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	909; main.c	break;
003fe8   d1b2     bra	0x434e               	BRA	_00574_DS_
                                           _00565_DS_:
003fea   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	911; main.c	matrix_2[5][column-8+1] 	= _COLOR_WHITE;
003fec   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
003fee   6e10     movwf	0x10, 0            	MOVWF	r0x00
003ff0   0ef9     movlw	0xf9               	MOVLW	0xf9
003ff2   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003ff4   6e11     movwf	0x11, 0            	MOVWF	r0x01
003ff6   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
003ff8   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003ffa   6e12     movwf	0x12, 0            	MOVWF	r0x02
003ffc   6a13     clrf	0x13, 0             	CLRF	r0x03
003ffe   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
004000   6813     setf	0x13, 0             	SETF	r0x03
004002   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
004004   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
004006   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
004008   ffe1
00400a   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
00400c   ffe2
00400e   0e70     movlw	0x70               	MOVLW	0x70
004010   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	912; main.c	matrix_2[5][column-8] 		= _COLOR_CYAN;
004012   0ef8     movlw	0xf8               	MOVLW	0xf8
004014   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004016   6e12     movwf	0x12, 0            	MOVWF	r0x02
004018   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
00401a   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
00401c   6e13     movwf	0x13, 0            	MOVWF	r0x03
00401e   6a14     clrf	0x14, 0             	CLRF	r0x04
004020   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
004022   6814     setf	0x14, 0             	SETF	r0x04
004024   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
004026   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
004028   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
00402a   ffe1
00402c   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
00402e   ffe2
004030   0e60     movlw	0x60               	MOVLW	0x60
004032   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	913; main.c	matrix_2[5][column-8-1] 	= _COLOR_BLUE;
004034   0ef7     movlw	0xf7               	MOVLW	0xf7
004036   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004038   6e13     movwf	0x13, 0            	MOVWF	r0x03
00403a   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
00403c   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
00403e   6e14     movwf	0x14, 0            	MOVWF	r0x04
004040   6a15     clrf	0x15, 0             	CLRF	r0x05
004042   be13     btfsc	0x13, 0x7, 0       	BTFSC	r0x03, 7
004044   6815     setf	0x15, 0             	SETF	r0x05
004046   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
004048   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
00404a   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
00404c   ffe1
00404e   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
004050   ffe2
004052   0e40     movlw	0x40               	MOVLW	0x40
004054   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	914; main.c	matrix_2[5][column-8-2] 	= _COLOR_OFF;
004056   0ef6     movlw	0xf6               	MOVLW	0xf6
004058   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
00405a   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
00405c   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
00405e   6e14     movwf	0x14, 0            	MOVWF	r0x04
004060   6a15     clrf	0x15, 0             	CLRF	r0x05
004062   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
004064   6815     setf	0x15, 0             	SETF	r0x05
004066   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
004068   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
00406a   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
00406c   ffe1
00406e   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
004070   ffe2
004072   0e00     movlw	0                  	MOVLW	0x00
004074   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	915; main.c	matrix_2[7][column-8+1] 	= _COLOR_WHITE;
004076   6a14     clrf	0x14, 0             	CLRF	r0x04
004078   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
00407a   6814     setf	0x14, 0             	SETF	r0x04
00407c   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
00407e   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
004080   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
004082   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
004084   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
004086   ffe1
004088   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
00408a   ffe2
00408c   0e70     movlw	0x70               	MOVLW	0x70
00408e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	916; main.c	matrix_2[7][column-8] 		= _COLOR_CYAN;
004090   6a11     clrf	0x11, 0             	CLRF	r0x01
004092   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
004094   6811     setf	0x11, 0             	SETF	r0x01
004096   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
004098   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
00409a   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
00409c   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
00409e   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
0040a0   ffe1
0040a2   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
0040a4   ffe2
0040a6   0e60     movlw	0x60               	MOVLW	0x60
0040a8   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	917; main.c	matrix_2[7][column-8-1] 	= _COLOR_BLUE;
0040aa   6a11     clrf	0x11, 0             	CLRF	r0x01
0040ac   be13     btfsc	0x13, 0x7, 0       	BTFSC	r0x03, 7
0040ae   6811     setf	0x11, 0             	SETF	r0x01
0040b0   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
0040b2   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
0040b4   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
0040b6   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
0040b8   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
0040ba   ffe1
0040bc   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
0040be   ffe2
0040c0   0e40     movlw	0x40               	MOVLW	0x40
0040c2   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	918; main.c	matrix_2[7][column-8-2] 	= _COLOR_OFF;
0040c4   6a11     clrf	0x11, 0             	CLRF	r0x01
0040c6   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
0040c8   6811     setf	0x11, 0             	SETF	r0x01
0040ca   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
0040cc   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
0040ce   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
0040d0   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
0040d2   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
0040d4   ffe1
0040d6   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
0040d8   ffe2
0040da   0e00     movlw	0                  	MOVLW	0x00
0040dc   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	919; main.c	break;
0040de   d137     bra	0x434e               	BRA	_00574_DS_
                                           _00566_DS_:
0040e0   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	921; main.c	matrix_2[5][column-8+1] 	= _COLOR_WHITE;
0040e2   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
0040e4   6e10     movwf	0x10, 0            	MOVWF	r0x00
0040e6   0ef9     movlw	0xf9               	MOVLW	0xf9
0040e8   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
0040ea   6e11     movwf	0x11, 0            	MOVWF	r0x01
0040ec   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
0040ee   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
0040f0   6e12     movwf	0x12, 0            	MOVWF	r0x02
0040f2   6a13     clrf	0x13, 0             	CLRF	r0x03
0040f4   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
0040f6   6813     setf	0x13, 0             	SETF	r0x03
0040f8   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
0040fa   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0040fc   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
0040fe   ffe1
004100   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
004102   ffe2
004104   0e70     movlw	0x70               	MOVLW	0x70
004106   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	922; main.c	matrix_2[5][column-8] 		= _COLOR_CYAN;
004108   0ef8     movlw	0xf8               	MOVLW	0xf8
00410a   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
00410c   6e12     movwf	0x12, 0            	MOVWF	r0x02
00410e   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
004110   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
004112   6e13     movwf	0x13, 0            	MOVWF	r0x03
004114   6a14     clrf	0x14, 0             	CLRF	r0x04
004116   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
004118   6814     setf	0x14, 0             	SETF	r0x04
00411a   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
00411c   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
00411e   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
004120   ffe1
004122   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
004124   ffe2
004126   0e60     movlw	0x60               	MOVLW	0x60
004128   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	923; main.c	matrix_2[5][column-8-1] 	= _COLOR_BLUE;
00412a   0ef7     movlw	0xf7               	MOVLW	0xf7
00412c   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
00412e   6e13     movwf	0x13, 0            	MOVWF	r0x03
004130   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
004132   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
004134   6e14     movwf	0x14, 0            	MOVWF	r0x04
004136   6a15     clrf	0x15, 0             	CLRF	r0x05
004138   be13     btfsc	0x13, 0x7, 0       	BTFSC	r0x03, 7
00413a   6815     setf	0x15, 0             	SETF	r0x05
00413c   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
00413e   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
004140   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
004142   ffe1
004144   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
004146   ffe2
004148   0e40     movlw	0x40               	MOVLW	0x40
00414a   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	924; main.c	matrix_2[5][column-8-2] 	= _COLOR_OFF;
00414c   0ef6     movlw	0xf6               	MOVLW	0xf6
00414e   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004150   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
004152   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004154   6e14     movwf	0x14, 0            	MOVWF	r0x04
004156   6a15     clrf	0x15, 0             	CLRF	r0x05
004158   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
00415a   6815     setf	0x15, 0             	SETF	r0x05
00415c   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
00415e   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
004160   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
004162   ffe1
004164   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
004166   ffe2
004168   0e00     movlw	0                  	MOVLW	0x00
00416a   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	925; main.c	matrix_2[7][column-8+1] 	= _COLOR_WHITE;
00416c   6a14     clrf	0x14, 0             	CLRF	r0x04
00416e   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
004170   6814     setf	0x14, 0             	SETF	r0x04
004172   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
004174   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
004176   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
004178   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
00417a   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
00417c   ffe1
00417e   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
004180   ffe2
004182   0e70     movlw	0x70               	MOVLW	0x70
004184   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	926; main.c	matrix_2[7][column-8] 		= _COLOR_CYAN;
004186   6a11     clrf	0x11, 0             	CLRF	r0x01
004188   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
00418a   6811     setf	0x11, 0             	SETF	r0x01
00418c   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
00418e   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
004190   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
004192   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004194   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
004196   ffe1
004198   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
00419a   ffe2
00419c   0e60     movlw	0x60               	MOVLW	0x60
00419e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	927; main.c	matrix_2[7][column-8-1] 	= _COLOR_BLUE;
0041a0   6a11     clrf	0x11, 0             	CLRF	r0x01
0041a2   be13     btfsc	0x13, 0x7, 0       	BTFSC	r0x03, 7
0041a4   6811     setf	0x11, 0             	SETF	r0x01
0041a6   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
0041a8   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
0041aa   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
0041ac   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
0041ae   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
0041b0   ffe1
0041b2   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
0041b4   ffe2
0041b6   0e40     movlw	0x40               	MOVLW	0x40
0041b8   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	928; main.c	matrix_2[7][column-8-2] 	= _COLOR_OFF;
0041ba   6a11     clrf	0x11, 0             	CLRF	r0x01
0041bc   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
0041be   6811     setf	0x11, 0             	SETF	r0x01
0041c0   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
0041c2   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
0041c4   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
0041c6   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
0041c8   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
0041ca   ffe1
0041cc   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
0041ce   ffe2
0041d0   0e00     movlw	0                  	MOVLW	0x00
0041d2   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	929; main.c	break;
0041d4   d0bc     bra	0x434e               	BRA	_00574_DS_
                                           _00567_DS_:
0041d6   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	931; main.c	matrix_2[5][column-8] 		= _COLOR_CYAN;
0041d8   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
0041da   6e10     movwf	0x10, 0            	MOVWF	r0x00
0041dc   0ef8     movlw	0xf8               	MOVLW	0xf8
0041de   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
0041e0   6e11     movwf	0x11, 0            	MOVWF	r0x01
0041e2   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
0041e4   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
0041e6   6e12     movwf	0x12, 0            	MOVWF	r0x02
0041e8   6a13     clrf	0x13, 0             	CLRF	r0x03
0041ea   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
0041ec   6813     setf	0x13, 0             	SETF	r0x03
0041ee   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
0041f0   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0041f2   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
0041f4   ffe1
0041f6   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0041f8   ffe2
0041fa   0e60     movlw	0x60               	MOVLW	0x60
0041fc   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	932; main.c	matrix_2[5][column-8-1] 	= _COLOR_BLUE;
0041fe   0ef7     movlw	0xf7               	MOVLW	0xf7
004200   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004202   6e12     movwf	0x12, 0            	MOVWF	r0x02
004204   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
004206   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
004208   6e13     movwf	0x13, 0            	MOVWF	r0x03
00420a   6a14     clrf	0x14, 0             	CLRF	r0x04
00420c   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
00420e   6814     setf	0x14, 0             	SETF	r0x04
004210   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
004212   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
004214   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
004216   ffe1
004218   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
00421a   ffe2
00421c   0e40     movlw	0x40               	MOVLW	0x40
00421e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	933; main.c	matrix_2[5][column-8-2] 	= _COLOR_OFF;
004220   0ef6     movlw	0xf6               	MOVLW	0xf6
004222   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004224   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
004226   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004228   6e13     movwf	0x13, 0            	MOVWF	r0x03
00422a   6a14     clrf	0x14, 0             	CLRF	r0x04
00422c   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
00422e   6814     setf	0x14, 0             	SETF	r0x04
004230   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
004232   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
004234   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
004236   ffe1
004238   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
00423a   ffe2
00423c   0e00     movlw	0                  	MOVLW	0x00
00423e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	934; main.c	matrix_2[7][column-8] 		= _COLOR_CYAN;
004240   6a13     clrf	0x13, 0             	CLRF	r0x03
004242   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
004244   6813     setf	0x13, 0             	SETF	r0x03
004246   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
004248   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
00424a   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
00424c   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
00424e   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
004250   ffe1
004252   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
004254   ffe2
004256   0e60     movlw	0x60               	MOVLW	0x60
004258   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	935; main.c	matrix_2[7][column-8-1] 	= _COLOR_BLUE;
00425a   6a11     clrf	0x11, 0             	CLRF	r0x01
00425c   be12     btfsc	0x12, 0x7, 0       	BTFSC	r0x02, 7
00425e   6811     setf	0x11, 0             	SETF	r0x01
004260   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
004262   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
004264   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
004266   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004268   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
00426a   ffe1
00426c   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
00426e   ffe2
004270   0e40     movlw	0x40               	MOVLW	0x40
004272   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	936; main.c	matrix_2[7][column-8-2] 	= _COLOR_OFF;
004274   6a11     clrf	0x11, 0             	CLRF	r0x01
004276   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
004278   6811     setf	0x11, 0             	SETF	r0x01
00427a   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
00427c   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
00427e   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
004280   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004282   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
004284   ffe1
004286   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
004288   ffe2
00428a   0e00     movlw	0                  	MOVLW	0x00
00428c   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	937; main.c	break;
00428e   d05f     bra	0x434e               	BRA	_00574_DS_
                                           _00568_DS_:
004290   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	939; main.c	matrix_2[5][column-8-1] 	= _COLOR_BLUE;
004292   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
004294   6e10     movwf	0x10, 0            	MOVWF	r0x00
004296   0ef7     movlw	0xf7               	MOVLW	0xf7
004298   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
00429a   6e11     movwf	0x11, 0            	MOVWF	r0x01
00429c   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
00429e   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
0042a0   6e12     movwf	0x12, 0            	MOVWF	r0x02
0042a2   6a13     clrf	0x13, 0             	CLRF	r0x03
0042a4   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
0042a6   6813     setf	0x13, 0             	SETF	r0x03
0042a8   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
0042aa   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0042ac   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
0042ae   ffe1
0042b0   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0042b2   ffe2
0042b4   0e40     movlw	0x40               	MOVLW	0x40
0042b6   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	940; main.c	matrix_2[5][column-8-2] 	= _COLOR_OFF;
0042b8   0ef6     movlw	0xf6               	MOVLW	0xf6
0042ba   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
0042bc   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
0042be   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
0042c0   6e12     movwf	0x12, 0            	MOVWF	r0x02
0042c2   6a13     clrf	0x13, 0             	CLRF	r0x03
0042c4   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
0042c6   6813     setf	0x13, 0             	SETF	r0x03
0042c8   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
0042ca   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0042cc   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
0042ce   ffe1
0042d0   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0042d2   ffe2
0042d4   0e00     movlw	0                  	MOVLW	0x00
0042d6   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	941; main.c	matrix_2[7][column-8-1] 	= _COLOR_BLUE;
0042d8   6a12     clrf	0x12, 0             	CLRF	r0x02
0042da   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
0042dc   6812     setf	0x12, 0             	SETF	r0x02
0042de   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
0042e0   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
0042e2   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
0042e4   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
0042e6   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
0042e8   ffe1
0042ea   c012     movff	0x12, 0xfe2        	MOVFF	r0x02, FSR0H
0042ec   ffe2
0042ee   0e40     movlw	0x40               	MOVLW	0x40
0042f0   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	942; main.c	matrix_2[7][column-8-2] 	= _COLOR_OFF;
0042f2   6a11     clrf	0x11, 0             	CLRF	r0x01
0042f4   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
0042f6   6811     setf	0x11, 0             	SETF	r0x01
0042f8   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
0042fa   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
0042fc   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
0042fe   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004300   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
004302   ffe1
004304   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
004306   ffe2
004308   0e00     movlw	0                  	MOVLW	0x00
00430a   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	943; main.c	break;
00430c   d020     bra	0x434e               	BRA	_00574_DS_
                                           _00569_DS_:
00430e   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	945; main.c	matrix_2[5][column-8-2] 	= _COLOR_OFF;
004310   5110     movf	0x10, 0, 0x1        	MOVF	_DoMichaelKnightPattern_column_1_1, W, B
004312   6e10     movwf	0x10, 0            	MOVWF	r0x00
004314   0ef6     movlw	0xf6               	MOVLW	0xf6
004316   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004318   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
00431a   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
00431c   6e11     movwf	0x11, 0            	MOVWF	r0x01
00431e   6a12     clrf	0x12, 0             	CLRF	r0x02
004320   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
004322   6812     setf	0x12, 0             	SETF	r0x02
004324   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
004326   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
004328   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
00432a   ffe1
00432c   c012     movff	0x12, 0xfe2        	MOVFF	r0x02, FSR0H
00432e   ffe2
004330   0e00     movlw	0                  	MOVLW	0x00
004332   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	946; main.c	matrix_2[7][column-8-2] 	= _COLOR_OFF;
004334   6a11     clrf	0x11, 0             	CLRF	r0x01
004336   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
004338   6811     setf	0x11, 0             	SETF	r0x01
00433a   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
00433c   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
00433e   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
004340   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004342   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
004344   ffe1
004346   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
004348   ffe2
00434a   0e00     movlw	0                  	MOVLW	0x00
00434c   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           _00574_DS_:
00434e   0101     movlb	0x1                	BANKSEL	_DoMichaelKnightPattern_column_1_1
                                           ;	.line	777; main.c	for (column = -2; column < 21; column++)
004350   2b10     incf	0x10, 0x1, 0x1      	INCF	_DoMichaelKnightPattern_column_1_1, F, B
004352   e301     bnc	0x4356               	BNC	_10551_DS_
                                           ; removed redundant BANKSEL
004354   2b11     incf	0x11, 0x1, 0x1      	INCF	(_DoMichaelKnightPattern_column_1_1 + 1), F, B
                                           _10551_DS_:
004356   ef9d     goto	0x333a              	GOTO	_00572_DS_
004358   f019
                                           _00575_DS_:
                                           ;	.line	953; main.c	ClearMatrix(1);
00435a   0e00     movlw	0                  	MOVLW	0x00
00435c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00435e   0e01     movlw	0x1                	MOVLW	0x01
004360   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
004362   f025
004364   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	954; main.c	ClearMatrix(2);
004366   0e00     movlw	0                  	MOVLW	0x00
004368   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00436a   0e02     movlw	0x2                	MOVLW	0x02
00436c   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
00436e   f025
004370   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
004372   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
004374   f015
004376   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
004378   f014
00437a   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
00437c   f013
00437e   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
004380   f012
004382   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
004384   f011
004386   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
004388   f010
00438a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__TestMatrix2	code
                                           _TestMatrix2:
                                           ;	.line	748; main.c	void TestMatrix2(void) __wparam
004c72   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
004c74   ffed
004c76   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
004c78   ffed
004c7a   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
004c7c   ffed
004c7e   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
004c80   ffed
                                           ;	.line	752; main.c	ClearMatrix(1);
004c82   0e00     movlw	0                  	MOVLW	0x00
004c84   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004c86   0e01     movlw	0x1                	MOVLW	0x01
004c88   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
004c8a   f025
004c8c   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	753; main.c	ClearMatrix(2);
004c8e   0e00     movlw	0                  	MOVLW	0x00
004c90   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004c92   0e02     movlw	0x2                	MOVLW	0x02
004c94   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
004c96   f025
004c98   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
004c9a   0101     movlb	0x1                	BANKSEL	_TestMatrix2_row_1_1
                                           ;	.line	754; main.c	for (row = 0; row < 8; row++)
004c9c   6b0c     clrf	0xc, 0x1            	CLRF	_TestMatrix2_row_1_1, B
                                           ; removed redundant BANKSEL
004c9e   6b0d     clrf	0xd, 0x1            	CLRF	(_TestMatrix2_row_1_1 + 1), B
                                           _00532_DS_:
004ca0   0101     movlb	0x1                	BANKSEL	(_TestMatrix2_row_1_1 + 1)
004ca2   510d     movf	0xd, 0, 0x1         	MOVF	(_TestMatrix2_row_1_1 + 1), W, B
004ca4   0f80     addlw	0x80               	ADDLW	0x80
004ca6   0f80     addlw	0x80               	ADDLW	0x80
004ca8   e102     bnz	0x4cae               	BNZ	_00544_DS_
004caa   0e08     movlw	0x8                	MOVLW	0x08
                                           ; removed redundant BANKSEL
004cac   5d0c     subwf	0xc, 0, 0x1        	SUBWF	_TestMatrix2_row_1_1, W, B
                                           _00544_DS_:
004cae   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004cb0   d068     bra	0x4d82               	BRA	_00535_DS_
004cb2   0101     movlb	0x1                	BANKSEL	_TestMatrix2_column_1_1
                                           ;	.line	756; main.c	for (column = 0; column < 8; column++)
004cb4   6b0e     clrf	0xe, 0x1            	CLRF	_TestMatrix2_column_1_1, B
                                           ; removed redundant BANKSEL
004cb6   6b0f     clrf	0xf, 0x1            	CLRF	(_TestMatrix2_column_1_1 + 1), B
                                           _00524_DS_:
004cb8   0e00     movlw	0                  	MOVLW	0x00
004cba   0101     movlb	0x1                	BANKSEL	(_TestMatrix2_column_1_1 + 1)
004cbc   5d0f     subwf	0xf, 0, 0x1        	SUBWF	(_TestMatrix2_column_1_1 + 1), W, B
004cbe   e102     bnz	0x4cc4               	BNZ	_00545_DS_
004cc0   0e08     movlw	0x8                	MOVLW	0x08
                                           ; removed redundant BANKSEL
004cc2   5d0e     subwf	0xe, 0, 0x1        	SUBWF	_TestMatrix2_column_1_1, W, B
                                           _00545_DS_:
004cc4   e227     bc	0x4d14                	BC	_00527_DS_
004cc6   0101     movlb	0x1                	BANKSEL	(_TestMatrix2_row_1_1 + 1)
                                           ;	.line	758; main.c	matrix_2[row][column] = _COLOR_WHITE;
004cc8   510d     movf	0xd, 0, 0x1         	MOVF	(_TestMatrix2_row_1_1 + 1), W, B
004cca   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
                                           ; removed redundant BANKSEL
004ccc   510c     movf	0xc, 0, 0x1         	MOVF	_TestMatrix2_row_1_1, W, B
004cce   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004cd0   0e00     movlw	0                  	MOVLW	0x00
004cd2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004cd4   0e08     movlw	0x8                	MOVLW	0x08
004cd6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004cd8   eca7     call	0x574e, 0           	CALL	__mulint
004cda   f02b
004cdc   6e10     movwf	0x10, 0            	MOVWF	r0x00
004cde   cff3     movff	0xff3, 0x11        	MOVFF	PRODL, r0x01
004ce0   f011
004ce2   0e04     movlw	0x4                	MOVLW	0x04
004ce4   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
004ce6   0ec0     movlw	0xc0               	MOVLW	LOW(_matrix_2)
004ce8   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004cea   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2)
004cec   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004cee   c10e     movff	0x10e, 0x12        	MOVFF	_TestMatrix2_column_1_1, r0x02
004cf0   f012
004cf2   c10f     movff	0x10f, 0x13        	MOVFF	(_TestMatrix2_column_1_1 + 1), r0x03
004cf4   f013
004cf6   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
004cf8   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004cfa   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004cfc   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004cfe   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
004d00   ffe1
004d02   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
004d04   ffe2
004d06   0e70     movlw	0x70               	MOVLW	0x70
004d08   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
004d0a   0101     movlb	0x1                	BANKSEL	_TestMatrix2_column_1_1
                                           ;	.line	756; main.c	for (column = 0; column < 8; column++)
004d0c   2b0e     incf	0xe, 0x1, 0x1       	INCF	_TestMatrix2_column_1_1, F, B
004d0e   e301     bnc	0x4d12               	BNC	_20552_DS_
                                           ; removed redundant BANKSEL
004d10   2b0f     incf	0xf, 0x1, 0x1       	INCF	(_TestMatrix2_column_1_1 + 1), F, B
                                           _20552_DS_:
004d12   d7d2     bra	0x4cb8               	BRA	_00524_DS_
                                           _00527_DS_:
004d14   0101     movlb	0x1                	BANKSEL	_TestMatrix2_column_1_1
                                           ;	.line	760; main.c	for (column = 0; column < 8; column++)
004d16   6b0e     clrf	0xe, 0x1            	CLRF	_TestMatrix2_column_1_1, B
                                           ; removed redundant BANKSEL
004d18   6b0f     clrf	0xf, 0x1            	CLRF	(_TestMatrix2_column_1_1 + 1), B
                                           _00528_DS_:
004d1a   0e00     movlw	0                  	MOVLW	0x00
004d1c   0101     movlb	0x1                	BANKSEL	(_TestMatrix2_column_1_1 + 1)
004d1e   5d0f     subwf	0xf, 0, 0x1        	SUBWF	(_TestMatrix2_column_1_1 + 1), W, B
004d20   e102     bnz	0x4d26               	BNZ	_00546_DS_
004d22   0e08     movlw	0x8                	MOVLW	0x08
                                           ; removed redundant BANKSEL
004d24   5d0e     subwf	0xe, 0, 0x1        	SUBWF	_TestMatrix2_column_1_1, W, B
                                           _00546_DS_:
004d26   e222     bc	0x4d6c                	BC	_00531_DS_
004d28   0101     movlb	0x1                	BANKSEL	_TestMatrix2_row_1_1
                                           ;	.line	762; main.c	matrix_2[row-1][column] = _COLOR_OFF;
004d2a   510c     movf	0xc, 0, 0x1         	MOVF	_TestMatrix2_row_1_1, W, B
004d2c   6e10     movwf	0x10, 0            	MOVWF	r0x00
004d2e   0610     decf	0x10, 0x1, 0        	DECF	r0x00, F
                                           ; ;multiply lit val:0x08 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
004d30   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004d32   0d08     mullw	0x8                	MULLW	0x08
004d34   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
004d36   f010
004d38   6a11     clrf	0x11, 0             	CLRF	r0x01
004d3a   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
004d3c   6811     setf	0x11, 0             	SETF	r0x01
004d3e   0ec0     movlw	0xc0               	MOVLW	LOW(_matrix_2)
004d40   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004d42   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2)
004d44   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004d46   c10e     movff	0x10e, 0x12        	MOVFF	_TestMatrix2_column_1_1, r0x02
004d48   f012
004d4a   c10f     movff	0x10f, 0x13        	MOVFF	(_TestMatrix2_column_1_1 + 1), r0x03
004d4c   f013
004d4e   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
004d50   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004d52   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004d54   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004d56   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
004d58   ffe1
004d5a   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
004d5c   ffe2
004d5e   0e00     movlw	0                  	MOVLW	0x00
004d60   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
004d62   0101     movlb	0x1                	BANKSEL	_TestMatrix2_column_1_1
                                           ;	.line	760; main.c	for (column = 0; column < 8; column++)
004d64   2b0e     incf	0xe, 0x1, 0x1       	INCF	_TestMatrix2_column_1_1, F, B
004d66   e301     bnc	0x4d6a               	BNC	_30553_DS_
                                           ; removed redundant BANKSEL
004d68   2b0f     incf	0xf, 0x1, 0x1       	INCF	(_TestMatrix2_column_1_1 + 1), F, B
                                           _30553_DS_:
004d6a   d7d7     bra	0x4d1a               	BRA	_00528_DS_
                                           _00531_DS_:
                                           ;	.line	764; main.c	MIOS_Delay(250);
004d6c   0efa     movlw	0xfa               	MOVLW	0xfa
004d6e   ecce     call	0x2d9c, 0           	CALL	_MIOS_Delay
004d70   f016
                                           ;	.line	765; main.c	MIOS_Delay(250);
004d72   0efa     movlw	0xfa               	MOVLW	0xfa
004d74   ecce     call	0x2d9c, 0           	CALL	_MIOS_Delay
004d76   f016
004d78   0101     movlb	0x1                	BANKSEL	_TestMatrix2_row_1_1
                                           ;	.line	754; main.c	for (row = 0; row < 8; row++)
004d7a   2b0c     incf	0xc, 0x1, 0x1       	INCF	_TestMatrix2_row_1_1, F, B
004d7c   e301     bnc	0x4d80               	BNC	_40554_DS_
                                           ; removed redundant BANKSEL
004d7e   2b0d     incf	0xd, 0x1, 0x1       	INCF	(_TestMatrix2_row_1_1 + 1), F, B
                                           _40554_DS_:
004d80   d78f     bra	0x4ca0               	BRA	_00532_DS_
                                           _00535_DS_:
                                           ;	.line	767; main.c	ClearMatrix(1);
004d82   0e00     movlw	0                  	MOVLW	0x00
004d84   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004d86   0e01     movlw	0x1                	MOVLW	0x01
004d88   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
004d8a   f025
004d8c   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	768; main.c	ClearMatrix(2);
004d8e   0e00     movlw	0                  	MOVLW	0x00
004d90   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004d92   0e02     movlw	0x2                	MOVLW	0x02
004d94   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
004d96   f025
004d98   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
004d9a   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
004d9c   f013
004d9e   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
004da0   f012
004da2   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
004da4   f011
004da6   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
004da8   f010
004daa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__TestMatrix1	code
                                           _TestMatrix1:
                                           ;	.line	725; main.c	void TestMatrix1(void) __wparam
004dac   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
004dae   ffed
004db0   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
004db2   ffed
004db4   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
004db6   ffed
004db8   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
004dba   ffed
                                           ;	.line	729; main.c	ClearMatrix(1);
004dbc   0e00     movlw	0                  	MOVLW	0x00
004dbe   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004dc0   0e01     movlw	0x1                	MOVLW	0x01
004dc2   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
004dc4   f025
004dc6   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	730; main.c	ClearMatrix(2);
004dc8   0e00     movlw	0                  	MOVLW	0x00
004dca   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004dcc   0e02     movlw	0x2                	MOVLW	0x02
004dce   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
004dd0   f025
004dd2   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
004dd4   0101     movlb	0x1                	BANKSEL	_TestMatrix1_row_1_1
                                           ;	.line	731; main.c	for (row = 0; row < 8; row++)
004dd6   6b08     clrf	0x8, 0x1            	CLRF	_TestMatrix1_row_1_1, B
                                           ; removed redundant BANKSEL
004dd8   6b09     clrf	0x9, 0x1            	CLRF	(_TestMatrix1_row_1_1 + 1), B
                                           _00505_DS_:
004dda   0101     movlb	0x1                	BANKSEL	(_TestMatrix1_row_1_1 + 1)
004ddc   5109     movf	0x9, 0, 0x1         	MOVF	(_TestMatrix1_row_1_1 + 1), W, B
004dde   0f80     addlw	0x80               	ADDLW	0x80
004de0   0f80     addlw	0x80               	ADDLW	0x80
004de2   e102     bnz	0x4de8               	BNZ	_00517_DS_
004de4   0e08     movlw	0x8                	MOVLW	0x08
                                           ; removed redundant BANKSEL
004de6   5d08     subwf	0x8, 0, 0x1        	SUBWF	_TestMatrix1_row_1_1, W, B
                                           _00517_DS_:
004de8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004dea   d068     bra	0x4ebc               	BRA	_00508_DS_
004dec   0101     movlb	0x1                	BANKSEL	_TestMatrix1_column_1_1
                                           ;	.line	733; main.c	for (column = 0; column < 8; column++)
004dee   6b0a     clrf	0xa, 0x1            	CLRF	_TestMatrix1_column_1_1, B
                                           ; removed redundant BANKSEL
004df0   6b0b     clrf	0xb, 0x1            	CLRF	(_TestMatrix1_column_1_1 + 1), B
                                           _00497_DS_:
004df2   0e00     movlw	0                  	MOVLW	0x00
004df4   0101     movlb	0x1                	BANKSEL	(_TestMatrix1_column_1_1 + 1)
004df6   5d0b     subwf	0xb, 0, 0x1        	SUBWF	(_TestMatrix1_column_1_1 + 1), W, B
004df8   e102     bnz	0x4dfe               	BNZ	_00518_DS_
004dfa   0e08     movlw	0x8                	MOVLW	0x08
                                           ; removed redundant BANKSEL
004dfc   5d0a     subwf	0xa, 0, 0x1        	SUBWF	_TestMatrix1_column_1_1, W, B
                                           _00518_DS_:
004dfe   e227     bc	0x4e4e                	BC	_00500_DS_
004e00   0101     movlb	0x1                	BANKSEL	(_TestMatrix1_row_1_1 + 1)
                                           ;	.line	735; main.c	matrix_1[row][column] = _COLOR_WHITE;
004e02   5109     movf	0x9, 0, 0x1         	MOVF	(_TestMatrix1_row_1_1 + 1), W, B
004e04   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
                                           ; removed redundant BANKSEL
004e06   5108     movf	0x8, 0, 0x1         	MOVF	_TestMatrix1_row_1_1, W, B
004e08   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004e0a   0e00     movlw	0                  	MOVLW	0x00
004e0c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004e0e   0e08     movlw	0x8                	MOVLW	0x08
004e10   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004e12   eca7     call	0x574e, 0           	CALL	__mulint
004e14   f02b
004e16   6e10     movwf	0x10, 0            	MOVWF	r0x00
004e18   cff3     movff	0xff3, 0x11        	MOVFF	PRODL, r0x01
004e1a   f011
004e1c   0e04     movlw	0x4                	MOVLW	0x04
004e1e   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
004e20   0e80     movlw	0x80               	MOVLW	LOW(_matrix_1)
004e22   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004e24   0e00     movlw	0                  	MOVLW	HIGH(_matrix_1)
004e26   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004e28   c10a     movff	0x10a, 0x12        	MOVFF	_TestMatrix1_column_1_1, r0x02
004e2a   f012
004e2c   c10b     movff	0x10b, 0x13        	MOVFF	(_TestMatrix1_column_1_1 + 1), r0x03
004e2e   f013
004e30   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
004e32   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004e34   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004e36   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004e38   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
004e3a   ffe1
004e3c   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
004e3e   ffe2
004e40   0e70     movlw	0x70               	MOVLW	0x70
004e42   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
004e44   0101     movlb	0x1                	BANKSEL	_TestMatrix1_column_1_1
                                           ;	.line	733; main.c	for (column = 0; column < 8; column++)
004e46   2b0a     incf	0xa, 0x1, 0x1       	INCF	_TestMatrix1_column_1_1, F, B
004e48   e301     bnc	0x4e4c               	BNC	_50555_DS_
                                           ; removed redundant BANKSEL
004e4a   2b0b     incf	0xb, 0x1, 0x1       	INCF	(_TestMatrix1_column_1_1 + 1), F, B
                                           _50555_DS_:
004e4c   d7d2     bra	0x4df2               	BRA	_00497_DS_
                                           _00500_DS_:
004e4e   0101     movlb	0x1                	BANKSEL	_TestMatrix1_column_1_1
                                           ;	.line	737; main.c	for (column = 0; column < 8; column++)
004e50   6b0a     clrf	0xa, 0x1            	CLRF	_TestMatrix1_column_1_1, B
                                           ; removed redundant BANKSEL
004e52   6b0b     clrf	0xb, 0x1            	CLRF	(_TestMatrix1_column_1_1 + 1), B
                                           _00501_DS_:
004e54   0e00     movlw	0                  	MOVLW	0x00
004e56   0101     movlb	0x1                	BANKSEL	(_TestMatrix1_column_1_1 + 1)
004e58   5d0b     subwf	0xb, 0, 0x1        	SUBWF	(_TestMatrix1_column_1_1 + 1), W, B
004e5a   e102     bnz	0x4e60               	BNZ	_00519_DS_
004e5c   0e08     movlw	0x8                	MOVLW	0x08
                                           ; removed redundant BANKSEL
004e5e   5d0a     subwf	0xa, 0, 0x1        	SUBWF	_TestMatrix1_column_1_1, W, B
                                           _00519_DS_:
004e60   e222     bc	0x4ea6                	BC	_00504_DS_
004e62   0101     movlb	0x1                	BANKSEL	_TestMatrix1_row_1_1
                                           ;	.line	739; main.c	matrix_1[row-1][column] = _COLOR_OFF;
004e64   5108     movf	0x8, 0, 0x1         	MOVF	_TestMatrix1_row_1_1, W, B
004e66   6e10     movwf	0x10, 0            	MOVWF	r0x00
004e68   0610     decf	0x10, 0x1, 0        	DECF	r0x00, F
                                           ; ;multiply lit val:0x08 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
004e6a   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004e6c   0d08     mullw	0x8                	MULLW	0x08
004e6e   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
004e70   f010
004e72   6a11     clrf	0x11, 0             	CLRF	r0x01
004e74   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
004e76   6811     setf	0x11, 0             	SETF	r0x01
004e78   0e80     movlw	0x80               	MOVLW	LOW(_matrix_1)
004e7a   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004e7c   0e00     movlw	0                  	MOVLW	HIGH(_matrix_1)
004e7e   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004e80   c10a     movff	0x10a, 0x12        	MOVFF	_TestMatrix1_column_1_1, r0x02
004e82   f012
004e84   c10b     movff	0x10b, 0x13        	MOVFF	(_TestMatrix1_column_1_1 + 1), r0x03
004e86   f013
004e88   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
004e8a   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004e8c   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004e8e   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004e90   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
004e92   ffe1
004e94   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
004e96   ffe2
004e98   0e00     movlw	0                  	MOVLW	0x00
004e9a   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
004e9c   0101     movlb	0x1                	BANKSEL	_TestMatrix1_column_1_1
                                           ;	.line	737; main.c	for (column = 0; column < 8; column++)
004e9e   2b0a     incf	0xa, 0x1, 0x1       	INCF	_TestMatrix1_column_1_1, F, B
004ea0   e301     bnc	0x4ea4               	BNC	_60556_DS_
                                           ; removed redundant BANKSEL
004ea2   2b0b     incf	0xb, 0x1, 0x1       	INCF	(_TestMatrix1_column_1_1 + 1), F, B
                                           _60556_DS_:
004ea4   d7d7     bra	0x4e54               	BRA	_00501_DS_
                                           _00504_DS_:
                                           ;	.line	741; main.c	MIOS_Delay(250);
004ea6   0efa     movlw	0xfa               	MOVLW	0xfa
004ea8   ecce     call	0x2d9c, 0           	CALL	_MIOS_Delay
004eaa   f016
                                           ;	.line	742; main.c	MIOS_Delay(250);
004eac   0efa     movlw	0xfa               	MOVLW	0xfa
004eae   ecce     call	0x2d9c, 0           	CALL	_MIOS_Delay
004eb0   f016
004eb2   0101     movlb	0x1                	BANKSEL	_TestMatrix1_row_1_1
                                           ;	.line	731; main.c	for (row = 0; row < 8; row++)
004eb4   2b08     incf	0x8, 0x1, 0x1       	INCF	_TestMatrix1_row_1_1, F, B
004eb6   e301     bnc	0x4eba               	BNC	_70557_DS_
                                           ; removed redundant BANKSEL
004eb8   2b09     incf	0x9, 0x1, 0x1       	INCF	(_TestMatrix1_row_1_1 + 1), F, B
                                           _70557_DS_:
004eba   d78f     bra	0x4dda               	BRA	_00505_DS_
                                           _00508_DS_:
                                           ;	.line	744; main.c	ClearMatrix(1);
004ebc   0e00     movlw	0                  	MOVLW	0x00
004ebe   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004ec0   0e01     movlw	0x1                	MOVLW	0x01
004ec2   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
004ec4   f025
004ec6   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	745; main.c	ClearMatrix(2);
004ec8   0e00     movlw	0                  	MOVLW	0x00
004eca   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004ecc   0e02     movlw	0x2                	MOVLW	0x02
004ece   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
004ed0   f025
004ed2   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
004ed4   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
004ed6   f013
004ed8   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
004eda   f012
004edc   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
004ede   f011
004ee0   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
004ee2   f010
004ee4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DoShutdownPattern	code
                                           _DoShutdownPattern:
                                           ;	.line	701; main.c	void DoShutdownPattern(void) __wparam
00500a   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
00500c   ffed
00500e   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
005010   ffed
005012   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
005014   ffed
005016   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
005018   ffed
                                           ;	.line	705; main.c	ClearMatrix(2);
00501a   0e00     movlw	0                  	MOVLW	0x00
00501c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00501e   0e02     movlw	0x2                	MOVLW	0x02
005020   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
005022   f025
005024   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
005026   0101     movlb	0x1                	BANKSEL	_DoShutdownPattern_row_1_1
                                           ;	.line	706; main.c	for (row = 0; row < 8; row++)
005028   6b04     clrf	0x4, 0x1            	CLRF	_DoShutdownPattern_row_1_1, B
                                           ; removed redundant BANKSEL
00502a   6b05     clrf	0x5, 0x1            	CLRF	(_DoShutdownPattern_row_1_1 + 1), B
                                           _00478_DS_:
00502c   0e00     movlw	0                  	MOVLW	0x00
00502e   0101     movlb	0x1                	BANKSEL	(_DoShutdownPattern_row_1_1 + 1)
005030   5d05     subwf	0x5, 0, 0x1        	SUBWF	(_DoShutdownPattern_row_1_1 + 1), W, B
005032   e102     bnz	0x5038               	BNZ	_00490_DS_
005034   0e08     movlw	0x8                	MOVLW	0x08
                                           ; removed redundant BANKSEL
005036   5d04     subwf	0x4, 0, 0x1        	SUBWF	_DoShutdownPattern_row_1_1, W, B
                                           _00490_DS_:
005038   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00503a   d063     bra	0x5102               	BRA	_00481_DS_
00503c   0101     movlb	0x1                	BANKSEL	_DoShutdownPattern_column_1_1
                                           ;	.line	708; main.c	for (column = 0; column < 8; column++)
00503e   6b06     clrf	0x6, 0x1            	CLRF	_DoShutdownPattern_column_1_1, B
                                           ; removed redundant BANKSEL
005040   6b07     clrf	0x7, 0x1            	CLRF	(_DoShutdownPattern_column_1_1 + 1), B
                                           _00470_DS_:
005042   0e00     movlw	0                  	MOVLW	0x00
005044   0101     movlb	0x1                	BANKSEL	(_DoShutdownPattern_column_1_1 + 1)
005046   5d07     subwf	0x7, 0, 0x1        	SUBWF	(_DoShutdownPattern_column_1_1 + 1), W, B
005048   e102     bnz	0x504e               	BNZ	_00491_DS_
00504a   0e08     movlw	0x8                	MOVLW	0x08
                                           ; removed redundant BANKSEL
00504c   5d06     subwf	0x6, 0, 0x1        	SUBWF	_DoShutdownPattern_column_1_1, W, B
                                           _00491_DS_:
00504e   e227     bc	0x509e                	BC	_00473_DS_
005050   0101     movlb	0x1                	BANKSEL	(_DoShutdownPattern_row_1_1 + 1)
                                           ;	.line	710; main.c	matrix_1[row][column] = _COLOR_BLUE;
005052   5105     movf	0x5, 0, 0x1         	MOVF	(_DoShutdownPattern_row_1_1 + 1), W, B
005054   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
                                           ; removed redundant BANKSEL
005056   5104     movf	0x4, 0, 0x1         	MOVF	_DoShutdownPattern_row_1_1, W, B
005058   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00505a   0e00     movlw	0                  	MOVLW	0x00
00505c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00505e   0e08     movlw	0x8                	MOVLW	0x08
005060   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005062   eca7     call	0x574e, 0           	CALL	__mulint
005064   f02b
005066   6e10     movwf	0x10, 0            	MOVWF	r0x00
005068   cff3     movff	0xff3, 0x11        	MOVFF	PRODL, r0x01
00506a   f011
00506c   0e04     movlw	0x4                	MOVLW	0x04
00506e   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
005070   0e80     movlw	0x80               	MOVLW	LOW(_matrix_1)
005072   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
005074   0e00     movlw	0                  	MOVLW	HIGH(_matrix_1)
005076   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
005078   c106     movff	0x106, 0x12        	MOVFF	_DoShutdownPattern_column_1_1, r0x02
00507a   f012
00507c   c107     movff	0x107, 0x13        	MOVFF	(_DoShutdownPattern_column_1_1 + 1), r0x03
00507e   f013
005080   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
005082   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
005084   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
005086   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
005088   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
00508a   ffe1
00508c   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
00508e   ffe2
005090   0e40     movlw	0x40               	MOVLW	0x40
005092   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
005094   0101     movlb	0x1                	BANKSEL	_DoShutdownPattern_column_1_1
                                           ;	.line	708; main.c	for (column = 0; column < 8; column++)
005096   2b06     incf	0x6, 0x1, 0x1       	INCF	_DoShutdownPattern_column_1_1, F, B
005098   e301     bnc	0x509c               	BNC	_80558_DS_
                                           ; removed redundant BANKSEL
00509a   2b07     incf	0x7, 0x1, 0x1       	INCF	(_DoShutdownPattern_column_1_1 + 1), F, B
                                           _80558_DS_:
00509c   d7d2     bra	0x5042               	BRA	_00470_DS_
                                           _00473_DS_:
00509e   0101     movlb	0x1                	BANKSEL	_DoShutdownPattern_column_1_1
                                           ;	.line	712; main.c	for (column = 0; column < 8; column++)
0050a0   6b06     clrf	0x6, 0x1            	CLRF	_DoShutdownPattern_column_1_1, B
                                           ; removed redundant BANKSEL
0050a2   6b07     clrf	0x7, 0x1            	CLRF	(_DoShutdownPattern_column_1_1 + 1), B
                                           _00474_DS_:
0050a4   0e00     movlw	0                  	MOVLW	0x00
0050a6   0101     movlb	0x1                	BANKSEL	(_DoShutdownPattern_column_1_1 + 1)
0050a8   5d07     subwf	0x7, 0, 0x1        	SUBWF	(_DoShutdownPattern_column_1_1 + 1), W, B
0050aa   e102     bnz	0x50b0               	BNZ	_00492_DS_
0050ac   0e08     movlw	0x8                	MOVLW	0x08
                                           ; removed redundant BANKSEL
0050ae   5d06     subwf	0x6, 0, 0x1        	SUBWF	_DoShutdownPattern_column_1_1, W, B
                                           _00492_DS_:
0050b0   e220     bc	0x50f2                	BC	_00477_DS_
0050b2   0101     movlb	0x1                	BANKSEL	_DoShutdownPattern_row_1_1
                                           ;	.line	714; main.c	matrix_1[row-1][column] = _COLOR_OFF;
0050b4   5104     movf	0x4, 0, 0x1         	MOVF	_DoShutdownPattern_row_1_1, W, B
0050b6   6e10     movwf	0x10, 0            	MOVWF	r0x00
0050b8   0610     decf	0x10, 0x1, 0        	DECF	r0x00, F
                                           ; ;multiply lit val:0x08 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0050ba   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0050bc   0d08     mullw	0x8                	MULLW	0x08
0050be   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
0050c0   f010
0050c2   6a11     clrf	0x11, 0             	CLRF	r0x01
0050c4   0e80     movlw	0x80               	MOVLW	LOW(_matrix_1)
0050c6   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
0050c8   0e00     movlw	0                  	MOVLW	HIGH(_matrix_1)
0050ca   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
0050cc   c106     movff	0x106, 0x12        	MOVFF	_DoShutdownPattern_column_1_1, r0x02
0050ce   f012
0050d0   c107     movff	0x107, 0x13        	MOVFF	(_DoShutdownPattern_column_1_1 + 1), r0x03
0050d2   f013
0050d4   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0050d6   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
0050d8   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0050da   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
0050dc   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
0050de   ffe1
0050e0   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
0050e2   ffe2
0050e4   0e00     movlw	0                  	MOVLW	0x00
0050e6   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
0050e8   0101     movlb	0x1                	BANKSEL	_DoShutdownPattern_column_1_1
                                           ;	.line	712; main.c	for (column = 0; column < 8; column++)
0050ea   2b06     incf	0x6, 0x1, 0x1       	INCF	_DoShutdownPattern_column_1_1, F, B
0050ec   e301     bnc	0x50f0               	BNC	_90559_DS_
                                           ; removed redundant BANKSEL
0050ee   2b07     incf	0x7, 0x1, 0x1       	INCF	(_DoShutdownPattern_column_1_1 + 1), F, B
                                           _90559_DS_:
0050f0   d7d9     bra	0x50a4               	BRA	_00474_DS_
                                           _00477_DS_:
                                           ;	.line	716; main.c	MIOS_Delay(40);
0050f2   0e28     movlw	0x28               	MOVLW	0x28
0050f4   ecce     call	0x2d9c, 0           	CALL	_MIOS_Delay
0050f6   f016
0050f8   0101     movlb	0x1                	BANKSEL	_DoShutdownPattern_row_1_1
                                           ;	.line	706; main.c	for (row = 0; row < 8; row++)
0050fa   2b04     incf	0x4, 0x1, 0x1       	INCF	_DoShutdownPattern_row_1_1, F, B
0050fc   e301     bnc	0x5100               	BNC	_100560_DS_
                                           ; removed redundant BANKSEL
0050fe   2b05     incf	0x5, 0x1, 0x1       	INCF	(_DoShutdownPattern_row_1_1 + 1), F, B
                                           _100560_DS_:
005100   d795     bra	0x502c               	BRA	_00478_DS_
                                           _00481_DS_:
                                           ;	.line	718; main.c	ClearMatrix(1);
005102   0e00     movlw	0                  	MOVLW	0x00
005104   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005106   0e01     movlw	0x1                	MOVLW	0x01
005108   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
00510a   f025
00510c   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	719; main.c	ClearMatrix(2);
00510e   0e00     movlw	0                  	MOVLW	0x00
005110   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005112   0e02     movlw	0x2                	MOVLW	0x02
005114   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
005116   f025
005118   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
00511a   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
00511c   f013
00511e   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
005120   f012
005122   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
005124   f011
005126   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
005128   f010
00512a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DoStartupPattern	code
                                           _DoStartupPattern:
                                           ;	.line	636; main.c	void DoStartupPattern(void) __wparam
00438c   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
00438e   ffed
004390   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
004392   ffed
004394   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
004396   ffed
004398   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
00439a   ffed
                                           ;	.line	641; main.c	ClearMatrix(1);
00439c   0e00     movlw	0                  	MOVLW	0x00
00439e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0043a0   0e01     movlw	0x1                	MOVLW	0x01
0043a2   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
0043a4   f025
0043a6   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	642; main.c	ClearMatrix(2);
0043a8   0e00     movlw	0                  	MOVLW	0x00
0043aa   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0043ac   0e02     movlw	0x2                	MOVLW	0x02
0043ae   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
0043b0   f025
0043b2   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	643; main.c	for (row = 7; row > -1; row--)
0043b4   0e07     movlw	0x7                	MOVLW	0x07
0043b6   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_row_1_1
0043b8   6f00     movwf	0, 0x1             	MOVWF	_DoStartupPattern_row_1_1, B
                                           ; removed redundant BANKSEL
0043ba   6b01     clrf	0x1, 0x1            	CLRF	(_DoStartupPattern_row_1_1 + 1), B
                                           _00427_DS_:
0043bc   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0043be   0101     movlb	0x1                	BANKSEL	(_DoStartupPattern_row_1_1 + 1)
0043c0   af01     btfss	0x1, 0x7, 0x1      	BTFSS	(_DoStartupPattern_row_1_1 + 1), 7, B
0043c2   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0043c4   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0043c6   d066     bra	0x4494               	BRA	_00430_DS_
0043c8   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_column_1_1
                                           ;	.line	645; main.c	for (column = 0; column < 8; column++)
0043ca   6b02     clrf	0x2, 0x1            	CLRF	_DoStartupPattern_column_1_1, B
                                           ; removed redundant BANKSEL
0043cc   6b03     clrf	0x3, 0x1            	CLRF	(_DoStartupPattern_column_1_1 + 1), B
                                           _00419_DS_:
0043ce   0e00     movlw	0                  	MOVLW	0x00
0043d0   0101     movlb	0x1                	BANKSEL	(_DoStartupPattern_column_1_1 + 1)
0043d2   5d03     subwf	0x3, 0, 0x1        	SUBWF	(_DoStartupPattern_column_1_1 + 1), W, B
0043d4   e102     bnz	0x43da               	BNZ	_00459_DS_
0043d6   0e08     movlw	0x8                	MOVLW	0x08
                                           ; removed redundant BANKSEL
0043d8   5d02     subwf	0x2, 0, 0x1        	SUBWF	_DoStartupPattern_column_1_1, W, B
                                           _00459_DS_:
0043da   e227     bc	0x442a                	BC	_00422_DS_
0043dc   0101     movlb	0x1                	BANKSEL	(_DoStartupPattern_row_1_1 + 1)
                                           ;	.line	647; main.c	matrix_1[row][column] = _COLOR_WHITE;
0043de   5101     movf	0x1, 0, 0x1         	MOVF	(_DoStartupPattern_row_1_1 + 1), W, B
0043e0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
                                           ; removed redundant BANKSEL
0043e2   5100     movf	0, 0, 0x1           	MOVF	_DoStartupPattern_row_1_1, W, B
0043e4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0043e6   0e00     movlw	0                  	MOVLW	0x00
0043e8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0043ea   0e08     movlw	0x8                	MOVLW	0x08
0043ec   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0043ee   eca7     call	0x574e, 0           	CALL	__mulint
0043f0   f02b
0043f2   6e10     movwf	0x10, 0            	MOVWF	r0x00
0043f4   cff3     movff	0xff3, 0x11        	MOVFF	PRODL, r0x01
0043f6   f011
0043f8   0e04     movlw	0x4                	MOVLW	0x04
0043fa   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
0043fc   0e80     movlw	0x80               	MOVLW	LOW(_matrix_1)
0043fe   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004400   0e00     movlw	0                  	MOVLW	HIGH(_matrix_1)
004402   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004404   c102     movff	0x102, 0x12        	MOVFF	_DoStartupPattern_column_1_1, r0x02
004406   f012
004408   c103     movff	0x103, 0x13        	MOVFF	(_DoStartupPattern_column_1_1 + 1), r0x03
00440a   f013
00440c   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
00440e   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004410   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004412   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004414   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
004416   ffe1
004418   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
00441a   ffe2
00441c   0e70     movlw	0x70               	MOVLW	0x70
00441e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
004420   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_column_1_1
                                           ;	.line	645; main.c	for (column = 0; column < 8; column++)
004422   2b02     incf	0x2, 0x1, 0x1       	INCF	_DoStartupPattern_column_1_1, F, B
004424   e301     bnc	0x4428               	BNC	_110561_DS_
                                           ; removed redundant BANKSEL
004426   2b03     incf	0x3, 0x1, 0x1       	INCF	(_DoStartupPattern_column_1_1 + 1), F, B
                                           _110561_DS_:
004428   d7d2     bra	0x43ce               	BRA	_00419_DS_
                                           _00422_DS_:
00442a   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_column_1_1
                                           ;	.line	649; main.c	for (column = 0; column < 8; column++)
00442c   6b02     clrf	0x2, 0x1            	CLRF	_DoStartupPattern_column_1_1, B
                                           ; removed redundant BANKSEL
00442e   6b03     clrf	0x3, 0x1            	CLRF	(_DoStartupPattern_column_1_1 + 1), B
                                           _00423_DS_:
004430   0e00     movlw	0                  	MOVLW	0x00
004432   0101     movlb	0x1                	BANKSEL	(_DoStartupPattern_column_1_1 + 1)
004434   5d03     subwf	0x3, 0, 0x1        	SUBWF	(_DoStartupPattern_column_1_1 + 1), W, B
004436   e102     bnz	0x443c               	BNZ	_00460_DS_
004438   0e08     movlw	0x8                	MOVLW	0x08
                                           ; removed redundant BANKSEL
00443a   5d02     subwf	0x2, 0, 0x1        	SUBWF	_DoStartupPattern_column_1_1, W, B
                                           _00460_DS_:
00443c   e222     bc	0x4482                	BC	_00426_DS_
00443e   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_row_1_1
                                           ;	.line	651; main.c	matrix_1[row+1][column] = _COLOR_OFF;
004440   5100     movf	0, 0, 0x1           	MOVF	_DoStartupPattern_row_1_1, W, B
004442   6e10     movwf	0x10, 0            	MOVWF	r0x00
004444   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
                                           ; ;multiply lit val:0x08 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
004446   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004448   0d08     mullw	0x8                	MULLW	0x08
00444a   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
00444c   f010
00444e   6a11     clrf	0x11, 0             	CLRF	r0x01
004450   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
004452   6811     setf	0x11, 0             	SETF	r0x01
004454   0e80     movlw	0x80               	MOVLW	LOW(_matrix_1)
004456   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004458   0e00     movlw	0                  	MOVLW	HIGH(_matrix_1)
00445a   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
00445c   c102     movff	0x102, 0x12        	MOVFF	_DoStartupPattern_column_1_1, r0x02
00445e   f012
004460   c103     movff	0x103, 0x13        	MOVFF	(_DoStartupPattern_column_1_1 + 1), r0x03
004462   f013
004464   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
004466   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004468   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
00446a   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
00446c   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
00446e   ffe1
004470   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
004472   ffe2
004474   0e00     movlw	0                  	MOVLW	0x00
004476   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
004478   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_column_1_1
                                           ;	.line	649; main.c	for (column = 0; column < 8; column++)
00447a   2b02     incf	0x2, 0x1, 0x1       	INCF	_DoStartupPattern_column_1_1, F, B
00447c   e301     bnc	0x4480               	BNC	_120562_DS_
                                           ; removed redundant BANKSEL
00447e   2b03     incf	0x3, 0x1, 0x1       	INCF	(_DoStartupPattern_column_1_1 + 1), F, B
                                           _120562_DS_:
004480   d7d7     bra	0x4430               	BRA	_00423_DS_
                                           _00426_DS_:
                                           ;	.line	653; main.c	MIOS_Delay(25);
004482   0e19     movlw	0x19               	MOVLW	0x19
004484   ecce     call	0x2d9c, 0           	CALL	_MIOS_Delay
004486   f016
                                           ;	.line	643; main.c	for (row = 7; row > -1; row--)
004488   0eff     movlw	0xff               	MOVLW	0xff
00448a   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_row_1_1
00448c   2700     addwf	0, 0x1, 0x1        	ADDWF	_DoStartupPattern_row_1_1, F, B
00448e   e201     bc	0x4492                	BC	_130563_DS_
                                           ; removed redundant BANKSEL
004490   0701     decf	0x1, 0x1, 0x1       	DECF	(_DoStartupPattern_row_1_1 + 1), F, B
                                           _130563_DS_:
004492   d794     bra	0x43bc               	BRA	_00427_DS_
                                           _00430_DS_:
                                           ;	.line	655; main.c	ClearMatrix(1);
004494   0e00     movlw	0                  	MOVLW	0x00
004496   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004498   0e01     movlw	0x1                	MOVLW	0x01
00449a   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
00449c   f025
00449e   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	656; main.c	ClearMatrix(2);
0044a0   0e00     movlw	0                  	MOVLW	0x00
0044a2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0044a4   0e02     movlw	0x2                	MOVLW	0x02
0044a6   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
0044a8   f025
0044aa   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
0044ac   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_row_1_1
                                           ;	.line	657; main.c	for (row = 0; row < 6; row++)
0044ae   6b00     clrf	0, 0x1              	CLRF	_DoStartupPattern_row_1_1, B
                                           ; removed redundant BANKSEL
0044b0   6b01     clrf	0x1, 0x1            	CLRF	(_DoStartupPattern_row_1_1 + 1), B
                                           _00439_DS_:
0044b2   0101     movlb	0x1                	BANKSEL	(_DoStartupPattern_row_1_1 + 1)
0044b4   5101     movf	0x1, 0, 0x1         	MOVF	(_DoStartupPattern_row_1_1 + 1), W, B
0044b6   0f80     addlw	0x80               	ADDLW	0x80
0044b8   0f80     addlw	0x80               	ADDLW	0x80
0044ba   e102     bnz	0x44c0               	BNZ	_00461_DS_
0044bc   0e06     movlw	0x6                	MOVLW	0x06
                                           ; removed redundant BANKSEL
0044be   5d00     subwf	0, 0, 0x1          	SUBWF	_DoStartupPattern_row_1_1, W, B
                                           _00461_DS_:
0044c0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0044c2   d0d1     bra	0x4666               	BRA	_00442_DS_
                                           ;	.line	659; main.c	switch (row)
0044c4   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0044c6   0101     movlb	0x1                	BANKSEL	(_DoStartupPattern_row_1_1 + 1)
0044c8   af01     btfss	0x1, 0x7, 0x1      	BTFSS	(_DoStartupPattern_row_1_1 + 1), 7, B
0044ca   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0044cc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0044ce   d048     bra	0x4560               	BRA	_00417_DS_
                                           ; removed redundant BANKSEL
0044d0   5101     movf	0x1, 0, 0x1         	MOVF	(_DoStartupPattern_row_1_1 + 1), W, B
0044d2   0f80     addlw	0x80               	ADDLW	0x80
0044d4   0f80     addlw	0x80               	ADDLW	0x80
0044d6   e102     bnz	0x44dc               	BNZ	_00462_DS_
0044d8   0e06     movlw	0x6                	MOVLW	0x06
                                           ; removed redundant BANKSEL
0044da   5d00     subwf	0, 0, 0x1          	SUBWF	_DoStartupPattern_row_1_1, W, B
                                           _00462_DS_:
0044dc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0044de   d040     bra	0x4560               	BRA	_00417_DS_
0044e0   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
0044e2   ffed
0044e4   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
0044e6   ffed
0044e8   6a15     clrf	0x15, 0             	CLRF	r0x05
0044ea   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_row_1_1
0044ec   3500     rlcf	0, 0, 0x1           	RLCF	_DoStartupPattern_row_1_1, W, B
0044ee   3615     rlcf	0x15, 0x1, 0        	RLCF	r0x05, F
0044f0   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
0044f2   3615     rlcf	0x15, 0x1, 0        	RLCF	r0x05, F
0044f4   0bfc     andlw	0xfc               	ANDLW	0xfc
0044f6   6e14     movwf	0x14, 0            	MOVWF	r0x04
0044f8   0e00     movlw	0                  	MOVLW	UPPER(_00463_DS_)
0044fa   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0044fc   0e45     movlw	0x45               	MOVLW	HIGH(_00463_DS_)
0044fe   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
004500   0e18     movlw	0x18               	MOVLW	LOW(_00463_DS_)
004502   2614     addwf	0x14, 0x1, 0       	ADDWF	r0x04, F
004504   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
004506   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
004508   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00450a   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
00450c   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
00450e   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
004510   f015
004512   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
004514   f014
004516   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00463_DS_:
004518   ef98     goto	0x4530              	GOTO	_00411_DS_
00451a   f022
00451c   ef9c     goto	0x4538              	GOTO	_00412_DS_
00451e   f022
004520   efa0     goto	0x4540              	GOTO	_00413_DS_
004522   f022
004524   efa4     goto	0x4548              	GOTO	_00414_DS_
004526   f022
004528   efa8     goto	0x4550              	GOTO	_00415_DS_
00452a   f022
00452c   efac     goto	0x4558              	GOTO	_00416_DS_
00452e   f022
                                           _00411_DS_:
                                           ;	.line	662; main.c	color = _COLOR_CYAN;
004530   0e60     movlw	0x60               	MOVLW	0x60
004532   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_color_1_1
004534   6f23     movwf	0x23, 0x1          	MOVWF	_DoStartupPattern_color_1_1, B
                                           ;	.line	663; main.c	break;
004536   d016     bra	0x4564               	BRA	_00418_DS_
                                           _00412_DS_:
                                           ;	.line	665; main.c	color = _COLOR_BLUE;
004538   0e40     movlw	0x40               	MOVLW	0x40
00453a   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_color_1_1
00453c   6f23     movwf	0x23, 0x1          	MOVWF	_DoStartupPattern_color_1_1, B
                                           ;	.line	666; main.c	break;
00453e   d012     bra	0x4564               	BRA	_00418_DS_
                                           _00413_DS_:
                                           ;	.line	668; main.c	color = _COLOR_MAGENTA;
004540   0e50     movlw	0x50               	MOVLW	0x50
004542   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_color_1_1
004544   6f23     movwf	0x23, 0x1          	MOVWF	_DoStartupPattern_color_1_1, B
                                           ;	.line	669; main.c	break;
004546   d00e     bra	0x4564               	BRA	_00418_DS_
                                           _00414_DS_:
                                           ;	.line	671; main.c	color = _COLOR_RED;
004548   0e10     movlw	0x10               	MOVLW	0x10
00454a   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_color_1_1
00454c   6f23     movwf	0x23, 0x1          	MOVWF	_DoStartupPattern_color_1_1, B
                                           ;	.line	672; main.c	break;
00454e   d00a     bra	0x4564               	BRA	_00418_DS_
                                           _00415_DS_:
                                           ;	.line	674; main.c	color = _COLOR_YELLOW;
004550   0e30     movlw	0x30               	MOVLW	0x30
004552   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_color_1_1
004554   6f23     movwf	0x23, 0x1          	MOVWF	_DoStartupPattern_color_1_1, B
                                           ;	.line	675; main.c	break;
004556   d006     bra	0x4564               	BRA	_00418_DS_
                                           _00416_DS_:
                                           ;	.line	677; main.c	color = _COLOR_GREEN;
004558   0e20     movlw	0x20               	MOVLW	0x20
00455a   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_color_1_1
00455c   6f23     movwf	0x23, 0x1          	MOVWF	_DoStartupPattern_color_1_1, B
                                           ;	.line	678; main.c	break;
00455e   d002     bra	0x4564               	BRA	_00418_DS_
                                           _00417_DS_:
004560   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_color_1_1
                                           ;	.line	681; main.c	color = _COLOR_OFF;
004562   6b23     clrf	0x23, 0x1           	CLRF	_DoStartupPattern_color_1_1, B
                                           _00418_DS_:
004564   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_column_1_1
                                           ;	.line	684; main.c	for (column = 0; column < 8; column++)
004566   6b02     clrf	0x2, 0x1            	CLRF	_DoStartupPattern_column_1_1, B
                                           ; removed redundant BANKSEL
004568   6b03     clrf	0x3, 0x1            	CLRF	(_DoStartupPattern_column_1_1 + 1), B
                                           _00431_DS_:
00456a   0e00     movlw	0                  	MOVLW	0x00
00456c   0101     movlb	0x1                	BANKSEL	(_DoStartupPattern_column_1_1 + 1)
00456e   5d03     subwf	0x3, 0, 0x1        	SUBWF	(_DoStartupPattern_column_1_1 + 1), W, B
004570   e102     bnz	0x4576               	BNZ	_00464_DS_
004572   0e08     movlw	0x8                	MOVLW	0x08
                                           ; removed redundant BANKSEL
004574   5d02     subwf	0x2, 0, 0x1        	SUBWF	_DoStartupPattern_column_1_1, W, B
                                           _00464_DS_:
004576   e236     bc	0x45e4                	BC	_00434_DS_
                                           ;	.line	686; main.c	matrix_2[row/2][column] = color;
004578   0e00     movlw	0                  	MOVLW	0x00
00457a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00457c   0e02     movlw	0x2                	MOVLW	0x02
00457e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004580   0101     movlb	0x1                	BANKSEL	(_DoStartupPattern_row_1_1 + 1)
004582   5101     movf	0x1, 0, 0x1         	MOVF	(_DoStartupPattern_row_1_1 + 1), W, B
004584   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
                                           ; removed redundant BANKSEL
004586   5100     movf	0, 0, 0x1           	MOVF	_DoStartupPattern_row_1_1, W, B
004588   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00458a   ec9f     call	0x533e, 0           	CALL	__divsint
00458c   f029
00458e   6e10     movwf	0x10, 0            	MOVWF	r0x00
004590   cff3     movff	0xff3, 0x11        	MOVFF	PRODL, r0x01
004592   f011
004594   0e04     movlw	0x4                	MOVLW	0x04
004596   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
004598   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00459a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00459c   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00459e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0045a0   0e00     movlw	0                  	MOVLW	0x00
0045a2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0045a4   0e08     movlw	0x8                	MOVLW	0x08
0045a6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0045a8   eca7     call	0x574e, 0           	CALL	__mulint
0045aa   f02b
0045ac   6e10     movwf	0x10, 0            	MOVWF	r0x00
0045ae   cff3     movff	0xff3, 0x11        	MOVFF	PRODL, r0x01
0045b0   f011
0045b2   0e04     movlw	0x4                	MOVLW	0x04
0045b4   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
0045b6   0ec0     movlw	0xc0               	MOVLW	LOW(_matrix_2)
0045b8   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
0045ba   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2)
0045bc   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
0045be   c102     movff	0x102, 0x12        	MOVFF	_DoStartupPattern_column_1_1, r0x02
0045c0   f012
0045c2   c103     movff	0x103, 0x13        	MOVFF	(_DoStartupPattern_column_1_1 + 1), r0x03
0045c4   f013
0045c6   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0045c8   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
0045ca   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0045cc   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
0045ce   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
0045d0   ffe1
0045d2   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
0045d4   ffe2
0045d6   c123     movff	0x123, 0xfe7       	MOVFF	_DoStartupPattern_color_1_1, INDF0
0045d8   ffe7
0045da   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_column_1_1
                                           ;	.line	684; main.c	for (column = 0; column < 8; column++)
0045dc   2b02     incf	0x2, 0x1, 0x1       	INCF	_DoStartupPattern_column_1_1, F, B
0045de   e301     bnc	0x45e2               	BNC	_140564_DS_
                                           ; removed redundant BANKSEL
0045e0   2b03     incf	0x3, 0x1, 0x1       	INCF	(_DoStartupPattern_column_1_1 + 1), F, B
                                           _140564_DS_:
0045e2   d7c3     bra	0x456a               	BRA	_00431_DS_
                                           _00434_DS_:
0045e4   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_column_1_1
                                           ;	.line	688; main.c	for (column = 0; column < 8; column++)
0045e6   6b02     clrf	0x2, 0x1            	CLRF	_DoStartupPattern_column_1_1, B
                                           ; removed redundant BANKSEL
0045e8   6b03     clrf	0x3, 0x1            	CLRF	(_DoStartupPattern_column_1_1 + 1), B
                                           _00435_DS_:
0045ea   0e00     movlw	0                  	MOVLW	0x00
0045ec   0101     movlb	0x1                	BANKSEL	(_DoStartupPattern_column_1_1 + 1)
0045ee   5d03     subwf	0x3, 0, 0x1        	SUBWF	(_DoStartupPattern_column_1_1 + 1), W, B
0045f0   e102     bnz	0x45f6               	BNZ	_00465_DS_
0045f2   0e08     movlw	0x8                	MOVLW	0x08
                                           ; removed redundant BANKSEL
0045f4   5d02     subwf	0x2, 0, 0x1        	SUBWF	_DoStartupPattern_column_1_1, W, B
                                           _00465_DS_:
0045f6   e22f     bc	0x4656                	BC	_00438_DS_
                                           ;	.line	690; main.c	matrix_2[(row/2)-1][column] = _COLOR_OFF;
0045f8   0e00     movlw	0                  	MOVLW	0x00
0045fa   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0045fc   0e02     movlw	0x2                	MOVLW	0x02
0045fe   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004600   0101     movlb	0x1                	BANKSEL	(_DoStartupPattern_row_1_1 + 1)
004602   5101     movf	0x1, 0, 0x1         	MOVF	(_DoStartupPattern_row_1_1 + 1), W, B
004604   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
                                           ; removed redundant BANKSEL
004606   5100     movf	0, 0, 0x1           	MOVF	_DoStartupPattern_row_1_1, W, B
004608   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00460a   ec9f     call	0x533e, 0           	CALL	__divsint
00460c   f029
00460e   6e10     movwf	0x10, 0            	MOVWF	r0x00
004610   cff3     movff	0xff3, 0x11        	MOVFF	PRODL, r0x01
004612   f011
004614   0e04     movlw	0x4                	MOVLW	0x04
004616   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
004618   0610     decf	0x10, 0x1, 0        	DECF	r0x00, F
                                           ; ;multiply lit val:0x08 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00461a   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00461c   0d08     mullw	0x8                	MULLW	0x08
00461e   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
004620   f010
004622   6a11     clrf	0x11, 0             	CLRF	r0x01
004624   be10     btfsc	0x10, 0x7, 0       	BTFSC	r0x00, 7
004626   6811     setf	0x11, 0             	SETF	r0x01
004628   0ec0     movlw	0xc0               	MOVLW	LOW(_matrix_2)
00462a   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
00462c   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2)
00462e   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004630   c102     movff	0x102, 0x12        	MOVFF	_DoStartupPattern_column_1_1, r0x02
004632   f012
004634   c103     movff	0x103, 0x13        	MOVFF	(_DoStartupPattern_column_1_1 + 1), r0x03
004636   f013
004638   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
00463a   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
00463c   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
00463e   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004640   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
004642   ffe1
004644   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
004646   ffe2
004648   0e00     movlw	0                  	MOVLW	0x00
00464a   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
00464c   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_column_1_1
                                           ;	.line	688; main.c	for (column = 0; column < 8; column++)
00464e   2b02     incf	0x2, 0x1, 0x1       	INCF	_DoStartupPattern_column_1_1, F, B
004650   e301     bnc	0x4654               	BNC	_150565_DS_
                                           ; removed redundant BANKSEL
004652   2b03     incf	0x3, 0x1, 0x1       	INCF	(_DoStartupPattern_column_1_1 + 1), F, B
                                           _150565_DS_:
004654   d7ca     bra	0x45ea               	BRA	_00435_DS_
                                           _00438_DS_:
                                           ;	.line	692; main.c	MIOS_Delay(150);
004656   0e96     movlw	0x96               	MOVLW	0x96
004658   ecce     call	0x2d9c, 0           	CALL	_MIOS_Delay
00465a   f016
00465c   0101     movlb	0x1                	BANKSEL	_DoStartupPattern_row_1_1
                                           ;	.line	657; main.c	for (row = 0; row < 6; row++)
00465e   2b00     incf	0, 0x1, 0x1         	INCF	_DoStartupPattern_row_1_1, F, B
004660   e301     bnc	0x4664               	BNC	_160566_DS_
                                           ; removed redundant BANKSEL
004662   2b01     incf	0x1, 0x1, 0x1       	INCF	(_DoStartupPattern_row_1_1 + 1), F, B
                                           _160566_DS_:
004664   d726     bra	0x44b2               	BRA	_00439_DS_
                                           _00442_DS_:
                                           ;	.line	694; main.c	ClearMatrix(1);
004666   0e00     movlw	0                  	MOVLW	0x00
004668   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00466a   0e01     movlw	0x1                	MOVLW	0x01
00466c   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
00466e   f025
004670   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	695; main.c	ClearMatrix(2);
004672   0e00     movlw	0                  	MOVLW	0x00
004674   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004676   0e02     movlw	0x2                	MOVLW	0x02
004678   ec8e     call	0x4b1c, 0           	CALL	_ClearMatrix
00467a   f025
00467c   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
00467e   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
004680   f013
004682   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
004684   f012
004686   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
004688   f011
00468a   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
00468c   f010
00468e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ClearMatrix	code
                                           _ClearMatrix:
                                           ;	.line	584; main.c	void ClearMatrix(unsigned int matrixIndex) __wparam
004b1c   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004b1e   ffed
004b20   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
004b22   ffd9
004b24   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
004b26   ffed
004b28   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
004b2a   ffed
004b2c   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
004b2e   ffed
004b30   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
004b32   ffed
004b34   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
004b36   ffed
004b38   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
004b3a   ffed
004b3c   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
004b3e   ffed
004b40   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
004b42   ffed
004b44   c018     movff	0x18, 0xfed        	MOVFF	r0x08, POSTDEC1
004b46   ffed
004b48   c019     movff	0x19, 0xfed        	MOVFF	r0x09, POSTDEC1
004b4a   ffed
004b4c   6e10     movwf	0x10, 0            	MOVWF	r0x00
004b4e   0e02     movlw	0x2                	MOVLW	0x02
004b50   cfdb     movff	0xfdb, 0x11        	MOVFF	PLUSW2, r0x01
004b52   f011
                                           ;	.line	588; main.c	switch (matrixIndex)
004b54   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004b56   0a01     xorlw	0x1                	XORLW	0x01
004b58   e102     bnz	0x4b5e               	BNZ	_00400_DS_
004b5a   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004b5c   e006     bz	0x4b6a                	BZ	_00390_DS_
                                           _00400_DS_:
004b5e   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004b60   0a02     xorlw	0x2                	XORLW	0x02
004b62   e102     bnz	0x4b68               	BNZ	_00402_DS_
004b64   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004b66   e038     bz	0x4bd8                	BZ	_00394_DS_
                                           _00402_DS_:
004b68   d06d     bra	0x4c44               	BRA	_00383_DS_
                                           _00390_DS_:
                                           ;	.line	591; main.c	for (row = 0; row < 8; row++)
004b6a   6a10     clrf	0x10, 0             	CLRF	r0x00
004b6c   6a11     clrf	0x11, 0             	CLRF	r0x01
004b6e   6a12     clrf	0x12, 0             	CLRF	r0x02
004b70   6a13     clrf	0x13, 0             	CLRF	r0x03
                                           _00371_DS_:
004b72   0e00     movlw	0                  	MOVLW	0x00
004b74   5c11     subwf	0x11, 0, 0         	SUBWF	r0x01, W
004b76   e102     bnz	0x4b7c               	BNZ	_00403_DS_
004b78   0e08     movlw	0x8                	MOVLW	0x08
004b7a   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
                                           _00403_DS_:
004b7c   e226     bc	0x4bca                	BC	_00374_DS_
                                           ;	.line	593; main.c	for (column = 0; column < 8; column++)
004b7e   0e80     movlw	0x80               	MOVLW	LOW(_matrix_1)
004b80   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
004b82   6e14     movwf	0x14, 0            	MOVWF	r0x04
004b84   0e00     movlw	0                  	MOVLW	HIGH(_matrix_1)
004b86   2013     addwfc	0x13, 0, 0        	ADDWFC	r0x03, W
004b88   6e15     movwf	0x15, 0            	MOVWF	r0x05
004b8a   6a16     clrf	0x16, 0             	CLRF	r0x06
004b8c   6a17     clrf	0x17, 0             	CLRF	r0x07
                                           _00367_DS_:
004b8e   0e00     movlw	0                  	MOVLW	0x00
004b90   5c17     subwf	0x17, 0, 0         	SUBWF	r0x07, W
004b92   e102     bnz	0x4b98               	BNZ	_00404_DS_
004b94   0e08     movlw	0x8                	MOVLW	0x08
004b96   5c16     subwf	0x16, 0, 0         	SUBWF	r0x06, W
                                           _00404_DS_:
004b98   e210     bc	0x4bba                	BC	_00373_DS_
                                           ;	.line	595; main.c	matrix_1[row][column] = _COLOR_OFF;
004b9a   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
004b9c   2414     addwf	0x14, 0, 0         	ADDWF	r0x04, W
004b9e   6e18     movwf	0x18, 0            	MOVWF	r0x08
004ba0   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
004ba2   2015     addwfc	0x15, 0, 0        	ADDWFC	r0x05, W
004ba4   6e19     movwf	0x19, 0            	MOVWF	r0x09
004ba6   c018     movff	0x18, 0xfe1        	MOVFF	r0x08, FSR0L
004ba8   ffe1
004baa   c019     movff	0x19, 0xfe2        	MOVFF	r0x09, FSR0H
004bac   ffe2
004bae   0e00     movlw	0                  	MOVLW	0x00
004bb0   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	593; main.c	for (column = 0; column < 8; column++)
004bb2   2a16     incf	0x16, 0x1, 0        	INCF	r0x06, F
004bb4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004bb6   2a17     incf	0x17, 0x1, 0        	INCF	r0x07, F
004bb8   d7ea     bra	0x4b8e               	BRA	_00367_DS_
                                           _00373_DS_:
                                           ;	.line	591; main.c	for (row = 0; row < 8; row++)
004bba   0e08     movlw	0x8                	MOVLW	0x08
004bbc   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
004bbe   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004bc0   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
004bc2   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
004bc4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004bc6   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
004bc8   d7d4     bra	0x4b72               	BRA	_00371_DS_
                                           _00374_DS_:
                                           ;	.line	598; main.c	MIOS_DOUT_SRSet(_MATRIX_1_DOUT_START, 0);
004bca   0e00     movlw	0                  	MOVLW	0x00
004bcc   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004bce   0e00     movlw	0                  	MOVLW	0x00
004bd0   ec3e     call	0x5c7c, 0           	CALL	_MIOS_DOUT_SRSet
004bd2   f02e
004bd4   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	599; main.c	break;
004bd6   d036     bra	0x4c44               	BRA	_00383_DS_
                                           _00394_DS_:
                                           ;	.line	602; main.c	for (row = 0; row < 8; row++)
004bd8   6a10     clrf	0x10, 0             	CLRF	r0x00
004bda   6a11     clrf	0x11, 0             	CLRF	r0x01
004bdc   6a12     clrf	0x12, 0             	CLRF	r0x02
004bde   6a13     clrf	0x13, 0             	CLRF	r0x03
                                           _00379_DS_:
004be0   0e00     movlw	0                  	MOVLW	0x00
004be2   5c11     subwf	0x11, 0, 0         	SUBWF	r0x01, W
004be4   e102     bnz	0x4bea               	BNZ	_00405_DS_
004be6   0e08     movlw	0x8                	MOVLW	0x08
004be8   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
                                           _00405_DS_:
004bea   e226     bc	0x4c38                	BC	_00382_DS_
                                           ;	.line	604; main.c	for (column = 0; column < 8; column++)
004bec   0ec0     movlw	0xc0               	MOVLW	LOW(_matrix_2)
004bee   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
004bf0   6e14     movwf	0x14, 0            	MOVWF	r0x04
004bf2   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2)
004bf4   2013     addwfc	0x13, 0, 0        	ADDWFC	r0x03, W
004bf6   6e15     movwf	0x15, 0            	MOVWF	r0x05
004bf8   6a16     clrf	0x16, 0             	CLRF	r0x06
004bfa   6a17     clrf	0x17, 0             	CLRF	r0x07
                                           _00375_DS_:
004bfc   0e00     movlw	0                  	MOVLW	0x00
004bfe   5c17     subwf	0x17, 0, 0         	SUBWF	r0x07, W
004c00   e102     bnz	0x4c06               	BNZ	_00406_DS_
004c02   0e08     movlw	0x8                	MOVLW	0x08
004c04   5c16     subwf	0x16, 0, 0         	SUBWF	r0x06, W
                                           _00406_DS_:
004c06   e210     bc	0x4c28                	BC	_00381_DS_
                                           ;	.line	606; main.c	matrix_2[row][column] = _COLOR_OFF;
004c08   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
004c0a   2414     addwf	0x14, 0, 0         	ADDWF	r0x04, W
004c0c   6e18     movwf	0x18, 0            	MOVWF	r0x08
004c0e   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
004c10   2015     addwfc	0x15, 0, 0        	ADDWFC	r0x05, W
004c12   6e19     movwf	0x19, 0            	MOVWF	r0x09
004c14   c018     movff	0x18, 0xfe1        	MOVFF	r0x08, FSR0L
004c16   ffe1
004c18   c019     movff	0x19, 0xfe2        	MOVFF	r0x09, FSR0H
004c1a   ffe2
004c1c   0e00     movlw	0                  	MOVLW	0x00
004c1e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	604; main.c	for (column = 0; column < 8; column++)
004c20   2a16     incf	0x16, 0x1, 0        	INCF	r0x06, F
004c22   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004c24   2a17     incf	0x17, 0x1, 0        	INCF	r0x07, F
004c26   d7ea     bra	0x4bfc               	BRA	_00375_DS_
                                           _00381_DS_:
                                           ;	.line	602; main.c	for (row = 0; row < 8; row++)
004c28   0e08     movlw	0x8                	MOVLW	0x08
004c2a   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
004c2c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004c2e   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
004c30   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
004c32   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004c34   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
004c36   d7d4     bra	0x4be0               	BRA	_00379_DS_
                                           _00382_DS_:
                                           ;	.line	609; main.c	MIOS_DOUT_SRSet(_MATRIX_2_DOUT_START, 0);
004c38   0e00     movlw	0                  	MOVLW	0x00
004c3a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004c3c   0e04     movlw	0x4                	MOVLW	0x04
004c3e   ec3e     call	0x5c7c, 0           	CALL	_MIOS_DOUT_SRSet
004c40   f02e
004c42   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           _00383_DS_:
                                           ;	.line	614; main.c	}
004c44   cfec     movff	0xfec, 0x19        	MOVFF	PREINC1, r0x09
004c46   f019
004c48   cfec     movff	0xfec, 0x18        	MOVFF	PREINC1, r0x08
004c4a   f018
004c4c   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
004c4e   f017
004c50   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
004c52   f016
004c54   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
004c56   f015
004c58   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
004c5a   f014
004c5c   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
004c5e   f013
004c60   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
004c62   f012
004c64   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
004c66   f011
004c68   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
004c6a   f010
004c6c   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004c6e   ffd9
004c70   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__AIN_NotifyChange	code
                                           _AIN_NotifyChange:
                                           ;	.line	554; main.c	void AIN_NotifyChange(unsigned char pin, unsigned int pin_value) __wparam
0055e0   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
0055e2   ffed
0055e4   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
0055e6   ffd9
0055e8   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
0055ea   ffed
0055ec   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
0055ee   ffed
0055f0   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
0055f2   ffed
0055f4   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
0055f6   ffed
0055f8   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
0055fa   ffed
0055fc   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	556; main.c	MIOS_MIDI_BeginStream();
0055fe   ec00     call	0x2c00, 0           	CALL	_MIOS_MIDI_BeginStream
005600   f016
                                           ; ;multiply lit val:0x02 by variable r0x00 and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	557; main.c	MIOS_MIDI_TxBufferPut(pot_event_map[pin][0]); // first value from table
005602   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
005604   3410     rlcf	0x10, 0, 0          	RLCF	r0x00, W
005606   6e11     movwf	0x11, 0            	MOVWF	r0x01
005608   0ee6     movlw	0xe6               	MOVLW	LOW(_pot_event_map)
00560a   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
00560c   6e12     movwf	0x12, 0            	MOVWF	r0x02
00560e   6a13     clrf	0x13, 0             	CLRF	r0x03
005610   0e4e     movlw	0x4e               	MOVLW	HIGH(_pot_event_map)
005612   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
005614   6a14     clrf	0x14, 0             	CLRF	r0x04
005616   0e00     movlw	0                  	MOVLW	UPPER(_pot_event_map)
005618   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
00561a   c012     movff	0x12, 0xff6        	MOVFF	r0x02, TBLPTRL
00561c   fff6
00561e   c013     movff	0x13, 0xff7        	MOVFF	r0x03, TBLPTRH
005620   fff7
005622   c014     movff	0x14, 0xff8        	MOVFF	r0x04, TBLPTRU
005624   fff8
005626   0009     tblrd	*+                 	TBLRD*+	
005628   cff5     movff	0xff5, 0x12        	MOVFF	TABLAT, r0x02
00562a   f012
00562c   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
00562e   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
005630   f016
                                           ;	.line	558; main.c	MIOS_MIDI_TxBufferPut(pot_event_map[pin][1]); // second value from table
005632   6a12     clrf	0x12, 0             	CLRF	r0x02
005634   6a13     clrf	0x13, 0             	CLRF	r0x03
005636   0ee6     movlw	0xe6               	MOVLW	LOW(_pot_event_map)
005638   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
00563a   0e4e     movlw	0x4e               	MOVLW	HIGH(_pot_event_map)
00563c   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
00563e   0e00     movlw	0                  	MOVLW	UPPER(_pot_event_map)
005640   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
005642   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
005644   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005646   2a12     incf	0x12, 0x1, 0        	INCF	r0x02, F
005648   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00564a   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
00564c   c011     movff	0x11, 0xff6        	MOVFF	r0x01, TBLPTRL
00564e   fff6
005650   c012     movff	0x12, 0xff7        	MOVFF	r0x02, TBLPTRH
005652   fff7
005654   c013     movff	0x13, 0xff8        	MOVFF	r0x03, TBLPTRU
005656   fff8
005658   0009     tblrd	*+                 	TBLRD*+	
00565a   cff5     movff	0xff5, 0x11        	MOVFF	TABLAT, r0x01
00565c   f011
00565e   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
005660   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
005662   f016
                                           ;	.line	559; main.c	MIOS_MIDI_TxBufferPut(MIOS_AIN_Pin7bitGet(pin)); // 7bit pot value
005664   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005666   ec38     call	0x2c70, 0           	CALL	_MIOS_AIN_Pin7bitGet
005668   f016
00566a   6e11     movwf	0x11, 0            	MOVWF	r0x01
00566c   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00566e   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
005670   f016
                                           ;	.line	560; main.c	MIOS_MIDI_EndStream();
005672   ec08     call	0x2c10, 0           	CALL	_MIOS_MIDI_EndStream
005674   f016
                                           ;	.line	563; main.c	last_ain_pin = pin;
005676   c010     movff	0x10, 0x126        	MOVFF	r0x00, _last_ain_pin
005678   f126
00567a   0101     movlb	0x1                	BANKSEL	_app_flags
                                           ;	.line	564; main.c	app_flags.DISPLAY_UPDATE_REQ = 1;
00567c   8125     bsf	0x25, 0, 0x1         	BSF	_app_flags, 0, B
00567e   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
005680   f014
005682   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
005684   f013
005686   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
005688   f012
00568a   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
00568c   f011
00568e   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
005690   f010
005692   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
005694   ffd9
005696   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ENC_NotifyChange	code
                                           _ENC_NotifyChange:
                                           ;	.line	547; main.c	void ENC_NotifyChange(unsigned char encoder, char incrementer) __wparam
005c46   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
005c48   ffed
005c4a   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
005c4c   ffd9
                                           ;	.line	549; main.c	}
005c4e   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
005c50   ffd9
005c52   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DIN_NotifyToggle	code
                                           _DIN_NotifyToggle:
                                           ;	.line	495; main.c	void DIN_NotifyToggle(unsigned char pin, unsigned char pin_value) __wparam
005238   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
00523a   ffed
00523c   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
00523e   ffd9
005240   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
005242   ffed
005244   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
005246   ffed
005248   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
00524a   ffed
00524c   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
00524e   ffed
005250   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
005252   ffed
005254   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
005256   ffed
005258   6e10     movwf	0x10, 0            	MOVWF	r0x00
00525a   0e02     movlw	0x2                	MOVLW	0x02
00525c   cfdb     movff	0xfdb, 0x11        	MOVFF	PLUSW2, r0x01
00525e   f011
                                           ; ;multiply lit val:0x02 by variable r0x00 and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	499; main.c	channel = button_event_map[pin][0];
005260   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
005262   3410     rlcf	0x10, 0, 0          	RLCF	r0x00, W
005264   6e12     movwf	0x12, 0            	MOVWF	r0x02
005266   6a13     clrf	0x13, 0             	CLRF	r0x03
005268   6a14     clrf	0x14, 0             	CLRF	r0x04
00526a   0e66     movlw	0x66               	MOVLW	LOW(_button_event_map)
00526c   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
00526e   0e4f     movlw	0x4f               	MOVLW	HIGH(_button_event_map)
005270   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
005272   0e00     movlw	0                  	MOVLW	UPPER(_button_event_map)
005274   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
005276   c012     movff	0x12, 0xff6        	MOVFF	r0x02, TBLPTRL
005278   fff6
00527a   c013     movff	0x13, 0xff7        	MOVFF	r0x03, TBLPTRH
00527c   fff7
00527e   c014     movff	0x14, 0xff8        	MOVFF	r0x04, TBLPTRU
005280   fff8
005282   0009     tblrd	*+                 	TBLRD*+	
005284   cff5     movff	0xff5, 0x15        	MOVFF	TABLAT, r0x05
005286   f015
                                           ;	.line	500; main.c	note = button_event_map[pin][1];
005288   2a12     incf	0x12, 0x1, 0        	INCF	r0x02, F
00528a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00528c   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
00528e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005290   2a14     incf	0x14, 0x1, 0        	INCF	r0x04, F
005292   c012     movff	0x12, 0xff6        	MOVFF	r0x02, TBLPTRL
005294   fff6
005296   c013     movff	0x13, 0xff7        	MOVFF	r0x03, TBLPTRH
005298   fff7
00529a   c014     movff	0x14, 0xff8        	MOVFF	r0x04, TBLPTRU
00529c   fff8
00529e   0009     tblrd	*+                 	TBLRD*+	
0052a0   cff5     movff	0xff5, 0x12        	MOVFF	TABLAT, r0x02
0052a2   f012
                                           ;	.line	502; main.c	MIOS_MIDI_BeginStream();
0052a4   ec00     call	0x2c00, 0           	CALL	_MIOS_MIDI_BeginStream
0052a6   f016
                                           ;	.line	503; main.c	MIOS_MIDI_TxBufferPut(channel); // first value from table
0052a8   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
0052aa   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
0052ac   f016
                                           ;	.line	504; main.c	MIOS_MIDI_TxBufferPut(note); // second value from table
0052ae   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0052b0   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
0052b2   f016
                                           ;	.line	505; main.c	MIOS_MIDI_TxBufferPut(pin_value ? 0x00 : 0x7f); // 7bit pot value
0052b4   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0052b6   e002     bz	0x52bc                	BZ	_00330_DS_
0052b8   6a12     clrf	0x12, 0             	CLRF	r0x02
0052ba   d002     bra	0x52c0               	BRA	_00331_DS_
                                           _00330_DS_:
0052bc   0e7f     movlw	0x7f               	MOVLW	0x7f
0052be   6e12     movwf	0x12, 0            	MOVWF	r0x02
                                           _00331_DS_:
0052c0   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0052c2   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
0052c4   f016
                                           ;	.line	506; main.c	MIOS_MIDI_EndStream();
0052c6   ec08     call	0x2c10, 0           	CALL	_MIOS_MIDI_EndStream
0052c8   f016
0052ca   0101     movlb	0x1                	BANKSEL	_test_mode
                                           ;	.line	508; main.c	if (test_mode == 1 && pin_value == 0)
0052cc   5112     movf	0x12, 0, 0x1        	MOVF	_test_mode, W, B
0052ce   0a01     xorlw	0x1                	XORLW	0x01
0052d0   e102     bnz	0x52d6               	BNZ	_00340_DS_
                                           ; removed redundant BANKSEL
0052d2   5113     movf	0x13, 0, 0x1        	MOVF	(_test_mode + 1), W, B
0052d4   e001     bz	0x52d8                	BZ	_00341_DS_
                                           _00340_DS_:
0052d6   d020     bra	0x5318               	BRA	_00326_DS_
                                           _00341_DS_:
0052d8   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0052da   e11e     bnz	0x5318               	BNZ	_00326_DS_
                                           ;	.line	510; main.c	switch (pin)
0052dc   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0052de   0a10     xorlw	0x10               	XORLW	0x10
0052e0   e00d     bz	0x52fc                	BZ	_00318_DS_
0052e2   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0052e4   0a11     xorlw	0x11               	XORLW	0x11
0052e6   e00d     bz	0x5302                	BZ	_00319_DS_
0052e8   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0052ea   0a12     xorlw	0x12               	XORLW	0x12
0052ec   e00d     bz	0x5308                	BZ	_00320_DS_
0052ee   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0052f0   0a13     xorlw	0x13               	XORLW	0x13
0052f2   e00d     bz	0x530e                	BZ	_00321_DS_
0052f4   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0052f6   0a17     xorlw	0x17               	XORLW	0x17
0052f8   e00d     bz	0x5314                	BZ	_00322_DS_
0052fa   d00e     bra	0x5318               	BRA	_00326_DS_
                                           _00318_DS_:
                                           ;	.line	513; main.c	DoStartupPattern();
0052fc   ecc6     call	0x438c, 0           	CALL	_DoStartupPattern
0052fe   f021
                                           ;	.line	514; main.c	break;
005300   d00b     bra	0x5318               	BRA	_00326_DS_
                                           _00319_DS_:
                                           ;	.line	517; main.c	DoShutdownPattern();
005302   ec05     call	0x500a, 0           	CALL	_DoShutdownPattern
005304   f028
                                           ;	.line	518; main.c	break;
005306   d008     bra	0x5318               	BRA	_00326_DS_
                                           _00320_DS_:
                                           ;	.line	521; main.c	TestMatrix1();
005308   ecd6     call	0x4dac, 0           	CALL	_TestMatrix1
00530a   f026
                                           ;	.line	522; main.c	break;
00530c   d005     bra	0x5318               	BRA	_00326_DS_
                                           _00321_DS_:
                                           ;	.line	525; main.c	TestMatrix2();
00530e   ec39     call	0x4c72, 0           	CALL	_TestMatrix2
005310   f026
                                           ;	.line	526; main.c	break;
005312   d002     bra	0x5318               	BRA	_00326_DS_
                                           _00322_DS_:
                                           ;	.line	529; main.c	DoMichaelKnightPattern();
005314   ec80     call	0x3300, 0           	CALL	_DoMichaelKnightPattern
005316   f019
                                           _00326_DS_:
                                           ;	.line	538; main.c	last_din_pin = pin;
005318   c010     movff	0x10, 0x127        	MOVFF	r0x00, _last_din_pin
00531a   f127
00531c   0101     movlb	0x1                	BANKSEL	_app_flags
                                           ;	.line	539; main.c	app_flags.DISPLAY_UPDATE_REQ = 1;
00531e   8125     bsf	0x25, 0, 0x1         	BSF	_app_flags, 0, B
005320   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
005322   f015
005324   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
005326   f014
005328   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
00532a   f013
00532c   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
00532e   f012
005330   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
005332   f011
005334   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
005336   f010
005338   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
00533a   ffd9
00533c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SR_Service_Finish	code
                                           _SR_Service_Finish:
                                           ;	.line	489; main.c	}
005cfc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SR_Service_Prepare	code
                                           _SR_Service_Prepare:
                                           ;	.line	463; main.c	void SR_Service_Prepare(void) __wparam
005434   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
005436   ffed
005438   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
00543a   ffed
00543c   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
00543e   ffed
005440   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
005442   ffed
005444   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
005446   ffed
005448   0101     movlb	0x1                	BANKSEL	_SR_Service_Prepare_row_1_1
                                           ;	.line	468; main.c	row = ++row & 0x07; 						//<-- here you were cycling 16 rows i think you meant 8, no?  
00544a   2b22     incf	0x22, 0x1, 0x1      	INCF	_SR_Service_Prepare_row_1_1, F, B
00544c   0e07     movlw	0x7                	MOVLW	0x07
                                           ; removed redundant BANKSEL
00544e   1722     andwf	0x22, 0x1, 0x1     	ANDWF	_SR_Service_Prepare_row_1_1, F, B
                                           ;	.line	471; main.c	MIOS_DOUT_SRSet(_MATRIX_1_DOUT_START, 0);	//<-- hardwire bad, napster good.  define constants 
005450   0e00     movlw	0                  	MOVLW	0x00
005452   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005454   0e00     movlw	0                  	MOVLW	0x00
005456   ec3e     call	0x5c7c, 0           	CALL	_MIOS_DOUT_SRSet
005458   f02e
00545a   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	472; main.c	MIOS_DOUT_SRSet(_MATRIX_2_DOUT_START, 0);	//    so you can move your matrix in the chain
00545c   0e00     movlw	0                  	MOVLW	0x00
00545e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005460   0e04     movlw	0x4                	MOVLW	0x04
005462   ec3e     call	0x5c7c, 0           	CALL	_MIOS_DOUT_SRSet
005464   f02e
005466   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
005468   0101     movlb	0x1                	BANKSEL	_SR_Service_Prepare_row_1_1
                                           ;	.line	474; main.c	MIOS_DOUT_PinSet1(row + (_MATRIX_1_DOUT_START * 8));
00546a   5122     movf	0x22, 0, 0x1        	MOVF	_SR_Service_Prepare_row_1_1, W, B
00546c   ec64     call	0x2cc8, 0           	CALL	_MIOS_DOUT_PinSet1
00546e   f016
                                           ;	.line	475; main.c	MIOS_DOUT_PinSet1(row + (_MATRIX_2_DOUT_START * 8));
005470   0e20     movlw	0x20               	MOVLW	0x20
005472   0101     movlb	0x1                	BANKSEL	_SR_Service_Prepare_row_1_1
005474   2522     addwf	0x22, 0, 0x1       	ADDWF	_SR_Service_Prepare_row_1_1, W, B
005476   6e10     movwf	0x10, 0            	MOVWF	r0x00
005478   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00547a   ec64     call	0x2cc8, 0           	CALL	_MIOS_DOUT_PinSet1
00547c   f016
                                           ;	.line	476; main.c	for (x = 0; x < 8; x++)
00547e   6a10     clrf	0x10, 0             	CLRF	r0x00
005480   6a11     clrf	0x11, 0             	CLRF	r0x01
                                           _00299_DS_:
005482   0e00     movlw	0                  	MOVLW	0x00
005484   5c11     subwf	0x11, 0, 0         	SUBWF	r0x01, W
005486   e102     bnz	0x548c               	BNZ	_00309_DS_
005488   0e08     movlw	0x8                	MOVLW	0x08
00548a   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
                                           _00309_DS_:
00548c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00548e   d03c     bra	0x5508               	BRA	_00303_DS_
                                           ;	.line	478; main.c	DisplayLED(x + (_MATRIX_1_DOUT_START * 8), matrix_1[row][x]);
005490   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005492   6e12     movwf	0x12, 0            	MOVWF	r0x02
                                           ; ;multiply lit val:0x08 by variable _SR_Service_Prepare_row_1_1 and store in r0x03
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
005494   0101     movlb	0x1                	BANKSEL	_SR_Service_Prepare_row_1_1
005496   5122     movf	0x22, 0, 0x1        	MOVF	_SR_Service_Prepare_row_1_1, W, B
005498   0d08     mullw	0x8                	MULLW	0x08
00549a   cff3     movff	0xff3, 0x13        	MOVFF	PRODL, r0x03
00549c   f013
00549e   6a14     clrf	0x14, 0             	CLRF	r0x04
0054a0   0e80     movlw	0x80               	MOVLW	LOW(_matrix_1)
0054a2   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
0054a4   0e00     movlw	0                  	MOVLW	HIGH(_matrix_1)
0054a6   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
0054a8   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0054aa   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
0054ac   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0054ae   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
0054b0   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
0054b2   ffe1
0054b4   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
0054b6   ffe2
0054b8   cfe7     movff	0xfe7, 0x13        	MOVFF	INDF0, r0x03
0054ba   f013
0054bc   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0054be   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0054c0   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0054c2   ec46     call	0x588c, 0           	CALL	_DisplayLED
0054c4   f02c
0054c6   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	479; main.c	DisplayLED(x + (_MATRIX_2_DOUT_START * 8), matrix_2[row][x]);
0054c8   0e20     movlw	0x20               	MOVLW	0x20
0054ca   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
                                           ; ;multiply lit val:0x08 by variable _SR_Service_Prepare_row_1_1 and store in r0x03
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0054cc   0101     movlb	0x1                	BANKSEL	_SR_Service_Prepare_row_1_1
0054ce   5122     movf	0x22, 0, 0x1        	MOVF	_SR_Service_Prepare_row_1_1, W, B
0054d0   0d08     mullw	0x8                	MULLW	0x08
0054d2   cff3     movff	0xff3, 0x13        	MOVFF	PRODL, r0x03
0054d4   f013
0054d6   6a14     clrf	0x14, 0             	CLRF	r0x04
0054d8   0ec0     movlw	0xc0               	MOVLW	LOW(_matrix_2)
0054da   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
0054dc   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2)
0054de   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
0054e0   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0054e2   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
0054e4   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0054e6   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
0054e8   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
0054ea   ffe1
0054ec   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
0054ee   ffe2
0054f0   cfe7     movff	0xfe7, 0x13        	MOVFF	INDF0, r0x03
0054f2   f013
0054f4   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0054f6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0054f8   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0054fa   ec46     call	0x588c, 0           	CALL	_DisplayLED
0054fc   f02c
0054fe   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	476; main.c	for (x = 0; x < 8; x++)
005500   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
005502   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005504   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
005506   d7bd     bra	0x5482               	BRA	_00299_DS_
                                           _00303_DS_:
005508   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
00550a   f014
00550c   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
00550e   f013
005510   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
005512   f012
005514   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
005516   f011
005518   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
00551a   f010
00551c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DisplayLED	code
                                           _DisplayLED:
                                           ;	.line	447; main.c	void DisplayLED(unsigned char column, unsigned char color) __wparam
00588c   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
00588e   ffed
005890   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
005892   ffd9
005894   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
005896   ffed
005898   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
00589a   ffed
00589c   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
00589e   ffed
0058a0   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
0058a2   ffed
0058a4   6e10     movwf	0x10, 0            	MOVWF	r0x00
0058a6   0e02     movlw	0x2                	MOVLW	0x02
0058a8   cfdb     movff	0xfdb, 0x11        	MOVFF	PLUSW2, r0x01
0058aa   f011
                                           ;	.line	449; main.c	color >>= 4; 
0058ac   3811     swapf	0x11, 0, 0         	SWAPF	r0x01, W
0058ae   0b0f     andlw	0xf                	ANDLW	0x0f
0058b0   6e11     movwf	0x11, 0            	MOVWF	r0x01
                                           ;	.line	450; main.c	MIOS_DOUT_PinSet(column+8,		(color & 0x01)); 
0058b2   0e08     movlw	0x8                	MOVLW	0x08
0058b4   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
0058b6   6e12     movwf	0x12, 0            	MOVWF	r0x02
0058b8   0e01     movlw	0x1                	MOVLW	0x01
0058ba   1411     andwf	0x11, 0, 0         	ANDWF	r0x01, W
0058bc   6e13     movwf	0x13, 0            	MOVWF	r0x03
0058be   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0058c0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0058c2   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0058c4   ec38     call	0x5c70, 0           	CALL	_MIOS_DOUT_PinSet
0058c6   f02e
0058c8   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	451; main.c	color >>= 1; 
0058ca   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0058cc   3211     rrcf	0x11, 0x1, 0        	RRCF	r0x01, F
                                           ;	.line	452; main.c	MIOS_DOUT_PinSet(column+8+8,	(color & 0x01));
0058ce   0e10     movlw	0x10               	MOVLW	0x10
0058d0   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
0058d2   6e12     movwf	0x12, 0            	MOVWF	r0x02
0058d4   0e01     movlw	0x1                	MOVLW	0x01
0058d6   1411     andwf	0x11, 0, 0         	ANDWF	r0x01, W
0058d8   6e13     movwf	0x13, 0            	MOVWF	r0x03
0058da   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0058dc   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0058de   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0058e0   ec38     call	0x5c70, 0           	CALL	_MIOS_DOUT_PinSet
0058e2   f02e
0058e4   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	453; main.c	color >>= 1; 
0058e6   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0058e8   3211     rrcf	0x11, 0x1, 0        	RRCF	r0x01, F
                                           ;	.line	454; main.c	MIOS_DOUT_PinSet(column+8+16,	(color & 0x01));
0058ea   0e18     movlw	0x18               	MOVLW	0x18
0058ec   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
0058ee   0e01     movlw	0x1                	MOVLW	0x01
0058f0   1611     andwf	0x11, 0x1, 0       	ANDWF	r0x01, F
0058f2   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0058f4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0058f6   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0058f8   ec38     call	0x5c70, 0           	CALL	_MIOS_DOUT_PinSet
0058fa   f02e
0058fc   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
0058fe   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
005900   f013
005902   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
005904   f012
005906   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
005908   f011
00590a   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
00590c   f010
00590e   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
005910   ffd9
005912   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyReceivedByte	code
                                           _MPROC_NotifyReceivedByte:
                                           ;	.line	356; main.c	void MPROC_NotifyReceivedByte(unsigned char byte) __wparam
00497c   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
00497e   ffed
004980   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
004982   ffd9
004984   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
004986   ffed
004988   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
00498a   ffed
00498c   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
00498e   ffed
004990   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	358; main.c	switch (byte)
004992   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004994   0a77     xorlw	0x77               	XORLW	0x77
004996   e01d     bz	0x49d2                	BZ	_00219_DS_
004998   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00499a   0af0     xorlw	0xf0               	XORLW	0xf0
00499c   e011     bz	0x49c0                	BZ	_00217_DS_
00499e   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0049a0   0af7     xorlw	0xf7               	XORLW	0xf7
0049a2   e013     bz	0x49ca                	BZ	_00218_DS_
0049a4   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0049a6   0af8     xorlw	0xf8               	XORLW	0xf8
0049a8   e101     bnz	0x49ac               	BNZ	_00273_DS_
0049aa   d03c     bra	0x4a24               	BRA	_00230_DS_
                                           _00273_DS_:
0049ac   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0049ae   0afa     xorlw	0xfa               	XORLW	0xfa
0049b0   e02d     bz	0x4a0c                	BZ	_00229_DS_
0049b2   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0049b4   0afb     xorlw	0xfb               	XORLW	0xfb
0049b6   e02a     bz	0x4a0c                	BZ	_00229_DS_
0049b8   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0049ba   0afc     xorlw	0xfc               	XORLW	0xfc
0049bc   e027     bz	0x4a0c                	BZ	_00229_DS_
0049be   d09c     bra	0x4af8               	BRA	_00244_DS_
                                           _00217_DS_:
                                           ;	.line	361; main.c	record_sysex = 1;
0049c0   0e01     movlw	0x1                	MOVLW	0x01
0049c2   0101     movlb	0x1                	BANKSEL	_record_sysex
0049c4   6f14     movwf	0x14, 0x1          	MOVWF	_record_sysex, B
                                           ; removed redundant BANKSEL
0049c6   6b15     clrf	0x15, 0x1           	CLRF	(_record_sysex + 1), B
                                           ;	.line	362; main.c	break;
0049c8   d0a0     bra	0x4b0a               	BRA	_00248_DS_
                                           _00218_DS_:
0049ca   0101     movlb	0x1                	BANKSEL	_record_sysex
                                           ;	.line	365; main.c	record_sysex = 0;
0049cc   6b14     clrf	0x14, 0x1           	CLRF	_record_sysex, B
                                           ; removed redundant BANKSEL
0049ce   6b15     clrf	0x15, 0x1           	CLRF	(_record_sysex + 1), B
                                           ;	.line	366; main.c	break;
0049d0   d09c     bra	0x4b0a               	BRA	_00248_DS_
                                           _00219_DS_:
0049d2   0101     movlb	0x1                	BANKSEL	_record_sysex
                                           ;	.line	369; main.c	if (record_sysex == 1)
0049d4   5114     movf	0x14, 0, 0x1        	MOVF	_record_sysex, W, B
0049d6   0a01     xorlw	0x1                	XORLW	0x01
0049d8   e102     bnz	0x49de               	BNZ	_00280_DS_
                                           ; removed redundant BANKSEL
0049da   5115     movf	0x15, 0, 0x1        	MOVF	(_record_sysex + 1), W, B
0049dc   e001     bz	0x49e0                	BZ	_00281_DS_
                                           _00280_DS_:
0049de   d095     bra	0x4b0a               	BRA	_00248_DS_
                                           _00281_DS_:
0049e0   0101     movlb	0x1                	BANKSEL	_last_sysex
                                           ;	.line	371; main.c	if (last_sysex == 0x01)		// connect
0049e2   5124     movf	0x24, 0, 0x1        	MOVF	_last_sysex, W, B
0049e4   0a01     xorlw	0x1                	XORLW	0x01
0049e6   e106     bnz	0x49f4               	BNZ	_00223_DS_
                                           ;	.line	373; main.c	DoMichaelKnightPattern();
0049e8   ec80     call	0x3300, 0           	CALL	_DoMichaelKnightPattern
0049ea   f019
0049ec   0101     movlb	0x1                	BANKSEL	_test_mode
                                           ;	.line	374; main.c	test_mode = 0;
0049ee   6b12     clrf	0x12, 0x1           	CLRF	_test_mode, B
                                           ; removed redundant BANKSEL
0049f0   6b13     clrf	0x13, 0x1           	CLRF	(_test_mode + 1), B
0049f2   d08b     bra	0x4b0a               	BRA	_00248_DS_
                                           _00223_DS_:
0049f4   0101     movlb	0x1                	BANKSEL	_last_sysex
                                           ;	.line	376; main.c	else if (last_sysex == 0x02)	// disconnect
0049f6   5124     movf	0x24, 0, 0x1        	MOVF	_last_sysex, W, B
0049f8   0a02     xorlw	0x2                	XORLW	0x02
0049fa   e001     bz	0x49fe                	BZ	_00285_DS_
0049fc   d086     bra	0x4b0a               	BRA	_00248_DS_
                                           _00285_DS_:
                                           ;	.line	378; main.c	DoShutdownPattern();
0049fe   ec05     call	0x500a, 0           	CALL	_DoShutdownPattern
004a00   f028
                                           ;	.line	379; main.c	test_mode = 1;
004a02   0e01     movlw	0x1                	MOVLW	0x01
004a04   0101     movlb	0x1                	BANKSEL	_test_mode
004a06   6f12     movwf	0x12, 0x1          	MOVWF	_test_mode, B
                                           ; removed redundant BANKSEL
004a08   6b13     clrf	0x13, 0x1           	CLRF	(_test_mode + 1), B
                                           ;	.line	382; main.c	break;
004a0a   d07f     bra	0x4b0a               	BRA	_00248_DS_
                                           _00229_DS_:
004a0c   0101     movlb	0x1                	BANKSEL	_clock_ticks
                                           ;	.line	387; main.c	clock_ticks = 0;
004a0e   6b16     clrf	0x16, 0x1           	CLRF	_clock_ticks, B
                                           ; removed redundant BANKSEL
004a10   6b17     clrf	0x17, 0x1           	CLRF	(_clock_ticks + 1), B
004a12   0101     movlb	0x1                	BANKSEL	_clock_beats
                                           ;	.line	388; main.c	clock_beats = 0;
004a14   6b18     clrf	0x18, 0x1           	CLRF	_clock_beats, B
                                           ; removed redundant BANKSEL
004a16   6b19     clrf	0x19, 0x1           	CLRF	(_clock_beats + 1), B
004a18   0101     movlb	0x1                	BANKSEL	_clock_bars
                                           ;	.line	389; main.c	clock_bars = 0;
004a1a   6b1a     clrf	0x1a, 0x1           	CLRF	_clock_bars, B
                                           ; removed redundant BANKSEL
004a1c   6b1b     clrf	0x1b, 0x1           	CLRF	(_clock_bars + 1), B
004a1e   0100     movlb	0                  	BANKSEL	(_matrix_2 + 53)
                                           ;	.line	390; main.c	matrix_2[6][5] = _COLOR_OFF;
004a20   6bf5     clrf	0xf5, 0x1           	CLRF	(_matrix_2 + 53), B
                                           ;	.line	391; main.c	break;
004a22   d073     bra	0x4b0a               	BRA	_00248_DS_
                                           _00230_DS_:
004a24   0101     movlb	0x1                	BANKSEL	_clock_ticks
                                           ;	.line	394; main.c	clock_ticks++;
004a26   2b16     incf	0x16, 0x1, 0x1      	INCF	_clock_ticks, F, B
004a28   e301     bnc	0x4a2c               	BNC	_170567_DS_
                                           ; removed redundant BANKSEL
004a2a   2b17     incf	0x17, 0x1, 0x1      	INCF	(_clock_ticks + 1), F, B
                                           _170567_DS_:
                                           ;	.line	395; main.c	if (clock_ticks % 24 == 0)
004a2c   0e00     movlw	0                  	MOVLW	0x00
004a2e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004a30   0e18     movlw	0x18               	MOVLW	0x18
004a32   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004a34   0101     movlb	0x1                	BANKSEL	(_clock_ticks + 1)
004a36   5117     movf	0x17, 0, 0x1        	MOVF	(_clock_ticks + 1), W, B
004a38   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
                                           ; removed redundant BANKSEL
004a3a   5116     movf	0x16, 0, 0x1        	MOVF	_clock_ticks, W, B
004a3c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004a3e   ec8f     call	0x551e, 0           	CALL	__moduint
004a40   f02a
004a42   6e11     movwf	0x11, 0            	MOVWF	r0x01
004a44   cff3     movff	0xff3, 0x12        	MOVFF	PRODL, r0x02
004a46   f012
004a48   0e04     movlw	0x4                	MOVLW	0x04
004a4a   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
004a4c   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004a4e   1012     iorwf	0x12, 0, 0         	IORWF	r0x02, W
004a50   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
004a52   d034     bra	0x4abc               	BRA	_00234_DS_
004a54   0101     movlb	0x1                	BANKSEL	_clock_beats
                                           ;	.line	397; main.c	clock_beats++;
004a56   2b18     incf	0x18, 0x1, 0x1      	INCF	_clock_beats, F, B
004a58   e301     bnc	0x4a5c               	BNC	_180568_DS_
                                           ; removed redundant BANKSEL
004a5a   2b19     incf	0x19, 0x1, 0x1      	INCF	(_clock_beats + 1), F, B
                                           _180568_DS_:
004a5c   0101     movlb	0x1                	BANKSEL	_clock_beats
                                           ;	.line	398; main.c	if (clock_beats % 4 == 0)
004a5e   5118     movf	0x18, 0, 0x1        	MOVF	_clock_beats, W, B
004a60   0b03     andlw	0x3                	ANDLW	0x03
004a62   e107     bnz	0x4a72               	BNZ	_00232_DS_
004a64   0101     movlb	0x1                	BANKSEL	_clock_bars
                                           ;	.line	400; main.c	clock_bars++;
004a66   2b1a     incf	0x1a, 0x1, 0x1      	INCF	_clock_bars, F, B
004a68   e301     bnc	0x4a6c               	BNC	_190569_DS_
                                           ; removed redundant BANKSEL
004a6a   2b1b     incf	0x1b, 0x1, 0x1      	INCF	(_clock_bars + 1), F, B
                                           _190569_DS_:
004a6c   0101     movlb	0x1                	BANKSEL	_clock_beats
                                           ;	.line	401; main.c	clock_beats = 0;
004a6e   6b18     clrf	0x18, 0x1           	CLRF	_clock_beats, B
                                           ; removed redundant BANKSEL
004a70   6b19     clrf	0x19, 0x1           	CLRF	(_clock_beats + 1), B
                                           _00232_DS_:
                                           ;	.line	403; main.c	MIOS_LCD_Clear();
004a72   ec82     call	0x2d04, 0           	CALL	_MIOS_LCD_Clear
004a74   f016
                                           ;	.line	404; main.c	MIOS_LCD_CursorSet(0x00 + 0); 
004a76   0e00     movlw	0                  	MOVLW	0x00
004a78   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
004a7a   f016
004a7c   0101     movlb	0x1                	BANKSEL	(_clock_bars + 1)
                                           ;	.line	405; main.c	MIOS_LCD_PrintBCD4(clock_bars);
004a7e   511b     movf	0x1b, 0, 0x1        	MOVF	(_clock_bars + 1), W, B
004a80   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
                                           ; removed redundant BANKSEL
004a82   511a     movf	0x1a, 0, 0x1        	MOVF	_clock_bars, W, B
004a84   ec56     call	0x5cac, 0           	CALL	_MIOS_LCD_PrintBCD4
004a86   f02e
004a88   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	406; main.c	MIOS_LCD_CursorSet(0x00 + 4);
004a8a   0e04     movlw	0x4                	MOVLW	0x04
004a8c   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
004a8e   f016
004a90   0101     movlb	0x1                	BANKSEL	(_clock_beats + 1)
                                           ;	.line	407; main.c	MIOS_LCD_PrintBCD4(clock_beats);
004a92   5119     movf	0x19, 0, 0x1        	MOVF	(_clock_beats + 1), W, B
004a94   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
                                           ; removed redundant BANKSEL
004a96   5118     movf	0x18, 0, 0x1        	MOVF	_clock_beats, W, B
004a98   ec56     call	0x5cac, 0           	CALL	_MIOS_LCD_PrintBCD4
004a9a   f02e
004a9c   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	408; main.c	MIOS_LCD_CursorSet(0x00 + 8);
004a9e   0e08     movlw	0x8                	MOVLW	0x08
004aa0   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
004aa2   f016
004aa4   0101     movlb	0x1                	BANKSEL	(_clock_ticks + 1)
                                           ;	.line	409; main.c	MIOS_LCD_PrintBCD4(clock_ticks);
004aa6   5117     movf	0x17, 0, 0x1        	MOVF	(_clock_ticks + 1), W, B
004aa8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
                                           ; removed redundant BANKSEL
004aaa   5116     movf	0x16, 0, 0x1        	MOVF	_clock_ticks, W, B
004aac   ec56     call	0x5cac, 0           	CALL	_MIOS_LCD_PrintBCD4
004aae   f02e
004ab0   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
004ab2   0101     movlb	0x1                	BANKSEL	_app_flags
                                           ;	.line	410; main.c	app_flags.DISPLAY_UPDATE_REQ = 1;
004ab4   8125     bsf	0x25, 0, 0x1         	BSF	_app_flags, 0, B
004ab6   0101     movlb	0x1                	BANKSEL	_clock_ticks
                                           ;	.line	411; main.c	clock_ticks = 0;
004ab8   6b16     clrf	0x16, 0x1           	CLRF	_clock_ticks, B
                                           ; removed redundant BANKSEL
004aba   6b17     clrf	0x17, 0x1           	CLRF	(_clock_ticks + 1), B
                                           _00234_DS_:
                                           ;	.line	413; main.c	if (clock_ticks < 12)
004abc   0e00     movlw	0                  	MOVLW	0x00
004abe   0101     movlb	0x1                	BANKSEL	(_clock_ticks + 1)
004ac0   5d17     subwf	0x17, 0, 0x1       	SUBWF	(_clock_ticks + 1), W, B
004ac2   e102     bnz	0x4ac8               	BNZ	_00287_DS_
004ac4   0e0c     movlw	0xc                	MOVLW	0x0c
                                           ; removed redundant BANKSEL
004ac6   5d16     subwf	0x16, 0, 0x1       	SUBWF	_clock_ticks, W, B
                                           _00287_DS_:
004ac8   e214     bc	0x4af2                	BC	_00242_DS_
004aca   0101     movlb	0x1                	BANKSEL	_clock_beats
                                           ;	.line	415; main.c	if (clock_beats == 0)
004acc   5118     movf	0x18, 0, 0x1        	MOVF	_clock_beats, W, B
                                           ; removed redundant BANKSEL
004ace   1119     iorwf	0x19, 0, 0x1       	IORWF	(_clock_beats + 1), W, B
004ad0   e10c     bnz	0x4aea               	BNZ	_00239_DS_
004ad2   0101     movlb	0x1                	BANKSEL	_clock_bars
                                           ;	.line	417; main.c	if (clock_bars % 4 == 0)
004ad4   511a     movf	0x1a, 0, 0x1        	MOVF	_clock_bars, W, B
004ad6   0b03     andlw	0x3                	ANDLW	0x03
004ad8   e104     bnz	0x4ae2               	BNZ	_00236_DS_
                                           ;	.line	419; main.c	matrix_2[6][5] = _COLOR_WHITE;
004ada   0e70     movlw	0x70               	MOVLW	0x70
004adc   0100     movlb	0                  	BANKSEL	(_matrix_2 + 53)
004ade   6ff5     movwf	0xf5, 0x1          	MOVWF	(_matrix_2 + 53), B
004ae0   d014     bra	0x4b0a               	BRA	_00248_DS_
                                           _00236_DS_:
                                           ;	.line	423; main.c	matrix_2[6][5] = _COLOR_GREEN;
004ae2   0e20     movlw	0x20               	MOVLW	0x20
004ae4   0100     movlb	0                  	BANKSEL	(_matrix_2 + 53)
004ae6   6ff5     movwf	0xf5, 0x1          	MOVWF	(_matrix_2 + 53), B
004ae8   d010     bra	0x4b0a               	BRA	_00248_DS_
                                           _00239_DS_:
                                           ;	.line	428; main.c	matrix_2[6][5] = _COLOR_BLUE;
004aea   0e40     movlw	0x40               	MOVLW	0x40
004aec   0100     movlb	0                  	BANKSEL	(_matrix_2 + 53)
004aee   6ff5     movwf	0xf5, 0x1          	MOVWF	(_matrix_2 + 53), B
004af0   d00c     bra	0x4b0a               	BRA	_00248_DS_
                                           _00242_DS_:
004af2   0100     movlb	0                  	BANKSEL	(_matrix_2 + 53)
                                           ;	.line	433; main.c	matrix_2[6][5] = _COLOR_OFF;
004af4   6bf5     clrf	0xf5, 0x1           	CLRF	(_matrix_2 + 53), B
                                           ;	.line	435; main.c	break;
004af6   d009     bra	0x4b0a               	BRA	_00248_DS_
                                           _00244_DS_:
004af8   0101     movlb	0x1                	BANKSEL	_record_sysex
                                           ;	.line	438; main.c	if (record_sysex == 1)
004afa   5114     movf	0x14, 0, 0x1        	MOVF	_record_sysex, W, B
004afc   0a01     xorlw	0x1                	XORLW	0x01
004afe   e102     bnz	0x4b04               	BNZ	_00289_DS_
                                           ; removed redundant BANKSEL
004b00   5115     movf	0x15, 0, 0x1        	MOVF	(_record_sysex + 1), W, B
004b02   e001     bz	0x4b06                	BZ	_00290_DS_
                                           _00289_DS_:
004b04   d002     bra	0x4b0a               	BRA	_00248_DS_
                                           _00290_DS_:
                                           ;	.line	440; main.c	last_sysex = byte;
004b06   c010     movff	0x10, 0x124        	MOVFF	r0x00, _last_sysex
004b08   f124
                                           _00248_DS_:
                                           ;	.line	443; main.c	}
004b0a   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
004b0c   f012
004b0e   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
004b10   f011
004b12   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
004b14   f010
004b16   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004b18   ffd9
004b1a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyTimeout	code
                                           _MPROC_NotifyTimeout:
                                           ;	.line	351; main.c	}
005cfe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyFoundEvent	code
                                           _MPROC_NotifyFoundEvent:
                                           ;	.line	341; main.c	void MPROC_NotifyFoundEvent(unsigned entry, unsigned char evnt0, unsigned char evnt1, unsigned char evnt2) __wparam
005c54   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
005c56   ffed
005c58   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
005c5a   ffd9
                                           ;	.line	343; main.c	}
005c5c   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
005c5e   ffd9
005c60   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyReceivedEvnt	code
                                           _MPROC_NotifyReceivedEvnt:
                                           ;	.line	271; main.c	void MPROC_NotifyReceivedEvnt(unsigned char evnt0, unsigned char evnt1, unsigned char evnt2) __wparam
004690   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004692   ffed
004694   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
004696   ffd9
004698   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
00469a   ffed
00469c   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
00469e   ffed
0046a0   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
0046a2   ffed
0046a4   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
0046a6   ffed
0046a8   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
0046aa   ffed
0046ac   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
0046ae   ffed
0046b0   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
0046b2   ffed
0046b4   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
0046b6   ffed
0046b8   c018     movff	0x18, 0xfed        	MOVFF	r0x08, POSTDEC1
0046ba   ffed
0046bc   c019     movff	0x19, 0xfed        	MOVFF	r0x09, POSTDEC1
0046be   ffed
0046c0   c01a     movff	0x1a, 0xfed        	MOVFF	r0x0a, POSTDEC1
0046c2   ffed
0046c4   6e10     movwf	0x10, 0            	MOVWF	r0x00
0046c6   0e02     movlw	0x2                	MOVLW	0x02
0046c8   cfdb     movff	0xfdb, 0x11        	MOVFF	PLUSW2, r0x01
0046ca   f011
0046cc   0e03     movlw	0x3                	MOVLW	0x03
0046ce   cfdb     movff	0xfdb, 0x12        	MOVFF	PLUSW2, r0x02
0046d0   f012
                                           ;	.line	273; main.c	int channelIndex = evnt0-0x90;
0046d2   6a13     clrf	0x13, 0             	CLRF	r0x03
0046d4   0e70     movlw	0x70               	MOVLW	0x70
0046d6   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
0046d8   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0046da   0613     decf	0x13, 0x1, 0        	DECF	r0x03, F
                                           ;	.line	274; main.c	int noteIndex = evnt1;
0046dc   6a14     clrf	0x14, 0             	CLRF	r0x04
                                           ;	.line	275; main.c	unsigned char value = evnt2;
0046de   c012     movff	0x12, 0x15         	MOVFF	r0x02, r0x05
0046e0   f015
                                           ;	.line	276; main.c	if (channelIndex >= 0 && channelIndex <= 7)
0046e2   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0046e4   ae13     btfss	0x13, 0x7, 0       	BTFSS	r0x03, 7
0046e6   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0046e8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0046ea   d08f     bra	0x480a               	BRA	_00160_DS_
0046ec   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0046ee   0f80     addlw	0x80               	ADDLW	0x80
0046f0   0f80     addlw	0x80               	ADDLW	0x80
0046f2   e102     bnz	0x46f8               	BNZ	_00190_DS_
0046f4   0e08     movlw	0x8                	MOVLW	0x08
0046f6   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
                                           _00190_DS_:
0046f8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0046fa   d087     bra	0x480a               	BRA	_00160_DS_
                                           ;	.line	279; main.c	switch(noteIndex-_NOTE_SEND_OFFSET)
0046fc   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0046fe   0fe0     addlw	0xe0               	ADDLW	0xe0
004700   6e16     movwf	0x16, 0            	MOVWF	r0x06
004702   0eff     movlw	0xff               	MOVLW	0xff
004704   2014     addwfc	0x14, 0, 0        	ADDWFC	r0x04, W
004706   6e17     movwf	0x17, 0            	MOVWF	r0x07
004708   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
00470a   ae17     btfss	0x17, 0x7, 0       	BTFSS	r0x07, 7
00470c   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00470e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004710   d11c     bra	0x494a               	BRA	_00167_DS_
004712   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
004714   0f80     addlw	0x80               	ADDLW	0x80
004716   0f80     addlw	0x80               	ADDLW	0x80
004718   e102     bnz	0x471e               	BNZ	_00191_DS_
00471a   0e0c     movlw	0xc                	MOVLW	0x0c
00471c   5c16     subwf	0x16, 0, 0         	SUBWF	r0x06, W
                                           _00191_DS_:
00471e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004720   d114     bra	0x494a               	BRA	_00167_DS_
004722   c01b     movff	0x1b, 0xfed        	MOVFF	r0x0b, POSTDEC1
004724   ffed
004726   c01c     movff	0x1c, 0xfed        	MOVFF	r0x0c, POSTDEC1
004728   ffed
00472a   6a1c     clrf	0x1c, 0             	CLRF	r0x0c
00472c   3416     rlcf	0x16, 0, 0          	RLCF	r0x06, W
00472e   361c     rlcf	0x1c, 0x1, 0        	RLCF	r0x0c, F
004730   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
004732   361c     rlcf	0x1c, 0x1, 0        	RLCF	r0x0c, F
004734   0bfc     andlw	0xfc               	ANDLW	0xfc
004736   6e1b     movwf	0x1b, 0            	MOVWF	r0x0b
004738   0e00     movlw	0                  	MOVLW	UPPER(_00192_DS_)
00473a   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
00473c   0e47     movlw	0x47               	MOVLW	HIGH(_00192_DS_)
00473e   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
004740   0e58     movlw	0x58               	MOVLW	LOW(_00192_DS_)
004742   261b     addwf	0x1b, 0x1, 0       	ADDWF	r0x0b, F
004744   501c     movf	0x1c, 0, 0          	MOVF	r0x0c, W
004746   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
004748   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00474a   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
00474c   501b     movf	0x1b, 0, 0          	MOVF	r0x0b, W
00474e   cfec     movff	0xfec, 0x1c        	MOVFF	PREINC1, r0x0c
004750   f01c
004752   cfec     movff	0xfec, 0x1b        	MOVFF	PREINC1, r0x0b
004754   f01b
004756   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00192_DS_:
004758   efc4     goto	0x4788              	GOTO	_00135_DS_
00475a   f023
00475c   efc4     goto	0x4788              	GOTO	_00135_DS_
00475e   f023
004760   efc4     goto	0x4788              	GOTO	_00135_DS_
004762   f023
004764   efde     goto	0x47bc              	GOTO	_00142_DS_
004766   f023
004768   efde     goto	0x47bc              	GOTO	_00142_DS_
00476a   f023
00476c   efde     goto	0x47bc              	GOTO	_00142_DS_
00476e   f023
004770   efde     goto	0x47bc              	GOTO	_00142_DS_
004772   f023
004774   efde     goto	0x47bc              	GOTO	_00142_DS_
004776   f023
004778   efde     goto	0x47bc              	GOTO	_00142_DS_
00477a   f023
00477c   efde     goto	0x47bc              	GOTO	_00142_DS_
00477e   f023
004780   efde     goto	0x47bc              	GOTO	_00143_DS_
004782   f023
004784   eff8     goto	0x47f0              	GOTO	_00144_DS_
004786   f023
                                           _00135_DS_:
                                           ;	.line	286; main.c	matrix_2[noteIndex-_NOTE_SEND_OFFSET][channelIndex] = value;
004788   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00478a   6e16     movwf	0x16, 0            	MOVWF	r0x06
00478c   0ee0     movlw	0xe0               	MOVLW	0xe0
00478e   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
                                           ; ;multiply lit val:0x08 by variable r0x06 and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
004790   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
004792   0d08     mullw	0x8                	MULLW	0x08
004794   cff3     movff	0xff3, 0x16        	MOVFF	PRODL, r0x06
004796   f016
004798   6a17     clrf	0x17, 0             	CLRF	r0x07
00479a   be16     btfsc	0x16, 0x7, 0       	BTFSC	r0x06, 7
00479c   6817     setf	0x17, 0             	SETF	r0x07
00479e   0ec0     movlw	0xc0               	MOVLW	LOW(_matrix_2)
0047a0   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
0047a2   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2)
0047a4   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
0047a6   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0047a8   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
0047aa   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0047ac   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
0047ae   c016     movff	0x16, 0xfe1        	MOVFF	r0x06, FSR0L
0047b0   ffe1
0047b2   c017     movff	0x17, 0xfe2        	MOVFF	r0x07, FSR0H
0047b4   ffe2
0047b6   c015     movff	0x15, 0xfe7        	MOVFF	r0x05, INDF0
0047b8   ffe7
                                           ;	.line	287; main.c	break;
0047ba   d0c7     bra	0x494a               	BRA	_00167_DS_
                                           _00142_DS_:
                                           _00143_DS_:
                                           ;	.line	298; main.c	matrix_1[noteIndex-_NOTE_SEND_OFFSET-3][channelIndex] = value;
0047bc   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0047be   6e16     movwf	0x16, 0            	MOVWF	r0x06
0047c0   0edd     movlw	0xdd               	MOVLW	0xdd
0047c2   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
                                           ; ;multiply lit val:0x08 by variable r0x06 and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0047c4   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
0047c6   0d08     mullw	0x8                	MULLW	0x08
0047c8   cff3     movff	0xff3, 0x16        	MOVFF	PRODL, r0x06
0047ca   f016
0047cc   6a17     clrf	0x17, 0             	CLRF	r0x07
0047ce   be16     btfsc	0x16, 0x7, 0       	BTFSC	r0x06, 7
0047d0   6817     setf	0x17, 0             	SETF	r0x07
0047d2   0e80     movlw	0x80               	MOVLW	LOW(_matrix_1)
0047d4   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
0047d6   0e00     movlw	0                  	MOVLW	HIGH(_matrix_1)
0047d8   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
0047da   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0047dc   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
0047de   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0047e0   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
0047e2   c016     movff	0x16, 0xfe1        	MOVFF	r0x06, FSR0L
0047e4   ffe1
0047e6   c017     movff	0x17, 0xfe2        	MOVFF	r0x07, FSR0H
0047e8   ffe2
0047ea   c015     movff	0x15, 0xfe7        	MOVFF	r0x05, INDF0
0047ec   ffe7
                                           ;	.line	299; main.c	break;
0047ee   d0ad     bra	0x494a               	BRA	_00167_DS_
                                           _00144_DS_:
                                           ;	.line	303; main.c	matrix_2[3][channelIndex] = value;
0047f0   0ed8     movlw	0xd8               	MOVLW	LOW(_matrix_2 + 24)
0047f2   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
0047f4   6e16     movwf	0x16, 0            	MOVWF	r0x06
0047f6   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 24)
0047f8   2013     addwfc	0x13, 0, 0        	ADDWFC	r0x03, W
0047fa   6e17     movwf	0x17, 0            	MOVWF	r0x07
0047fc   c016     movff	0x16, 0xfe1        	MOVFF	r0x06, FSR0L
0047fe   ffe1
004800   c017     movff	0x17, 0xfe2        	MOVFF	r0x07, FSR0H
004802   ffe2
004804   c012     movff	0x12, 0xfe7        	MOVFF	r0x02, INDF0
004806   ffe7
                                           ;	.line	304; main.c	break;
004808   d0a0     bra	0x494a               	BRA	_00167_DS_
                                           _00160_DS_:
                                           ;	.line	311; main.c	else if (channelIndex >= 8 && channelIndex <= 15)
00480a   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
00480c   0f80     addlw	0x80               	ADDLW	0x80
00480e   0f80     addlw	0x80               	ADDLW	0x80
004810   e102     bnz	0x4816               	BNZ	_00193_DS_
004812   0e08     movlw	0x8                	MOVLW	0x08
004814   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
                                           _00193_DS_:
004816   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
004818   d098     bra	0x494a               	BRA	_00167_DS_
00481a   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
00481c   0f80     addlw	0x80               	ADDLW	0x80
00481e   0f80     addlw	0x80               	ADDLW	0x80
004820   e102     bnz	0x4826               	BNZ	_00194_DS_
004822   0e10     movlw	0x10               	MOVLW	0x10
004824   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
                                           _00194_DS_:
004826   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004828   d090     bra	0x494a               	BRA	_00167_DS_
                                           ;	.line	314; main.c	if (noteIndex-_NOTE_SEND_OFFSET >= 0 && noteIndex-_NOTE_SEND_OFFSET <= 16)
00482a   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00482c   0fe0     addlw	0xe0               	ADDLW	0xe0
00482e   6e10     movwf	0x10, 0            	MOVWF	r0x00
004830   0eff     movlw	0xff               	MOVLW	0xff
004832   2014     addwfc	0x14, 0, 0        	ADDWFC	r0x04, W
004834   6e12     movwf	0x12, 0            	MOVWF	r0x02
004836   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
004838   ae12     btfss	0x12, 0x7, 0       	BTFSS	r0x02, 7
00483a   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00483c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00483e   d049     bra	0x48d2               	BRA	_00148_DS_
004840   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
004842   0f80     addlw	0x80               	ADDLW	0x80
004844   0f80     addlw	0x80               	ADDLW	0x80
004846   e102     bnz	0x484c               	BNZ	_00195_DS_
004848   0e11     movlw	0x11               	MOVLW	0x11
00484a   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
                                           _00195_DS_:
00484c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00484e   d041     bra	0x48d2               	BRA	_00148_DS_
                                           ;	.line	318; main.c	for(x = 0; x < 8; x++)
004850   6a13     clrf	0x13, 0             	CLRF	r0x03
004852   6a16     clrf	0x16, 0             	CLRF	r0x06
                                           _00163_DS_:
004854   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
004856   0f80     addlw	0x80               	ADDLW	0x80
004858   0f80     addlw	0x80               	ADDLW	0x80
00485a   e102     bnz	0x4860               	BNZ	_00196_DS_
00485c   0e08     movlw	0x8                	MOVLW	0x08
00485e   5c13     subwf	0x13, 0, 0         	SUBWF	r0x03, W
                                           _00196_DS_:
004860   e238     bc	0x48d2                	BC	_00148_DS_
                                           ;	.line	320; main.c	matrix_2[4][x] = ((x+0) == noteIndex-_NOTE_SEND_OFFSET) ? value : _COLOR_OFF;
004862   0ee0     movlw	0xe0               	MOVLW	LOW(_matrix_2 + 32)
004864   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
004866   6e17     movwf	0x17, 0            	MOVWF	r0x07
004868   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 32)
00486a   2016     addwfc	0x16, 0, 0        	ADDWFC	r0x06, W
00486c   6e18     movwf	0x18, 0            	MOVWF	r0x08
00486e   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004870   1810     xorwf	0x10, 0, 0         	XORWF	r0x00, W
004872   e107     bnz	0x4882               	BNZ	_00169_DS_
004874   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
004876   1812     xorwf	0x12, 0, 0         	XORWF	r0x02, W
004878   e001     bz	0x487c                	BZ	_00198_DS_
                                           _00197_DS_:
00487a   d003     bra	0x4882               	BRA	_00169_DS_
                                           _00198_DS_:
00487c   c015     movff	0x15, 0x19         	MOVFF	r0x05, r0x09
00487e   f019
004880   d001     bra	0x4884               	BRA	_00170_DS_
                                           _00169_DS_:
004882   6a19     clrf	0x19, 0             	CLRF	r0x09
                                           _00170_DS_:
004884   c017     movff	0x17, 0xfe1        	MOVFF	r0x07, FSR0L
004886   ffe1
004888   c018     movff	0x18, 0xfe2        	MOVFF	r0x08, FSR0H
00488a   ffe2
00488c   c019     movff	0x19, 0xfe7        	MOVFF	r0x09, INDF0
00488e   ffe7
                                           ;	.line	321; main.c	matrix_2[5][x] = ((x+8) == noteIndex-_NOTE_SEND_OFFSET) ? value : _COLOR_OFF;
004890   0ee8     movlw	0xe8               	MOVLW	LOW(_matrix_2 + 40)
004892   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
004894   6e17     movwf	0x17, 0            	MOVWF	r0x07
004896   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 40)
004898   2016     addwfc	0x16, 0, 0        	ADDWFC	r0x06, W
00489a   6e18     movwf	0x18, 0            	MOVWF	r0x08
00489c   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
00489e   0f08     addlw	0x8                	ADDLW	0x08
0048a0   6e19     movwf	0x19, 0            	MOVWF	r0x09
0048a2   0e00     movlw	0                  	MOVLW	0x00
0048a4   2016     addwfc	0x16, 0, 0        	ADDWFC	r0x06, W
0048a6   6e1a     movwf	0x1a, 0            	MOVWF	r0x0a
0048a8   5019     movf	0x19, 0, 0          	MOVF	r0x09, W
0048aa   1810     xorwf	0x10, 0, 0         	XORWF	r0x00, W
0048ac   e107     bnz	0x48bc               	BNZ	_00171_DS_
0048ae   501a     movf	0x1a, 0, 0          	MOVF	r0x0a, W
0048b0   1812     xorwf	0x12, 0, 0         	XORWF	r0x02, W
0048b2   e001     bz	0x48b6                	BZ	_00200_DS_
                                           _00199_DS_:
0048b4   d003     bra	0x48bc               	BRA	_00171_DS_
                                           _00200_DS_:
0048b6   c015     movff	0x15, 0x19         	MOVFF	r0x05, r0x09
0048b8   f019
0048ba   d001     bra	0x48be               	BRA	_00172_DS_
                                           _00171_DS_:
0048bc   6a19     clrf	0x19, 0             	CLRF	r0x09
                                           _00172_DS_:
0048be   c017     movff	0x17, 0xfe1        	MOVFF	r0x07, FSR0L
0048c0   ffe1
0048c2   c018     movff	0x18, 0xfe2        	MOVFF	r0x08, FSR0H
0048c4   ffe2
0048c6   c019     movff	0x19, 0xfe7        	MOVFF	r0x09, INDF0
0048c8   ffe7
                                           ;	.line	318; main.c	for(x = 0; x < 8; x++)
0048ca   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
0048cc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0048ce   2a16     incf	0x16, 0x1, 0        	INCF	r0x06, F
0048d0   d7c1     bra	0x4854               	BRA	_00163_DS_
                                           _00148_DS_:
                                           ;	.line	325; main.c	if (noteIndex-_NOTE_SEND_OFFSET >= 17 && noteIndex-_NOTE_SEND_OFFSET <= 24)
0048d2   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0048d4   0f80     addlw	0x80               	ADDLW	0x80
0048d6   0f80     addlw	0x80               	ADDLW	0x80
0048d8   e102     bnz	0x48de               	BNZ	_00201_DS_
0048da   0e11     movlw	0x11               	MOVLW	0x11
0048dc   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
                                           _00201_DS_:
0048de   e318     bnc	0x4910               	BNC	_00151_DS_
0048e0   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0048e2   0f80     addlw	0x80               	ADDLW	0x80
0048e4   0f80     addlw	0x80               	ADDLW	0x80
0048e6   e102     bnz	0x48ec               	BNZ	_00202_DS_
0048e8   0e19     movlw	0x19               	MOVLW	0x19
0048ea   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
                                           _00202_DS_:
0048ec   e211     bc	0x4910                	BC	_00151_DS_
                                           ;	.line	327; main.c	matrix_2[6][noteIndex-_NOTE_SEND_OFFSET-17] = value;
0048ee   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0048f0   6e13     movwf	0x13, 0            	MOVWF	r0x03
0048f2   0ecf     movlw	0xcf               	MOVLW	0xcf
0048f4   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
0048f6   6a16     clrf	0x16, 0             	CLRF	r0x06
0048f8   be13     btfsc	0x13, 0x7, 0       	BTFSC	r0x03, 7
0048fa   6816     setf	0x16, 0             	SETF	r0x06
0048fc   0ef0     movlw	0xf0               	MOVLW	LOW(_matrix_2 + 48)
0048fe   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
004900   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 48)
004902   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x06, F
004904   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
004906   ffe1
004908   c016     movff	0x16, 0xfe2        	MOVFF	r0x06, FSR0H
00490a   ffe2
00490c   c015     movff	0x15, 0xfe7        	MOVFF	r0x05, INDF0
00490e   ffe7
                                           _00151_DS_:
                                           ;	.line	330; main.c	if (noteIndex-_NOTE_SEND_OFFSET >= 25 && noteIndex-_NOTE_SEND_OFFSET <= 32)
004910   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
004912   0f80     addlw	0x80               	ADDLW	0x80
004914   0f80     addlw	0x80               	ADDLW	0x80
004916   e102     bnz	0x491c               	BNZ	_00203_DS_
004918   0e19     movlw	0x19               	MOVLW	0x19
00491a   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
                                           _00203_DS_:
00491c   e316     bnc	0x494a               	BNC	_00167_DS_
00491e   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
004920   0f80     addlw	0x80               	ADDLW	0x80
004922   0f80     addlw	0x80               	ADDLW	0x80
004924   e102     bnz	0x492a               	BNZ	_00204_DS_
004926   0e21     movlw	0x21               	MOVLW	0x21
004928   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
                                           _00204_DS_:
00492a   e20f     bc	0x494a                	BC	_00167_DS_
                                           ;	.line	332; main.c	matrix_2[7][noteIndex-_NOTE_SEND_OFFSET-25] = value;
00492c   0ec7     movlw	0xc7               	MOVLW	0xc7
00492e   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
004930   6a10     clrf	0x10, 0             	CLRF	r0x00
004932   be11     btfsc	0x11, 0x7, 0       	BTFSC	r0x01, 7
004934   6810     setf	0x10, 0             	SETF	r0x00
004936   0ef8     movlw	0xf8               	MOVLW	LOW(_matrix_2 + 56)
004938   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
00493a   0e00     movlw	0                  	MOVLW	HIGH(_matrix_2 + 56)
00493c   2210     addwfc	0x10, 0x1, 0      	ADDWFC	r0x00, F
00493e   c011     movff	0x11, 0xfe1        	MOVFF	r0x01, FSR0L
004940   ffe1
004942   c010     movff	0x10, 0xfe2        	MOVFF	r0x00, FSR0H
004944   ffe2
004946   c015     movff	0x15, 0xfe7        	MOVFF	r0x05, INDF0
004948   ffe7
                                           _00167_DS_:
00494a   cfec     movff	0xfec, 0x1a        	MOVFF	PREINC1, r0x0a
00494c   f01a
00494e   cfec     movff	0xfec, 0x19        	MOVFF	PREINC1, r0x09
004950   f019
004952   cfec     movff	0xfec, 0x18        	MOVFF	PREINC1, r0x08
004954   f018
004956   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
004958   f017
00495a   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
00495c   f016
00495e   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
004960   f015
004962   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
004964   f014
004966   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
004968   f013
00496a   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
00496c   f012
00496e   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
004970   f011
004972   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
004974   f010
004976   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004978   ffd9
00497a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DISPLAY_Tick	code
                                           _DISPLAY_Tick:
                                           ;	.line	242; main.c	void DISPLAY_Tick(void) __wparam
0057ee   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
0057f0   ffed
0057f2   0101     movlb	0x1                	BANKSEL	_app_flags
                                           ;	.line	245; main.c	if( !app_flags.DISPLAY_UPDATE_REQ )
0057f4   b125     btfsc	0x25, 0, 0x1       	BTFSC	_app_flags, 0, B
0057f6   d001     bra	0x57fa               	BRA	_00122_DS_
                                           ;	.line	246; main.c	return;
0057f8   d046     bra	0x5886               	BRA	_00123_DS_
                                           _00122_DS_:
0057fa   0101     movlb	0x1                	BANKSEL	_app_flags
                                           ;	.line	249; main.c	app_flags.DISPLAY_UPDATE_REQ = 0;
0057fc   9125     bcf	0x25, 0, 0x1         	BCF	_app_flags, 0, B
                                           ;	.line	252; main.c	MIOS_LCD_CursorSet(0x40 + 0);
0057fe   0e40     movlw	0x40               	MOVLW	0x40
005800   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
005802   f016
005804   0101     movlb	0x1                	BANKSEL	_last_ain_pin
                                           ;	.line	253; main.c	MIOS_LCD_PrintBCD2(last_ain_pin + 1);
005806   2926     incf	0x26, 0, 0x1        	INCF	_last_ain_pin, W, B
005808   6e10     movwf	0x10, 0            	MOVWF	r0x00
00580a   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00580c   ec90     call	0x2d20, 0           	CALL	_MIOS_LCD_PrintBCD2
00580e   f016
                                           ;	.line	254; main.c	MIOS_LCD_PrintChar(':');
005810   0e3a     movlw	0x3a               	MOVLW	0x3a
005812   ec94     call	0x2d28, 0           	CALL	_MIOS_LCD_PrintChar
005814   f016
005816   0101     movlb	0x1                	BANKSEL	_last_ain_pin
                                           ;	.line	255; main.c	MIOS_LCD_PrintBCD3(MIOS_AIN_Pin7bitGet(last_ain_pin));
005818   5126     movf	0x26, 0, 0x1        	MOVF	_last_ain_pin, W, B
00581a   ec38     call	0x2c70, 0           	CALL	_MIOS_AIN_Pin7bitGet
00581c   f016
00581e   6e10     movwf	0x10, 0            	MOVWF	r0x00
005820   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005822   ec92     call	0x2d24, 0           	CALL	_MIOS_LCD_PrintBCD3
005824   f016
                                           ;	.line	258; main.c	MIOS_LCD_CursorSet(0x40 + 7);
005826   0e47     movlw	0x47               	MOVLW	0x47
005828   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
00582a   f016
00582c   0101     movlb	0x1                	BANKSEL	_last_din_pin
                                           ;	.line	259; main.c	MIOS_LCD_PrintBCD3(last_din_pin + 1);
00582e   2927     incf	0x27, 0, 0x1        	INCF	_last_din_pin, W, B
005830   6e10     movwf	0x10, 0            	MOVWF	r0x00
005832   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005834   ec92     call	0x2d24, 0           	CALL	_MIOS_LCD_PrintBCD3
005836   f016
005838   0101     movlb	0x1                	BANKSEL	_last_din_pin
                                           ;	.line	260; main.c	MIOS_LCD_PrintChar(MIOS_DIN_PinGet(last_din_pin) ? 'o' : '*');
00583a   5127     movf	0x27, 0, 0x1        	MOVF	_last_din_pin, W, B
00583c   ec5a     call	0x2cb4, 0           	CALL	_MIOS_DIN_PinGet
00583e   f016
005840   6e10     movwf	0x10, 0            	MOVWF	r0x00
005842   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005844   e003     bz	0x584c                	BZ	_00125_DS_
005846   0e6f     movlw	0x6f               	MOVLW	0x6f
005848   6e10     movwf	0x10, 0            	MOVWF	r0x00
00584a   d002     bra	0x5850               	BRA	_00126_DS_
                                           _00125_DS_:
00584c   0e2a     movlw	0x2a               	MOVLW	0x2a
00584e   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           _00126_DS_:
005850   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005852   ec94     call	0x2d28, 0           	CALL	_MIOS_LCD_PrintChar
005854   f016
                                           ;	.line	263; main.c	MIOS_LCD_CursorSet(0x40 + 12);
005856   0e4c     movlw	0x4c               	MOVLW	0x4c
005858   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
00585a   f016
00585c   0101     movlb	0x1                	BANKSEL	_last_dout_pin
                                           ;	.line	264; main.c	MIOS_LCD_PrintBCD3(last_dout_pin + 1);
00585e   2928     incf	0x28, 0, 0x1        	INCF	_last_dout_pin, W, B
005860   6e10     movwf	0x10, 0            	MOVWF	r0x00
005862   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005864   ec92     call	0x2d24, 0           	CALL	_MIOS_LCD_PrintBCD3
005866   f016
005868   0101     movlb	0x1                	BANKSEL	_last_dout_pin
                                           ;	.line	265; main.c	MIOS_LCD_PrintChar(MIOS_DOUT_PinGet(last_dout_pin) ? '*' : 'o');
00586a   5128     movf	0x28, 0, 0x1        	MOVF	_last_dout_pin, W, B
00586c   ec5e     call	0x2cbc, 0           	CALL	_MIOS_DOUT_PinGet
00586e   f016
005870   6e10     movwf	0x10, 0            	MOVWF	r0x00
005872   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005874   e003     bz	0x587c                	BZ	_00127_DS_
005876   0e2a     movlw	0x2a               	MOVLW	0x2a
005878   6e10     movwf	0x10, 0            	MOVWF	r0x00
00587a   d002     bra	0x5880               	BRA	_00128_DS_
                                           _00127_DS_:
00587c   0e6f     movlw	0x6f               	MOVLW	0x6f
00587e   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           _00128_DS_:
005880   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
005882   ec94     call	0x2d28, 0           	CALL	_MIOS_LCD_PrintChar
005884   f016
                                           _00123_DS_:
005886   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
005888   f010
00588a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DISPLAY_Init	code
                                           _DISPLAY_Init:
                                           ;	.line	223; main.c	MIOS_LCD_Clear();
005a84   ec82     call	0x2d04, 0           	CALL	_MIOS_LCD_Clear
005a86   f016
                                           ;	.line	226; main.c	MIOS_LCD_CursorSet(0x00); // first line
005a88   0e00     movlw	0                  	MOVLW	0x00
005a8a   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
005a8c   f016
                                           ;	.line	227; main.c	MIOS_LCD_PrintCString("2AIN   DIN  DOUT");
005a8e   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
005a90   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005a92   0e4f     movlw	0x4f               	MOVLW	HIGH(__str_0)
005a94   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005a96   0ee6     movlw	0xe6               	MOVLW	LOW(__str_0)
005a98   ec00     call	0x5a00, 0           	CALL	_MIOS_LCD_PrintCString
005a9a   f02d
005a9c   0e02     movlw	0x2                	MOVLW	0x02
005a9e   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	228; main.c	MIOS_LCD_CursorSet(0x40); // second line
005aa0   0e40     movlw	0x40               	MOVLW	0x40
005aa2   ec88     call	0x2d10, 0           	CALL	_MIOS_LCD_CursorSet
005aa4   f016
                                           ;	.line	229; main.c	MIOS_LCD_PrintCString("xx:xxx xxxx xxxx");
005aa6   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
005aa8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005aaa   0e4f     movlw	0x4f               	MOVLW	HIGH(__str_1)
005aac   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
005aae   0ef8     movlw	0xf8               	MOVLW	LOW(__str_1)
005ab0   ec00     call	0x5a00, 0           	CALL	_MIOS_LCD_PrintCString
005ab2   f02d
005ab4   0e02     movlw	0x2                	MOVLW	0x02
005ab6   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
005ab8   0101     movlb	0x1                	BANKSEL	_app_flags
                                           ;	.line	232; main.c	app_flags.DISPLAY_UPDATE_REQ = 1;
005aba   8125     bsf	0x25, 0, 0x1         	BSF	_app_flags, 0, B
                                           ;	.line	235; main.c	DoStartupPattern();
005abc   ecc6     call	0x438c, 0           	CALL	_DoStartupPattern
005abe   f021
005ac0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Timer	code
                                           _Timer:
                                           ;	.line	213; main.c	}
005d00   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Tick	code
                                           _Tick:
                                           ;	.line	205; main.c	}
005d02   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Init	code
                                           _Init:
                                           ;	.line	165; main.c	test_mode = 1;
005994   0e01     movlw	0x1                	MOVLW	0x01
005996   0101     movlb	0x1                	BANKSEL	_test_mode
005998   6f12     movwf	0x12, 0x1          	MOVWF	_test_mode, B
                                           ; removed redundant BANKSEL
00599a   6b13     clrf	0x13, 0x1           	CLRF	(_test_mode + 1), B
00599c   0101     movlb	0x1                	BANKSEL	_record_sysex
                                           ;	.line	166; main.c	record_sysex = 0;
00599e   6b14     clrf	0x14, 0x1           	CLRF	_record_sysex, B
                                           ; removed redundant BANKSEL
0059a0   6b15     clrf	0x15, 0x1           	CLRF	(_record_sysex + 1), B
0059a2   0101     movlb	0x1                	BANKSEL	_last_sysex
                                           ;	.line	167; main.c	last_sysex = 0x00;
0059a4   6b24     clrf	0x24, 0x1           	CLRF	_last_sysex, B
0059a6   0101     movlb	0x1                	BANKSEL	_clock_ticks
                                           ;	.line	168; main.c	clock_ticks = 0;
0059a8   6b16     clrf	0x16, 0x1           	CLRF	_clock_ticks, B
                                           ; removed redundant BANKSEL
0059aa   6b17     clrf	0x17, 0x1           	CLRF	(_clock_ticks + 1), B
0059ac   0101     movlb	0x1                	BANKSEL	_clock_beats
                                           ;	.line	169; main.c	clock_beats = 0;
0059ae   6b18     clrf	0x18, 0x1           	CLRF	_clock_beats, B
                                           ; removed redundant BANKSEL
0059b0   6b19     clrf	0x19, 0x1           	CLRF	(_clock_beats + 1), B
0059b2   0101     movlb	0x1                	BANKSEL	_clock_bars
                                           ;	.line	170; main.c	clock_bars = 0;
0059b4   6b1a     clrf	0x1a, 0x1           	CLRF	_clock_bars, B
                                           ; removed redundant BANKSEL
0059b6   6b1b     clrf	0x1b, 0x1           	CLRF	(_clock_bars + 1), B
                                           ;	.line	173; main.c	MIOS_MIDI_MergerSet(MIOS_MIDI_MERGER_MBLINK_EP);
0059b8   0e02     movlw	0x2                	MOVLW	0x02
0059ba   ec14     call	0x2c28, 0           	CALL	_MIOS_MIDI_MergerSet
0059bc   f016
                                           ;	.line	176; main.c	MIOS_SRIO_UpdateFrqSet(1); // ms
0059be   0e01     movlw	0x1                	MOVLW	0x01
0059c0   ec80     call	0x2d00, 0           	CALL	_MIOS_SRIO_UpdateFrqSet
0059c2   f016
                                           ;	.line	179; main.c	MIOS_SRIO_NumberSet(NUMBER_OF_SRIO);
0059c4   0e08     movlw	0x8                	MOVLW	0x08
0059c6   ec78     call	0x2cf0, 0           	CALL	_MIOS_SRIO_NumberSet
0059c8   f016
                                           ;	.line	182; main.c	MIOS_SRIO_DebounceSet(DIN_DEBOUNCE_VALUE);
0059ca   0e0a     movlw	0xa                	MOVLW	0x0a
0059cc   ec12     call	0x2e24, 0           	CALL	_MIOS_SRIO_DebounceSet
0059ce   f017
                                           ;	.line	184; main.c	MIOS_SRIO_TS_SensitivitySet(DIN_TS_SENSITIVITY);
0059d0   0e00     movlw	0                  	MOVLW	0x00
0059d2   ec7c     call	0x2cf8, 0           	CALL	_MIOS_SRIO_TS_SensitivitySet
0059d4   f016
                                           ;	.line	187; main.c	MIOS_AIN_NumberSet(AIN_NUMBER_INPUTS);
0059d6   0e40     movlw	0x40               	MOVLW	0x40
0059d8   ec36     call	0x2c6c, 0           	CALL	_MIOS_AIN_NumberSet
0059da   f016
                                           ;	.line	189; main.c	MIOS_AIN_Muxed();
0059dc   ec32     call	0x2c64, 0           	CALL	_MIOS_AIN_Muxed
0059de   f016
                                           ;	.line	193; main.c	MIOS_AIN_DeadbandSet(AIN_DEADBAND);
0059e0   0e07     movlw	0x7                	MOVLW	0x07
0059e2   ec30     call	0x2c60, 0           	CALL	_MIOS_AIN_DeadbandSet
0059e4   f016
                                           ;	.line	196; main.c	MIOS_DOUT_SRSet(_MATRIX_1_DOUT_START, 0);
0059e6   0e00     movlw	0                  	MOVLW	0x00
0059e8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0059ea   0e00     movlw	0                  	MOVLW	0x00
0059ec   ec3e     call	0x5c7c, 0           	CALL	_MIOS_DOUT_SRSet
0059ee   f02e
0059f0   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	197; main.c	MIOS_DOUT_SRSet(_MATRIX_2_DOUT_START, 0);
0059f2   0e00     movlw	0                  	MOVLW	0x00
0059f4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0059f6   0e04     movlw	0x4                	MOVLW	0x04
0059f8   ec3e     call	0x5c7c, 0           	CALL	_MIOS_DOUT_SRSet
0059fa   f02e
0059fc   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
0059fe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _pot_event_map:
004ee6   32b0     rrcf	0xb0, 0x1, 0        	DB	0xb0, 0x32, 0xb1, 0x32, 0xb2, 0x32, 0xb3, 0x32, 0xb4, 0x32, 0xb5, 0x32
004ee8   32b1     rrcf	0xb1, 0x1, 0        
004eea   32b2     rrcf	0xb2, 0x1, 0        
004eec   32b3     rrcf	0xb3, 0x1, 0        
004eee   32b4     rrcf	0xb4, 0x1, 0        
004ef0   32b5     rrcf	0xb5, 0x1, 0        
004ef2   32b6     rrcf	0xb6, 0x1, 0        	DB	0xb6, 0x32, 0xb7, 0x32, 0xb0, 0x33, 0xb1, 0x33, 0xb2, 0x33, 0xb3, 0x33
004ef4   32b7     rrcf	0xb7, 0x1, 0        
004ef6   33b0     rrcf	0xb0, 0x1, 0x1      
004ef8   33b1     rrcf	0xb1, 0x1, 0x1      
004efa   33b2     rrcf	0xb2, 0x1, 0x1      
004efc   33b3     rrcf	0xb3, 0x1, 0x1      
004efe   33b4     rrcf	0xb4, 0x1, 0x1      	DB	0xb4, 0x33, 0xb5, 0x33, 0xb6, 0x33, 0xb7, 0x33, 0xb0, 0x34, 0xb1, 0x34
004f00   33b5     rrcf	0xb5, 0x1, 0x1      
004f02   33b6     rrcf	0xb6, 0x1, 0x1      
004f04   33b7     rrcf	0xb7, 0x1, 0x1      
004f06   34b0     rlcf	0xb0, 0, 0          
004f08   34b1     rlcf	0xb1, 0, 0          
004f0a   34b2     rlcf	0xb2, 0, 0          	DB	0xb2, 0x34, 0xb3, 0x34, 0xb4, 0x34, 0xb5, 0x34, 0xb6, 0x34, 0xb7, 0x34
004f0c   34b3     rlcf	0xb3, 0, 0          
004f0e   34b4     rlcf	0xb4, 0, 0          
004f10   34b5     rlcf	0xb5, 0, 0          
004f12   34b6     rlcf	0xb6, 0, 0          
004f14   34b7     rlcf	0xb7, 0, 0          
004f16   35b0     rlcf	0xb0, 0, 0x1        	DB	0xb0, 0x35, 0xb1, 0x35, 0xb2, 0x35, 0xb3, 0x35, 0xb4, 0x35, 0xb5, 0x35
004f18   35b1     rlcf	0xb1, 0, 0x1        
004f1a   35b2     rlcf	0xb2, 0, 0x1        
004f1c   35b3     rlcf	0xb3, 0, 0x1        
004f1e   35b4     rlcf	0xb4, 0, 0x1        
004f20   35b5     rlcf	0xb5, 0, 0x1        
004f22   35b6     rlcf	0xb6, 0, 0x1        	DB	0xb6, 0x35, 0xb7, 0x35, 0xb0, 0x36, 0xb1, 0x36, 0xb2, 0x36, 0xb3, 0x36
004f24   35b7     rlcf	0xb7, 0, 0x1        
004f26   36b0     rlcf	0xb0, 0x1, 0        
004f28   36b1     rlcf	0xb1, 0x1, 0        
004f2a   36b2     rlcf	0xb2, 0x1, 0        
004f2c   36b3     rlcf	0xb3, 0x1, 0        
004f2e   36b4     rlcf	0xb4, 0x1, 0        	DB	0xb4, 0x36, 0xb5, 0x36, 0xb6, 0x36, 0xb7, 0x36, 0xb0, 0x37, 0xb1, 0x37
004f30   36b5     rlcf	0xb5, 0x1, 0        
004f32   36b6     rlcf	0xb6, 0x1, 0        
004f34   36b7     rlcf	0xb7, 0x1, 0        
004f36   37b0     rlcf	0xb0, 0x1, 0x1      
004f38   37b1     rlcf	0xb1, 0x1, 0x1      
004f3a   37b2     rlcf	0xb2, 0x1, 0x1      	DB	0xb2, 0x37, 0xb3, 0x37, 0xb4, 0x37, 0xb5, 0x37, 0xb6, 0x37, 0xb7, 0x37
004f3c   37b3     rlcf	0xb3, 0x1, 0x1      
004f3e   37b4     rlcf	0xb4, 0x1, 0x1      
004f40   37b5     rlcf	0xb5, 0x1, 0x1      
004f42   37b6     rlcf	0xb6, 0x1, 0x1      
004f44   37b7     rlcf	0xb7, 0x1, 0x1      
004f46   38b0     swapf	0xb0, 0, 0         	DB	0xb0, 0x38, 0xb1, 0x38, 0xb2, 0x38, 0xb3, 0x38, 0xb4, 0x38, 0xb5, 0x38
004f48   38b1     swapf	0xb1, 0, 0         
004f4a   38b2     swapf	0xb2, 0, 0         
004f4c   38b3     swapf	0xb3, 0, 0         
004f4e   38b4     swapf	0xb4, 0, 0         
004f50   38b5     swapf	0xb5, 0, 0         
004f52   38b6     swapf	0xb6, 0, 0         	DB	0xb6, 0x38, 0xb7, 0x38, 0xb0, 0x39, 0xb1, 0x39, 0xb2, 0x39, 0xb3, 0x39
004f54   38b7     swapf	0xb7, 0, 0         
004f56   39b0     swapf	0xb0, 0, 0x1       
004f58   39b1     swapf	0xb1, 0, 0x1       
004f5a   39b2     swapf	0xb2, 0, 0x1       
004f5c   39b3     swapf	0xb3, 0, 0x1       
004f5e   39b4     swapf	0xb4, 0, 0x1       	DB	0xb4, 0x39, 0xb5, 0x39, 0xb6, 0x39, 0xb7, 0x39
004f60   39b5     swapf	0xb5, 0, 0x1       
004f62   39b6     swapf	0xb6, 0, 0x1       
004f64   39b7     swapf	0xb7, 0, 0x1       
                                           ; ; Starting pCode block for Ival
                                           _button_event_map:
004f66   0098     dw	0x98  ;unknown opcode 	DB	0x98, 0x00, 0x98, 0x01, 0x98, 0x02, 0x98, 0x03, 0x98, 0x04, 0x98, 0x05
004f68   0198     movlb	0x98               
004f6a   0298     mulwf	0x98, 0            
004f6c   0398     mulwf	0x98, 0x1          
004f6e   0498     decf	0x98, 0, 0          
004f70   0598     decf	0x98, 0, 0x1        
004f72   0698     decf	0x98, 0x1, 0        	DB	0x98, 0x06, 0x98, 0x07, 0x98, 0x08, 0x98, 0x09, 0x98, 0x0a, 0x98, 0x0b
004f74   0798     decf	0x98, 0x1, 0x1      
004f76   0898     sublw	0x98               
004f78   0998     iorlw	0x98               
004f7a   0a98     xorlw	0x98               
004f7c   0b98     andlw	0x98               
004f7e   0c98     retlw	0x98               	DB	0x98, 0x0c, 0x98, 0x0d, 0x98, 0x0e, 0x98, 0x0f, 0x98, 0x10, 0x98, 0x11
004f80   0d98     mullw	0x98               
004f82   0e98     movlw	0x98               
004f84   0f98     addlw	0x98               
004f86   1098     iorwf	0x98, 0, 0         
004f88   1198     iorwf	0x98, 0, 0x1       
004f8a   1298     iorwf	0x98, 0x1, 0       	DB	0x98, 0x12, 0x98, 0x13, 0x98, 0x14, 0x98, 0x15, 0x98, 0x16, 0x98, 0x17
004f8c   1398     iorwf	0x98, 0x1, 0x1     
004f8e   1498     andwf	0x98, 0, 0         
004f90   1598     andwf	0x98, 0, 0x1       
004f92   1698     andwf	0x98, 0x1, 0       
004f94   1798     andwf	0x98, 0x1, 0x1     
004f96   1898     xorwf	0x98, 0, 0         	DB	0x98, 0x18, 0x98, 0x19, 0x98, 0x1a, 0x98, 0x1b, 0x98, 0x1c, 0x98, 0x1d
004f98   1998     xorwf	0x98, 0, 0x1       
004f9a   1a98     xorwf	0x98, 0x1, 0       
004f9c   1b98     xorwf	0x98, 0x1, 0x1     
004f9e   1c98     comf	0x98, 0, 0          
004fa0   1d98     comf	0x98, 0, 0x1        
004fa2   1e98     comf	0x98, 0x1, 0        	DB	0x98, 0x1e, 0x98, 0x1f, 0x90, 0x0b, 0x91, 0x0b, 0x92, 0x0b, 0x93, 0x0b
004fa4   1f98     comf	0x98, 0x1, 0x1      
004fa6   0b90     andlw	0x90               
004fa8   0b91     andlw	0x91               
004faa   0b92     andlw	0x92               
004fac   0b93     andlw	0x93               
004fae   0b97     andlw	0x97               	DB	0x97, 0x0b, 0x96, 0x0b, 0x95, 0x0b, 0x94, 0x0b, 0x91, 0x01, 0x91, 0x02
004fb0   0b96     andlw	0x96               
004fb2   0b95     andlw	0x95               
004fb4   0b94     andlw	0x94               
004fb6   0191     movlb	0x91               
004fb8   0291     mulwf	0x91, 0            
004fba   0190     movlb	0x90               	DB	0x90, 0x01, 0x90, 0x02, 0x93, 0x02, 0x93, 0x01, 0x92, 0x01, 0x92, 0x02
004fbc   0290     mulwf	0x90, 0            
004fbe   0293     mulwf	0x93, 0            
004fc0   0193     movlb	0x93               
004fc2   0192     movlb	0x92               
004fc4   0292     mulwf	0x92, 0            
004fc6   0090     dw	0x90  ;unknown opcode 	DB	0x90, 0x00, 0x91, 0x00, 0x93, 0x00, 0x92, 0x00, 0x95, 0x02, 0x95, 0x01
004fc8   0091     dw	0x91  ;unknown opcode 
004fca   0093     dw	0x93  ;unknown opcode 
004fcc   0092     dw	0x92  ;unknown opcode 
004fce   0295     mulwf	0x95, 0            
004fd0   0195     movlb	0x95               
004fd2   0194     movlb	0x94               	DB	0x94, 0x01, 0x94, 0x02, 0x94, 0x00, 0x95, 0x00, 0x97, 0x00, 0x96, 0x00
004fd4   0294     mulwf	0x94, 0            
004fd6   0094     dw	0x94  ;unknown opcode 
004fd8   0095     dw	0x95  ;unknown opcode 
004fda   0097     dw	0x97  ;unknown opcode 
004fdc   0096     dw	0x96  ;unknown opcode 
004fde   0297     mulwf	0x97, 0            	DB	0x97, 0x02, 0x97, 0x01, 0x96, 0x01, 0x96, 0x02
004fe0   0197     movlb	0x97               
004fe2   0196     movlb	0x96               
004fe4   0296     mulwf	0x96, 0            
                                           ; ; Starting pCode block
                                           __str_0:
004fe6   4132     rrncf	0x32, 0, 0x1       	DB	0x32, 0x41, 0x49, 0x4e, 0x20, 0x20, 0x20, 0x44, 0x49, 0x4e, 0x20, 0x20
004fe8   4e49     dcfsnz	0x49, 0x1, 0      
004fea   2020     addwfc	0x20, 0, 0        
004fec   4420     rlncf	0x20, 0, 0         
004fee   4e49     dcfsnz	0x49, 0x1, 0      
004ff0   2020     addwfc	0x20, 0, 0        
004ff2   4f44     dcfsnz	0x44, 0x1, 0x1    	DB	0x44, 0x4f, 0x55, 0x54, 0x00
004ff4   5455     subfwb	0x55, 0, 0        
004ff6   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
004ff8   7878     btg	0x78, 0x4, 0         	DB	0x78, 0x78, 0x3a, 0x78, 0x78, 0x78, 0x20, 0x78, 0x78, 0x78, 0x78, 0x20
004ffa   783a     btg	0x3a, 0x4, 0         
004ffc   7878     btg	0x78, 0x4, 0         
004ffe   7820     btg	0x20, 0x4, 0         
005000   7878     btg	0x78, 0x4, 0         
005002   2078     addwfc	0x78, 0, 0        
005004   7878     btg	0x78, 0x4, 0         	DB	0x78, 0x78, 0x78, 0x78, 0x00
005006   7878     btg	0x78, 0x4, 0         
005008   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 8666 (0x21da) bytes ( 6.61%)
                                           ;           	 4333 (0x10ed) words
                                           ; udata size:	   35 (0x0023) bytes ( 2.73%)
                                           ; access size:	   13 (0x000d) bytes
                                           
                                           
                                           	end
